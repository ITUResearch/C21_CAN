
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000052f4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000052f4  000052f4  000152f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000094  20000000  000052fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000004a0  20000098  00005398  00020098  2**3
                  ALLOC
  4 .stack        00002000  20000538  00005838  00020098  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  7 .debug_info   0004677c  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005d50  00000000  00000000  00066891  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000967d  00000000  00000000  0006c5e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000930  00000000  00000000  00075c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bb8  00000000  00000000  0007658e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000238ee  00000000  00000000  00077146  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001422a  00000000  00000000  0009aa34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a701e  00000000  00000000  000aec5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001ddc  00000000  00000000  00155c7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 25 00 20 79 27 00 00 75 27 00 00 75 27 00 00     8%. y'..u'..u'..
	...
      2c:	75 27 00 00 00 00 00 00 00 00 00 00 75 27 00 00     u'..........u'..
      3c:	75 27 00 00 75 27 00 00 75 27 00 00 11 0b 00 00     u'..u'..u'......
      4c:	75 27 00 00 75 27 00 00 2d 0d 00 00 75 27 00 00     u'..u'..-...u'..
      5c:	75 27 00 00 f1 0e 00 00 69 1a 00 00 79 1a 00 00     u'......i...y...
      6c:	89 1a 00 00 99 1a 00 00 a9 1a 00 00 b9 1a 00 00     ................
      7c:	89 33 00 00 75 27 00 00 d9 0d 00 00 e9 0d 00 00     .3..u'..........
      8c:	f9 0d 00 00 75 27 00 00 75 27 00 00 75 27 00 00     ....u'..u'..u'..
      9c:	75 27 00 00 75 27 00 00 41 07 00 00 51 07 00 00     u'..u'..A...Q...
      ac:	75 27 00 00 75 27 00 00 75 27 00 00 75 27 00 00     u'..u'..u'..u'..

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000098 	.word	0x20000098
      dc:	00000000 	.word	0x00000000
      e0:	000052fc 	.word	0x000052fc

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	2000009c 	.word	0x2000009c
     110:	000052fc 	.word	0x000052fc
     114:	000052fc 	.word	0x000052fc
     118:	00000000 	.word	0x00000000

0000011c <_adc_get_inst_index>:
	/* List of available ADC modules. */
	Adc *const adc_modules[ADC_INST_NUM] = ADC_INSTS;

	/* Find index for ADC instance. */
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
		if (hw == adc_modules[i]) {
     11c:	4b06      	ldr	r3, [pc, #24]	; (138 <_adc_get_inst_index+0x1c>)
     11e:	4298      	cmp	r0, r3
     120:	d008      	beq.n	134 <_adc_get_inst_index+0x18>
     122:	4a06      	ldr	r2, [pc, #24]	; (13c <_adc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     124:	2300      	movs	r3, #0
		if (hw == adc_modules[i]) {
     126:	4290      	cmp	r0, r2
     128:	d001      	beq.n	12e <_adc_get_inst_index+0x12>
}
     12a:	0018      	movs	r0, r3
     12c:	4770      	bx	lr
     12e:	3301      	adds	r3, #1
			return i;
     130:	b2db      	uxtb	r3, r3
     132:	e7fa      	b.n	12a <_adc_get_inst_index+0xe>
	for (uint32_t i = 0; i < ADC_INST_NUM; i++) {
     134:	2300      	movs	r3, #0
     136:	e7fb      	b.n	130 <_adc_get_inst_index+0x14>
     138:	42004400 	.word	0x42004400
     13c:	42004800 	.word	0x42004800

00000140 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     140:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     142:	2300      	movs	r3, #0
     144:	2200      	movs	r2, #0
     146:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     148:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     14a:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     14c:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     14e:	2100      	movs	r1, #0
     150:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     152:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     154:	61c3      	str	r3, [r0, #28]
#if SAMR30
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
     156:	2401      	movs	r4, #1
     158:	7104      	strb	r4, [r0, #4]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     15a:	24c0      	movs	r4, #192	; 0xc0
     15c:	0164      	lsls	r4, r4, #5
     15e:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     160:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     162:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     164:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     166:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     168:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     16a:	242a      	movs	r4, #42	; 0x2a
     16c:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     16e:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     170:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     172:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     174:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     176:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     178:	3c06      	subs	r4, #6
     17a:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     17c:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     17e:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     180:	7541      	strb	r1, [r0, #21]
}
     182:	bd10      	pop	{r4, pc}

00000184 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     184:	b5f0      	push	{r4, r5, r6, r7, lr}
     186:	46de      	mov	lr, fp
     188:	4657      	mov	r7, sl
     18a:	464e      	mov	r6, r9
     18c:	4645      	mov	r5, r8
     18e:	b5e0      	push	{r5, r6, r7, lr}
     190:	b09f      	sub	sp, #124	; 0x7c
     192:	0005      	movs	r5, r0
     194:	000e      	movs	r6, r1
     196:	0017      	movs	r7, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     198:	0008      	movs	r0, r1
     19a:	4b98      	ldr	r3, [pc, #608]	; (3fc <adc_init+0x278>)
     19c:	4798      	blx	r3
     19e:	0004      	movs	r4, r0
     1a0:	9001      	str	r0, [sp, #4]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     1a2:	602e      	str	r6, [r5, #0]
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     1a4:	4a96      	ldr	r2, [pc, #600]	; (400 <adc_init+0x27c>)
     1a6:	69d3      	ldr	r3, [r2, #28]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_ADC);
#elif (SAML21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
     1a8:	0080      	lsls	r0, r0, #2
     1aa:	4996      	ldr	r1, [pc, #600]	; (404 <adc_init+0x280>)
     1ac:	5841      	ldr	r1, [r0, r1]
     1ae:	430b      	orrs	r3, r1
     1b0:	61d3      	str	r3, [r2, #28]
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1b2:	7833      	ldrb	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     1b4:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     1b6:	07db      	lsls	r3, r3, #31
     1b8:	d506      	bpl.n	1c8 <adc_init+0x44>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     1ba:	b01f      	add	sp, #124	; 0x7c
     1bc:	bc3c      	pop	{r2, r3, r4, r5}
     1be:	4690      	mov	r8, r2
     1c0:	4699      	mov	r9, r3
     1c2:	46a2      	mov	sl, r4
     1c4:	46ab      	mov	fp, r5
     1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     1c8:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     1ca:	8c13      	ldrh	r3, [r2, #32]
     1cc:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     1ce:	2b00      	cmp	r3, #0
     1d0:	d1fb      	bne.n	1ca <adc_init+0x46>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1d2:	7833      	ldrb	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     1d4:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     1d6:	079b      	lsls	r3, r3, #30
     1d8:	d4ef      	bmi.n	1ba <adc_init+0x36>
	module_inst->reference = config->reference;
     1da:	787b      	ldrb	r3, [r7, #1]
     1dc:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     1de:	2b00      	cmp	r3, #0
     1e0:	d104      	bne.n	1ec <adc_init+0x68>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     1e2:	4a89      	ldr	r2, [pc, #548]	; (408 <adc_init+0x284>)
     1e4:	69d3      	ldr	r3, [r2, #28]
     1e6:	2104      	movs	r1, #4
     1e8:	430b      	orrs	r3, r1
     1ea:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
     1ec:	2300      	movs	r3, #0
     1ee:	60ab      	str	r3, [r5, #8]
     1f0:	60eb      	str	r3, [r5, #12]
     1f2:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
     1f4:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     1f6:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     1f8:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     1fa:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
     1fc:	00a3      	lsls	r3, r4, #2
     1fe:	4a83      	ldr	r2, [pc, #524]	; (40c <adc_init+0x288>)
     200:	509d      	str	r5, [r3, r2]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     202:	232a      	movs	r3, #42	; 0x2a
     204:	5cfb      	ldrb	r3, [r7, r3]
     206:	2b00      	cmp	r3, #0
     208:	d105      	bne.n	216 <adc_init+0x92>
     20a:	7b3b      	ldrb	r3, [r7, #12]
     20c:	2b00      	cmp	r3, #0
     20e:	d102      	bne.n	216 <adc_init+0x92>
		module_inst->software_trigger = true;
     210:	3301      	adds	r3, #1
     212:	776b      	strb	r3, [r5, #29]
     214:	e001      	b.n	21a <adc_init+0x96>
		module_inst->software_trigger = false;
     216:	2300      	movs	r3, #0
     218:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
     21a:	682b      	ldr	r3, [r5, #0]
     21c:	469a      	mov	sl, r3
	gclk_chan_conf.source_generator = config->clock_source;
     21e:	783b      	ldrb	r3, [r7, #0]
     220:	aa04      	add	r2, sp, #16
     222:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     224:	4b7a      	ldr	r3, [pc, #488]	; (410 <adc_init+0x28c>)
     226:	5d1e      	ldrb	r6, [r3, r4]
     228:	0011      	movs	r1, r2
     22a:	0030      	movs	r0, r6
     22c:	4b79      	ldr	r3, [pc, #484]	; (414 <adc_init+0x290>)
     22e:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     230:	0030      	movs	r0, r6
     232:	4b79      	ldr	r3, [pc, #484]	; (418 <adc_init+0x294>)
     234:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     236:	793b      	ldrb	r3, [r7, #4]
     238:	4698      	mov	r8, r3
	const uint32_t pinmapping0[] = {
     23a:	ae06      	add	r6, sp, #24
     23c:	4b77      	ldr	r3, [pc, #476]	; (41c <adc_init+0x298>)
     23e:	469c      	mov	ip, r3
     240:	0032      	movs	r2, r6
     242:	0019      	movs	r1, r3
     244:	c949      	ldmia	r1!, {r0, r3, r6}
     246:	c249      	stmia	r2!, {r0, r3, r6}
     248:	c949      	ldmia	r1!, {r0, r3, r6}
     24a:	c249      	stmia	r2!, {r0, r3, r6}
     24c:	c949      	ldmia	r1!, {r0, r3, r6}
     24e:	c249      	stmia	r2!, {r0, r3, r6}
     250:	c949      	ldmia	r1!, {r0, r3, r6}
     252:	c249      	stmia	r2!, {r0, r3, r6}
	const uint32_t pinmapping1[] = {
     254:	a912      	add	r1, sp, #72	; 0x48
     256:	4663      	mov	r3, ip
     258:	3330      	adds	r3, #48	; 0x30
     25a:	000a      	movs	r2, r1
     25c:	cb43      	ldmia	r3!, {r0, r1, r6}
     25e:	c243      	stmia	r2!, {r0, r1, r6}
     260:	cb43      	ldmia	r3!, {r0, r1, r6}
     262:	c243      	stmia	r2!, {r0, r1, r6}
     264:	cb43      	ldmia	r3!, {r0, r1, r6}
     266:	c243      	stmia	r2!, {r0, r1, r6}
     268:	cb43      	ldmia	r3!, {r0, r1, r6}
     26a:	c243      	stmia	r2!, {r0, r1, r6}
	switch(index) {
     26c:	9b01      	ldr	r3, [sp, #4]
     26e:	2b00      	cmp	r3, #0
     270:	d004      	beq.n	27c <adc_init+0xf8>
		pinmapping = pinmapping1;
     272:	a912      	add	r1, sp, #72	; 0x48
	switch(index) {
     274:	2b01      	cmp	r3, #1
     276:	d002      	beq.n	27e <adc_init+0xfa>
	const uint32_t *pinmapping = NULL;;
     278:	2100      	movs	r1, #0
     27a:	e000      	b.n	27e <adc_init+0xfa>
		pinmapping = pinmapping0;
     27c:	a906      	add	r1, sp, #24
	if (pin <= _adc_extchannel_msb[index]) {
     27e:	00a3      	lsls	r3, r4, #2
     280:	4a67      	ldr	r2, [pc, #412]	; (420 <adc_init+0x29c>)
     282:	589b      	ldr	r3, [r3, r2]
     284:	469b      	mov	fp, r3
     286:	4598      	cmp	r8, r3
     288:	d922      	bls.n	2d0 <adc_init+0x14c>
	_adc_configure_ain_pin(index, config->negative_input);
     28a:	88fb      	ldrh	r3, [r7, #6]
     28c:	4698      	mov	r8, r3
	const uint32_t pinmapping0[] = {
     28e:	ae06      	add	r6, sp, #24
     290:	4b62      	ldr	r3, [pc, #392]	; (41c <adc_init+0x298>)
     292:	469c      	mov	ip, r3
     294:	0032      	movs	r2, r6
     296:	0019      	movs	r1, r3
     298:	c949      	ldmia	r1!, {r0, r3, r6}
     29a:	c249      	stmia	r2!, {r0, r3, r6}
     29c:	c949      	ldmia	r1!, {r0, r3, r6}
     29e:	c249      	stmia	r2!, {r0, r3, r6}
     2a0:	c949      	ldmia	r1!, {r0, r3, r6}
     2a2:	c249      	stmia	r2!, {r0, r3, r6}
     2a4:	c949      	ldmia	r1!, {r0, r3, r6}
     2a6:	c249      	stmia	r2!, {r0, r3, r6}
	const uint32_t pinmapping1[] = {
     2a8:	a912      	add	r1, sp, #72	; 0x48
     2aa:	4663      	mov	r3, ip
     2ac:	3330      	adds	r3, #48	; 0x30
     2ae:	000a      	movs	r2, r1
     2b0:	cb43      	ldmia	r3!, {r0, r1, r6}
     2b2:	c243      	stmia	r2!, {r0, r1, r6}
     2b4:	cb43      	ldmia	r3!, {r0, r1, r6}
     2b6:	c243      	stmia	r2!, {r0, r1, r6}
     2b8:	cb43      	ldmia	r3!, {r0, r1, r6}
     2ba:	c243      	stmia	r2!, {r0, r1, r6}
     2bc:	cb43      	ldmia	r3!, {r0, r1, r6}
     2be:	c243      	stmia	r2!, {r0, r1, r6}
	switch(index) {
     2c0:	9a01      	ldr	r2, [sp, #4]
     2c2:	2a00      	cmp	r2, #0
     2c4:	d012      	beq.n	2ec <adc_init+0x168>
		pinmapping = pinmapping1;
     2c6:	ab12      	add	r3, sp, #72	; 0x48
	switch(index) {
     2c8:	2a01      	cmp	r2, #1
     2ca:	d010      	beq.n	2ee <adc_init+0x16a>
	const uint32_t *pinmapping = NULL;;
     2cc:	2300      	movs	r3, #0
     2ce:	e00e      	b.n	2ee <adc_init+0x16a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2d0:	4643      	mov	r3, r8
     2d2:	0098      	lsls	r0, r3, #2
     2d4:	5840      	ldr	r0, [r0, r1]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2d6:	a905      	add	r1, sp, #20
     2d8:	2300      	movs	r3, #0
     2da:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2dc:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2de:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2e0:	3301      	adds	r3, #1
     2e2:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2e4:	b2c0      	uxtb	r0, r0
     2e6:	4b4f      	ldr	r3, [pc, #316]	; (424 <adc_init+0x2a0>)
     2e8:	4798      	blx	r3
     2ea:	e7ce      	b.n	28a <adc_init+0x106>
		pinmapping = pinmapping0;
     2ec:	ab06      	add	r3, sp, #24
	if (pin <= _adc_extchannel_msb[index]) {
     2ee:	45d8      	cmp	r8, fp
     2f0:	d90a      	bls.n	308 <adc_init+0x184>
     2f2:	2100      	movs	r1, #0
     2f4:	2600      	movs	r6, #0
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     2f6:	2301      	movs	r3, #1
     2f8:	4699      	mov	r9, r3
	const uint32_t pinmapping0[] = {
     2fa:	4b48      	ldr	r3, [pc, #288]	; (41c <adc_init+0x298>)
     2fc:	4698      	mov	r8, r3
		system_pinmux_pin_set_config(pin_map_result, &config);
     2fe:	9403      	str	r4, [sp, #12]
     300:	465b      	mov	r3, fp
     302:	9302      	str	r3, [sp, #8]
     304:	46ab      	mov	fp, r5
     306:	e020      	b.n	34a <adc_init+0x1c6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     308:	4642      	mov	r2, r8
     30a:	0090      	lsls	r0, r2, #2
     30c:	58c0      	ldr	r0, [r0, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     30e:	a905      	add	r1, sp, #20
     310:	2300      	movs	r3, #0
     312:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     314:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     316:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     318:	3301      	adds	r3, #1
     31a:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     31c:	b2c0      	uxtb	r0, r0
     31e:	4b41      	ldr	r3, [pc, #260]	; (424 <adc_init+0x2a0>)
     320:	4798      	blx	r3
     322:	e7e6      	b.n	2f2 <adc_init+0x16e>
		pinmapping = pinmapping0;
     324:	ab06      	add	r3, sp, #24
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     326:	0089      	lsls	r1, r1, #2
     328:	58c8      	ldr	r0, [r1, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     32a:	a905      	add	r1, sp, #20
     32c:	2300      	movs	r3, #0
     32e:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     330:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     332:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     334:	464b      	mov	r3, r9
     336:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     338:	b2c0      	uxtb	r0, r0
     33a:	4b3a      	ldr	r3, [pc, #232]	; (424 <adc_init+0x2a0>)
     33c:	4798      	blx	r3
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     33e:	3601      	adds	r6, #1
     340:	b2f6      	uxtb	r6, r6
     342:	0031      	movs	r1, r6
     344:	9b02      	ldr	r3, [sp, #8]
     346:	429e      	cmp	r6, r3
     348:	d823      	bhi.n	392 <adc_init+0x20e>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     34a:	464b      	mov	r3, r9
     34c:	40b3      	lsls	r3, r6
     34e:	693a      	ldr	r2, [r7, #16]
     350:	421a      	tst	r2, r3
     352:	d0f4      	beq.n	33e <adc_init+0x1ba>
	const uint32_t pinmapping0[] = {
     354:	a806      	add	r0, sp, #24
     356:	0003      	movs	r3, r0
     358:	4642      	mov	r2, r8
     35a:	ca31      	ldmia	r2!, {r0, r4, r5}
     35c:	c331      	stmia	r3!, {r0, r4, r5}
     35e:	ca31      	ldmia	r2!, {r0, r4, r5}
     360:	c331      	stmia	r3!, {r0, r4, r5}
     362:	ca31      	ldmia	r2!, {r0, r4, r5}
     364:	c331      	stmia	r3!, {r0, r4, r5}
     366:	ca31      	ldmia	r2!, {r0, r4, r5}
     368:	c331      	stmia	r3!, {r0, r4, r5}
	const uint32_t pinmapping1[] = {
     36a:	a812      	add	r0, sp, #72	; 0x48
     36c:	4643      	mov	r3, r8
     36e:	3330      	adds	r3, #48	; 0x30
     370:	0002      	movs	r2, r0
     372:	cb31      	ldmia	r3!, {r0, r4, r5}
     374:	c231      	stmia	r2!, {r0, r4, r5}
     376:	cb31      	ldmia	r3!, {r0, r4, r5}
     378:	c231      	stmia	r2!, {r0, r4, r5}
     37a:	cb31      	ldmia	r3!, {r0, r4, r5}
     37c:	c231      	stmia	r2!, {r0, r4, r5}
     37e:	cb31      	ldmia	r3!, {r0, r4, r5}
     380:	c231      	stmia	r2!, {r0, r4, r5}
	switch(index) {
     382:	9a01      	ldr	r2, [sp, #4]
     384:	2a00      	cmp	r2, #0
     386:	d0cd      	beq.n	324 <adc_init+0x1a0>
		pinmapping = pinmapping1;
     388:	ab12      	add	r3, sp, #72	; 0x48
	switch(index) {
     38a:	2a01      	cmp	r2, #1
     38c:	d0cb      	beq.n	326 <adc_init+0x1a2>
	const uint32_t *pinmapping = NULL;;
     38e:	2300      	movs	r3, #0
     390:	e7c9      	b.n	326 <adc_init+0x1a2>
     392:	465d      	mov	r5, fp
     394:	9c03      	ldr	r4, [sp, #12]
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     396:	7b7b      	ldrb	r3, [r7, #13]
     398:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     39a:	7bba      	ldrb	r2, [r7, #14]
     39c:	01d2      	lsls	r2, r2, #7
     39e:	4313      	orrs	r3, r2
     3a0:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     3a2:	4652      	mov	r2, sl
     3a4:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     3a6:	7d3b      	ldrb	r3, [r7, #20]
     3a8:	01db      	lsls	r3, r3, #7
			| (config->reference);
     3aa:	787a      	ldrb	r2, [r7, #1]
     3ac:	4313      	orrs	r3, r2
     3ae:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     3b0:	4652      	mov	r2, sl
     3b2:	7093      	strb	r3, [r2, #2]
	switch (config->resolution) {
     3b4:	78fb      	ldrb	r3, [r7, #3]
     3b6:	2b34      	cmp	r3, #52	; 0x34
     3b8:	d900      	bls.n	3bc <adc_init+0x238>
     3ba:	e14f      	b.n	65c <adc_init+0x4d8>
     3bc:	009b      	lsls	r3, r3, #2
     3be:	4a1a      	ldr	r2, [pc, #104]	; (428 <adc_init+0x2a4>)
     3c0:	58d3      	ldr	r3, [r2, r3]
     3c2:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     3c4:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     3c6:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_4;
     3c8:	2102      	movs	r1, #2
     3ca:	e032      	b.n	432 <adc_init+0x2ae>
		adjres = config->divide_result;
     3cc:	7a79      	ldrb	r1, [r7, #9]
		accumulate = config->accumulate_samples;
     3ce:	7a3a      	ldrb	r2, [r7, #8]
		resolution = ADC_RESOLUTION_16BIT;
     3d0:	2610      	movs	r6, #16
     3d2:	e02e      	b.n	432 <adc_init+0x2ae>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     3d4:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     3d6:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_2;
     3d8:	2101      	movs	r1, #1
     3da:	e02a      	b.n	432 <adc_init+0x2ae>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     3dc:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     3de:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     3e0:	2100      	movs	r1, #0
     3e2:	e026      	b.n	432 <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3e4:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     3e6:	2630      	movs	r6, #48	; 0x30
	uint8_t adjres = 0;
     3e8:	2100      	movs	r1, #0
     3ea:	e022      	b.n	432 <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3ec:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     3ee:	2620      	movs	r6, #32
	uint8_t adjres = 0;
     3f0:	2100      	movs	r1, #0
     3f2:	e01e      	b.n	432 <adc_init+0x2ae>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     3f4:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     3f6:	2600      	movs	r6, #0
	uint8_t adjres = 0;
     3f8:	2100      	movs	r1, #0
     3fa:	e01a      	b.n	432 <adc_init+0x2ae>
     3fc:	0000011d 	.word	0x0000011d
     400:	40000800 	.word	0x40000800
     404:	000050a0 	.word	0x000050a0
     408:	40001800 	.word	0x40001800
     40c:	20000468 	.word	0x20000468
     410:	000050c8 	.word	0x000050c8
     414:	0000261d 	.word	0x0000261d
     418:	000025ad 	.word	0x000025ad
     41c:	00005040 	.word	0x00005040
     420:	000050c0 	.word	0x000050c0
     424:	00002719 	.word	0x00002719
     428:	00004f6c 	.word	0x00004f6c
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     42c:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     42e:	2610      	movs	r6, #16
		adjres = ADC_DIVIDE_RESULT_2;
     430:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     432:	0109      	lsls	r1, r1, #4
     434:	2370      	movs	r3, #112	; 0x70
     436:	400b      	ands	r3, r1
     438:	4313      	orrs	r3, r2
     43a:	4652      	mov	r2, sl
     43c:	7313      	strb	r3, [r2, #12]
	Adc *const adc_module = module_inst->hw;
     43e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     440:	8c13      	ldrh	r3, [r2, #32]
     442:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     444:	2b00      	cmp	r3, #0
     446:	d1fb      	bne.n	440 <adc_init+0x2bc>
	if (config->sample_length > 63) {
     448:	7d7b      	ldrb	r3, [r7, #21]
		return STATUS_ERR_INVALID_ARG;
     44a:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     44c:	2b3f      	cmp	r3, #63	; 0x3f
     44e:	d900      	bls.n	452 <adc_init+0x2ce>
     450:	e6b3      	b.n	1ba <adc_init+0x36>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     452:	7bfa      	ldrb	r2, [r7, #15]
     454:	01d2      	lsls	r2, r2, #7
     456:	4313      	orrs	r3, r2
     458:	b2db      	uxtb	r3, r3
		adc_module->SAMPCTRL.reg =
     45a:	4652      	mov	r2, sl
     45c:	7353      	strb	r3, [r2, #13]
	Adc *const adc_module = module_inst->hw;
     45e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     460:	8c13      	ldrh	r3, [r2, #32]
     462:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     464:	2b00      	cmp	r3, #0
     466:	d1fb      	bne.n	460 <adc_init+0x2dc>
			config->clock_prescaler;
     468:	78bb      	ldrb	r3, [r7, #2]
	adc_module->CTRLB.reg =
     46a:	4652      	mov	r2, sl
     46c:	7053      	strb	r3, [r2, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     46e:	2324      	movs	r3, #36	; 0x24
     470:	5cfb      	ldrb	r3, [r7, r3]
     472:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     474:	7b3a      	ldrb	r2, [r7, #12]
     476:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     478:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     47a:	7afb      	ldrb	r3, [r7, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     47c:	4313      	orrs	r3, r2
     47e:	7aba      	ldrb	r2, [r7, #10]
     480:	0052      	lsls	r2, r2, #1
     482:	4313      	orrs	r3, r2
     484:	4333      	orrs	r3, r6
	adc_module->CTRLC.reg =
     486:	4652      	mov	r2, sl
     488:	8153      	strh	r3, [r2, #10]
	Adc *const adc_module = module_inst->hw;
     48a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     48c:	8c13      	ldrh	r3, [r2, #32]
     48e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     490:	2b00      	cmp	r3, #0
     492:	d1fb      	bne.n	48c <adc_init+0x308>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     494:	8b3b      	ldrh	r3, [r7, #24]
     496:	2b00      	cmp	r3, #0
     498:	d020      	beq.n	4dc <adc_init+0x358>
		switch (resolution) {
     49a:	2e10      	cmp	r6, #16
     49c:	d100      	bne.n	4a0 <adc_init+0x31c>
     49e:	e0bf      	b.n	620 <adc_init+0x49c>
     4a0:	d800      	bhi.n	4a4 <adc_init+0x320>
     4a2:	e07f      	b.n	5a4 <adc_init+0x420>
     4a4:	2e20      	cmp	r6, #32
     4a6:	d100      	bne.n	4aa <adc_init+0x326>
     4a8:	e09c      	b.n	5e4 <adc_init+0x460>
     4aa:	2e30      	cmp	r6, #48	; 0x30
     4ac:	d116      	bne.n	4dc <adc_init+0x358>
			if (config->differential_mode &&
     4ae:	7afa      	ldrb	r2, [r7, #11]
     4b0:	2a00      	cmp	r2, #0
     4b2:	d00a      	beq.n	4ca <adc_init+0x346>
					(config->window.window_lower_value > 127 ||
     4b4:	69fa      	ldr	r2, [r7, #28]
     4b6:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     4b8:	2017      	movs	r0, #23
			if (config->differential_mode &&
     4ba:	2aff      	cmp	r2, #255	; 0xff
     4bc:	d900      	bls.n	4c0 <adc_init+0x33c>
     4be:	e67c      	b.n	1ba <adc_init+0x36>
					config->window.window_lower_value < -128 ||
     4c0:	6a3a      	ldr	r2, [r7, #32]
     4c2:	3280      	adds	r2, #128	; 0x80
     4c4:	2aff      	cmp	r2, #255	; 0xff
     4c6:	d900      	bls.n	4ca <adc_init+0x346>
     4c8:	e677      	b.n	1ba <adc_init+0x36>
				return STATUS_ERR_INVALID_ARG;
     4ca:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     4cc:	69fa      	ldr	r2, [r7, #28]
     4ce:	2aff      	cmp	r2, #255	; 0xff
     4d0:	dd00      	ble.n	4d4 <adc_init+0x350>
     4d2:	e672      	b.n	1ba <adc_init+0x36>
     4d4:	6a3a      	ldr	r2, [r7, #32]
     4d6:	2aff      	cmp	r2, #255	; 0xff
     4d8:	dd00      	ble.n	4dc <adc_init+0x358>
     4da:	e66e      	b.n	1ba <adc_init+0x36>
	adc_module->CTRLC.reg |= config->window.window_mode;
     4dc:	4652      	mov	r2, sl
     4de:	8952      	ldrh	r2, [r2, #10]
     4e0:	4313      	orrs	r3, r2
     4e2:	4652      	mov	r2, sl
     4e4:	8153      	strh	r3, [r2, #10]
	Adc *const adc_module = module_inst->hw;
     4e6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     4e8:	8c13      	ldrh	r3, [r2, #32]
     4ea:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     4ec:	2b00      	cmp	r3, #0
     4ee:	d1fb      	bne.n	4e8 <adc_init+0x364>
	adc_module->WINLT.reg =
     4f0:	8bbb      	ldrh	r3, [r7, #28]
     4f2:	4652      	mov	r2, sl
     4f4:	81d3      	strh	r3, [r2, #14]
	Adc *const adc_module = module_inst->hw;
     4f6:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     4f8:	8c13      	ldrh	r3, [r2, #32]
     4fa:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     4fc:	2b00      	cmp	r3, #0
     4fe:	d1fb      	bne.n	4f8 <adc_init+0x374>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     500:	8c3b      	ldrh	r3, [r7, #32]
     502:	4652      	mov	r2, sl
     504:	8213      	strh	r3, [r2, #16]
	Adc *const adc_module = module_inst->hw;
     506:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     508:	8c13      	ldrh	r3, [r2, #32]
     50a:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     50c:	2b00      	cmp	r3, #0
     50e:	d1fb      	bne.n	508 <adc_init+0x384>
			config->positive_input;
     510:	793b      	ldrb	r3, [r7, #4]
			config->negative_input |
     512:	88fa      	ldrh	r2, [r7, #6]
     514:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     516:	4652      	mov	r2, sl
     518:	8113      	strh	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     51a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     51c:	8c13      	ldrh	r3, [r2, #32]
     51e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     520:	2b00      	cmp	r3, #0
     522:	d1fb      	bne.n	51c <adc_init+0x398>
	adc_module->EVCTRL.reg = config->event_action;
     524:	332a      	adds	r3, #42	; 0x2a
     526:	5cfb      	ldrb	r3, [r7, r3]
     528:	4652      	mov	r2, sl
     52a:	70d3      	strb	r3, [r2, #3]
	adc_module->INTENCLR.reg =
     52c:	2307      	movs	r3, #7
     52e:	7113      	strb	r3, [r2, #4]
	if (config->correction.correction_enable){
     530:	331d      	adds	r3, #29
     532:	5cfb      	ldrb	r3, [r7, r3]
     534:	2b00      	cmp	r3, #0
     536:	d01d      	beq.n	574 <adc_init+0x3f0>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     538:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     53a:	4a49      	ldr	r2, [pc, #292]	; (660 <adc_init+0x4dc>)
			return STATUS_ERR_INVALID_ARG;
     53c:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     53e:	4293      	cmp	r3, r2
     540:	d900      	bls.n	544 <adc_init+0x3c0>
     542:	e63a      	b.n	1ba <adc_init+0x36>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     544:	4652      	mov	r2, sl
     546:	8253      	strh	r3, [r2, #18]
	Adc *const adc_module = module_inst->hw;
     548:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     54a:	8c13      	ldrh	r3, [r2, #32]
     54c:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     54e:	2b00      	cmp	r3, #0
     550:	d1fb      	bne.n	54a <adc_init+0x3c6>
		if (config->correction.offset_correction > 2047 ||
     552:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
     554:	2380      	movs	r3, #128	; 0x80
     556:	011b      	lsls	r3, r3, #4
     558:	18d3      	adds	r3, r2, r3
     55a:	4941      	ldr	r1, [pc, #260]	; (660 <adc_init+0x4dc>)
     55c:	b29b      	uxth	r3, r3
			return STATUS_ERR_INVALID_ARG;
     55e:	2017      	movs	r0, #23
		if (config->correction.offset_correction > 2047 ||
     560:	428b      	cmp	r3, r1
     562:	d900      	bls.n	566 <adc_init+0x3e2>
     564:	e629      	b.n	1ba <adc_init+0x36>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     566:	4653      	mov	r3, sl
     568:	829a      	strh	r2, [r3, #20]
	Adc *const adc_module = module_inst->hw;
     56a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     56c:	8c13      	ldrh	r3, [r2, #32]
     56e:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     570:	2b00      	cmp	r3, #0
     572:	d1fb      	bne.n	56c <adc_init+0x3e8>
			ADC_CALIB_BIASREFBUF(
     574:	00a2      	lsls	r2, r4, #2
     576:	4b3b      	ldr	r3, [pc, #236]	; (664 <adc_init+0x4e0>)
     578:	58d3      	ldr	r3, [r2, r3]
     57a:	493b      	ldr	r1, [pc, #236]	; (668 <adc_init+0x4e4>)
     57c:	5d09      	ldrb	r1, [r1, r4]
     57e:	681b      	ldr	r3, [r3, #0]
     580:	40cb      	lsrs	r3, r1
     582:	021b      	lsls	r3, r3, #8
     584:	21e0      	movs	r1, #224	; 0xe0
     586:	00c9      	lsls	r1, r1, #3
     588:	400b      	ands	r3, r1
			ADC_CALIB_BIASCOMP(
     58a:	4938      	ldr	r1, [pc, #224]	; (66c <adc_init+0x4e8>)
     58c:	5852      	ldr	r2, [r2, r1]
     58e:	4938      	ldr	r1, [pc, #224]	; (670 <adc_init+0x4ec>)
     590:	5d09      	ldrb	r1, [r1, r4]
     592:	6812      	ldr	r2, [r2, #0]
     594:	40ca      	lsrs	r2, r1
     596:	2107      	movs	r1, #7
     598:	400a      	ands	r2, r1
			) |
     59a:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     59c:	4652      	mov	r2, sl
     59e:	8593      	strh	r3, [r2, #44]	; 0x2c
	return STATUS_OK;
     5a0:	2000      	movs	r0, #0
     5a2:	e60a      	b.n	1ba <adc_init+0x36>
		switch (resolution) {
     5a4:	2e00      	cmp	r6, #0
     5a6:	d199      	bne.n	4dc <adc_init+0x358>
			if (config->differential_mode &&
     5a8:	7afa      	ldrb	r2, [r7, #11]
     5aa:	2a00      	cmp	r2, #0
     5ac:	d00f      	beq.n	5ce <adc_init+0x44a>
					(config->window.window_lower_value > 2047 ||
     5ae:	69fa      	ldr	r2, [r7, #28]
     5b0:	2180      	movs	r1, #128	; 0x80
     5b2:	0109      	lsls	r1, r1, #4
     5b4:	468c      	mov	ip, r1
     5b6:	4462      	add	r2, ip
			if (config->differential_mode &&
     5b8:	4929      	ldr	r1, [pc, #164]	; (660 <adc_init+0x4dc>)
				return STATUS_ERR_INVALID_ARG;
     5ba:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5bc:	428a      	cmp	r2, r1
     5be:	d900      	bls.n	5c2 <adc_init+0x43e>
     5c0:	e5fb      	b.n	1ba <adc_init+0x36>
					config->window.window_lower_value < -2048 ||
     5c2:	6a3a      	ldr	r2, [r7, #32]
     5c4:	4462      	add	r2, ip
     5c6:	4926      	ldr	r1, [pc, #152]	; (660 <adc_init+0x4dc>)
     5c8:	428a      	cmp	r2, r1
     5ca:	d900      	bls.n	5ce <adc_init+0x44a>
     5cc:	e5f5      	b.n	1ba <adc_init+0x36>
			} else if (config->window.window_lower_value > 4095 ||
     5ce:	4a24      	ldr	r2, [pc, #144]	; (660 <adc_init+0x4dc>)
				return STATUS_ERR_INVALID_ARG;
     5d0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     5d2:	69f9      	ldr	r1, [r7, #28]
     5d4:	4291      	cmp	r1, r2
     5d6:	dd00      	ble.n	5da <adc_init+0x456>
     5d8:	e5ef      	b.n	1ba <adc_init+0x36>
     5da:	6a39      	ldr	r1, [r7, #32]
     5dc:	4291      	cmp	r1, r2
     5de:	dd00      	ble.n	5e2 <adc_init+0x45e>
     5e0:	e5eb      	b.n	1ba <adc_init+0x36>
     5e2:	e77b      	b.n	4dc <adc_init+0x358>
			if (config->differential_mode &&
     5e4:	7afa      	ldrb	r2, [r7, #11]
     5e6:	2a00      	cmp	r2, #0
     5e8:	d00f      	beq.n	60a <adc_init+0x486>
					(config->window.window_lower_value > 511 ||
     5ea:	69fa      	ldr	r2, [r7, #28]
     5ec:	2180      	movs	r1, #128	; 0x80
     5ee:	0089      	lsls	r1, r1, #2
     5f0:	468c      	mov	ip, r1
     5f2:	4462      	add	r2, ip
			if (config->differential_mode &&
     5f4:	491f      	ldr	r1, [pc, #124]	; (674 <adc_init+0x4f0>)
				return STATUS_ERR_INVALID_ARG;
     5f6:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5f8:	428a      	cmp	r2, r1
     5fa:	d900      	bls.n	5fe <adc_init+0x47a>
     5fc:	e5dd      	b.n	1ba <adc_init+0x36>
					config->window.window_lower_value < -512 ||
     5fe:	6a3a      	ldr	r2, [r7, #32]
     600:	4462      	add	r2, ip
     602:	491c      	ldr	r1, [pc, #112]	; (674 <adc_init+0x4f0>)
     604:	428a      	cmp	r2, r1
     606:	d900      	bls.n	60a <adc_init+0x486>
     608:	e5d7      	b.n	1ba <adc_init+0x36>
			} else if (config->window.window_lower_value > 1023 ||
     60a:	4a1a      	ldr	r2, [pc, #104]	; (674 <adc_init+0x4f0>)
				return STATUS_ERR_INVALID_ARG;
     60c:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     60e:	69f9      	ldr	r1, [r7, #28]
     610:	4291      	cmp	r1, r2
     612:	dd00      	ble.n	616 <adc_init+0x492>
     614:	e5d1      	b.n	1ba <adc_init+0x36>
     616:	6a39      	ldr	r1, [r7, #32]
     618:	4291      	cmp	r1, r2
     61a:	dd00      	ble.n	61e <adc_init+0x49a>
     61c:	e5cd      	b.n	1ba <adc_init+0x36>
     61e:	e75d      	b.n	4dc <adc_init+0x358>
			if (config->differential_mode &&
     620:	7afa      	ldrb	r2, [r7, #11]
     622:	2a00      	cmp	r2, #0
     624:	d00f      	beq.n	646 <adc_init+0x4c2>
					(config->window.window_lower_value > 32767 ||
     626:	69fa      	ldr	r2, [r7, #28]
     628:	2180      	movs	r1, #128	; 0x80
     62a:	0209      	lsls	r1, r1, #8
     62c:	468c      	mov	ip, r1
     62e:	4462      	add	r2, ip
			if (config->differential_mode &&
     630:	4911      	ldr	r1, [pc, #68]	; (678 <adc_init+0x4f4>)
				return STATUS_ERR_INVALID_ARG;
     632:	2017      	movs	r0, #23
			if (config->differential_mode &&
     634:	428a      	cmp	r2, r1
     636:	d900      	bls.n	63a <adc_init+0x4b6>
     638:	e5bf      	b.n	1ba <adc_init+0x36>
					config->window.window_lower_value < -32768 ||
     63a:	6a3a      	ldr	r2, [r7, #32]
     63c:	4462      	add	r2, ip
     63e:	490e      	ldr	r1, [pc, #56]	; (678 <adc_init+0x4f4>)
     640:	428a      	cmp	r2, r1
     642:	d900      	bls.n	646 <adc_init+0x4c2>
     644:	e5b9      	b.n	1ba <adc_init+0x36>
			} else if (config->window.window_lower_value > 65535 ||
     646:	4a0c      	ldr	r2, [pc, #48]	; (678 <adc_init+0x4f4>)
				return STATUS_ERR_INVALID_ARG;
     648:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     64a:	69f9      	ldr	r1, [r7, #28]
     64c:	4291      	cmp	r1, r2
     64e:	dd00      	ble.n	652 <adc_init+0x4ce>
     650:	e5b3      	b.n	1ba <adc_init+0x36>
     652:	6a39      	ldr	r1, [r7, #32]
     654:	4291      	cmp	r1, r2
     656:	dd00      	ble.n	65a <adc_init+0x4d6>
     658:	e5af      	b.n	1ba <adc_init+0x36>
     65a:	e73f      	b.n	4dc <adc_init+0x358>
		return STATUS_ERR_INVALID_ARG;
     65c:	2017      	movs	r0, #23
     65e:	e5ac      	b.n	1ba <adc_init+0x36>
     660:	00000fff 	.word	0x00000fff
     664:	000050b4 	.word	0x000050b4
     668:	000050bc 	.word	0x000050bc
     66c:	000050a8 	.word	0x000050a8
     670:	000050b0 	.word	0x000050b0
     674:	000003ff 	.word	0x000003ff
     678:	0000ffff 	.word	0x0000ffff

0000067c <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     67c:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     67e:	0080      	lsls	r0, r0, #2
     680:	4b2e      	ldr	r3, [pc, #184]	; (73c <_adc_interrupt_handler+0xc0>)
     682:	58c4      	ldr	r4, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     684:	6823      	ldr	r3, [r4, #0]
     686:	799d      	ldrb	r5, [r3, #6]
     688:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
     68a:	07ea      	lsls	r2, r5, #31
     68c:	d52d      	bpl.n	6ea <_adc_interrupt_handler+0x6e>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     68e:	7ee2      	ldrb	r2, [r4, #27]
     690:	07d2      	lsls	r2, r2, #31
     692:	d52a      	bpl.n	6ea <_adc_interrupt_handler+0x6e>
     694:	7ea2      	ldrb	r2, [r4, #26]
     696:	07d2      	lsls	r2, r2, #31
     698:	d527      	bpl.n	6ea <_adc_interrupt_handler+0x6e>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     69a:	2201      	movs	r2, #1
     69c:	719a      	strb	r2, [r3, #6]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     69e:	6962      	ldr	r2, [r4, #20]
     6a0:	1c93      	adds	r3, r2, #2
     6a2:	6163      	str	r3, [r4, #20]
     6a4:	6823      	ldr	r3, [r4, #0]
     6a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     6a8:	b29b      	uxth	r3, r3
     6aa:	8013      	strh	r3, [r2, #0]

			if (--module->remaining_conversions > 0) {
     6ac:	8b23      	ldrh	r3, [r4, #24]
     6ae:	3b01      	subs	r3, #1
     6b0:	b29b      	uxth	r3, r3
     6b2:	8323      	strh	r3, [r4, #24]
     6b4:	2b00      	cmp	r3, #0
     6b6:	d015      	beq.n	6e4 <_adc_interrupt_handler+0x68>
				if (module->software_trigger == true
     6b8:	7f63      	ldrb	r3, [r4, #29]
     6ba:	2b00      	cmp	r3, #0
     6bc:	d015      	beq.n	6ea <_adc_interrupt_handler+0x6e>
					&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     6be:	6822      	ldr	r2, [r4, #0]
     6c0:	79d3      	ldrb	r3, [r2, #7]
     6c2:	b25b      	sxtb	r3, r3
     6c4:	2b00      	cmp	r3, #0
     6c6:	db10      	blt.n	6ea <_adc_interrupt_handler+0x6e>
     6c8:	8c13      	ldrh	r3, [r2, #32]
     6ca:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     6cc:	2b00      	cmp	r3, #0
     6ce:	d1fb      	bne.n	6c8 <_adc_interrupt_handler+0x4c>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     6d0:	7e13      	ldrb	r3, [r2, #24]
     6d2:	2102      	movs	r1, #2
     6d4:	430b      	orrs	r3, r1
     6d6:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     6d8:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
     6da:	8c13      	ldrh	r3, [r2, #32]
     6dc:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     6de:	2b00      	cmp	r3, #0
     6e0:	d1fb      	bne.n	6da <_adc_interrupt_handler+0x5e>
     6e2:	e002      	b.n	6ea <_adc_interrupt_handler+0x6e>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     6e4:	7f23      	ldrb	r3, [r4, #28]
     6e6:	2b05      	cmp	r3, #5
     6e8:	d016      	beq.n	718 <_adc_interrupt_handler+0x9c>
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     6ea:	076b      	lsls	r3, r5, #29
     6ec:	d508      	bpl.n	700 <_adc_interrupt_handler+0x84>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     6ee:	2304      	movs	r3, #4
     6f0:	6822      	ldr	r2, [r4, #0]
     6f2:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     6f4:	7ee3      	ldrb	r3, [r4, #27]
     6f6:	079b      	lsls	r3, r3, #30
     6f8:	d502      	bpl.n	700 <_adc_interrupt_handler+0x84>
     6fa:	7ea3      	ldrb	r3, [r4, #26]
     6fc:	079b      	lsls	r3, r3, #30
     6fe:	d414      	bmi.n	72a <_adc_interrupt_handler+0xae>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     700:	07ab      	lsls	r3, r5, #30
     702:	d508      	bpl.n	716 <_adc_interrupt_handler+0x9a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     704:	2302      	movs	r3, #2
     706:	6822      	ldr	r2, [r4, #0]
     708:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     70a:	7ee3      	ldrb	r3, [r4, #27]
     70c:	075b      	lsls	r3, r3, #29
     70e:	d502      	bpl.n	716 <_adc_interrupt_handler+0x9a>
     710:	7ea3      	ldrb	r3, [r4, #26]
     712:	075b      	lsls	r3, r3, #29
     714:	d40d      	bmi.n	732 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
		}
	}
}
     716:	bd70      	pop	{r4, r5, r6, pc}
					module->job_status = STATUS_OK;
     718:	2300      	movs	r3, #0
     71a:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     71c:	3301      	adds	r3, #1
     71e:	6822      	ldr	r2, [r4, #0]
     720:	7113      	strb	r3, [r2, #4]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     722:	0020      	movs	r0, r4
     724:	68a3      	ldr	r3, [r4, #8]
     726:	4798      	blx	r3
     728:	e7df      	b.n	6ea <_adc_interrupt_handler+0x6e>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     72a:	0020      	movs	r0, r4
     72c:	68e3      	ldr	r3, [r4, #12]
     72e:	4798      	blx	r3
     730:	e7e6      	b.n	700 <_adc_interrupt_handler+0x84>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     732:	6923      	ldr	r3, [r4, #16]
     734:	0020      	movs	r0, r4
     736:	4798      	blx	r3
}
     738:	e7ed      	b.n	716 <_adc_interrupt_handler+0x9a>
     73a:	46c0      	nop			; (mov r8, r8)
     73c:	20000468 	.word	0x20000468

00000740 <ADC0_Handler>:
		void ADC##n##_Handler(void) \
		{ \
			_adc_interrupt_handler(n); \
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
     740:	b510      	push	{r4, lr}
     742:	2000      	movs	r0, #0
     744:	4b01      	ldr	r3, [pc, #4]	; (74c <ADC0_Handler+0xc>)
     746:	4798      	blx	r3
     748:	bd10      	pop	{r4, pc}
     74a:	46c0      	nop			; (mov r8, r8)
     74c:	0000067d 	.word	0x0000067d

00000750 <ADC1_Handler>:
     750:	b510      	push	{r4, lr}
     752:	2001      	movs	r0, #1
     754:	4b01      	ldr	r3, [pc, #4]	; (75c <ADC1_Handler+0xc>)
     756:	4798      	blx	r3
     758:	bd10      	pop	{r4, pc}
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	0000067d 	.word	0x0000067d

00000760 <dac_is_syncing>:
		struct dac_module *const dev_inst)
{
	/* Sanity check arguments */
	Assert(dev_inst);

	Dac *const dac_module = dev_inst->hw;
     760:	6803      	ldr	r3, [r0, #0]

#if (SAMC21)
	if (dac_module->SYNCBUSY.reg) {
     762:	6918      	ldr	r0, [r3, #16]
     764:	1e43      	subs	r3, r0, #1
     766:	4198      	sbcs	r0, r3
     768:	b2c0      	uxtb	r0, r0
#endif
		return true;
	}

	return false;
}
     76a:	4770      	bx	lr

0000076c <dac_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->reference      = DAC_REFERENCE_INT1V;
     76c:	2300      	movs	r3, #0
     76e:	7003      	strb	r3, [r0, #0]
	config->output         = DAC_OUTPUT_EXTERNAL;
     770:	2201      	movs	r2, #1
     772:	7042      	strb	r2, [r0, #1]
	config->left_adjust    = false;
     774:	7083      	strb	r3, [r0, #2]
#ifdef FEATURE_DAC_DATABUF_WRITE_PROTECTION
	config->databuf_protection_bypass = false;
#endif
	config->voltage_pump_disable = false;
     776:	7103      	strb	r3, [r0, #4]
	config->clock_source   = GCLK_GENERATOR_0;
     778:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
     77a:	7143      	strb	r3, [r0, #5]
#if (SAMC21)
	config->dither_mode    = false;
     77c:	7183      	strb	r3, [r0, #6]
#endif
}
     77e:	4770      	bx	lr

00000780 <dac_init>:
 */
enum status_code dac_init(
		struct dac_module *const module_inst,
		Dac *const module,
		struct dac_config *const config)
{
     780:	b5f0      	push	{r4, r5, r6, r7, lr}
     782:	46c6      	mov	lr, r8
     784:	b500      	push	{lr}
     786:	b082      	sub	sp, #8
     788:	0005      	movs	r5, r0
     78a:	0014      	movs	r4, r2
	Assert(module_inst);
	Assert(module);
	Assert(config);

	/* Initialize device instance */
	module_inst->hw = module;
     78c:	6001      	str	r1, [r0, #0]
     78e:	4a25      	ldr	r2, [pc, #148]	; (824 <dac_init+0xa4>)
     790:	69d0      	ldr	r0, [r2, #28]
     792:	2380      	movs	r3, #128	; 0x80
     794:	039b      	lsls	r3, r3, #14
     796:	4303      	orrs	r3, r0
     798:	61d3      	str	r3, [r2, #28]
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_DAC);
#endif

	/* Check if module is enabled. */
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
     79a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     79c:	201c      	movs	r0, #28
	if (module->CTRLA.reg & DAC_CTRLA_ENABLE) {
     79e:	079b      	lsls	r3, r3, #30
     7a0:	d503      	bpl.n	7aa <dac_init+0x2a>

	_dac_instances[0] = module_inst;
#endif

	return STATUS_OK;
}
     7a2:	b002      	add	sp, #8
     7a4:	bc04      	pop	{r2}
     7a6:	4690      	mov	r8, r2
     7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
     7aa:	780b      	ldrb	r3, [r1, #0]
		return STATUS_BUSY;
     7ac:	3817      	subs	r0, #23
	if (module->CTRLA.reg & DAC_CTRLA_SWRST) {
     7ae:	07db      	lsls	r3, r3, #31
     7b0:	d4f7      	bmi.n	7a2 <dac_init+0x22>
	gclk_chan_conf.source_generator = config->clock_source;
     7b2:	a901      	add	r1, sp, #4
     7b4:	78e3      	ldrb	r3, [r4, #3]
     7b6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(DAC_GCLK_ID, &gclk_chan_conf);
     7b8:	301f      	adds	r0, #31
     7ba:	4b1b      	ldr	r3, [pc, #108]	; (828 <dac_init+0xa8>)
     7bc:	4798      	blx	r3
	system_gclk_chan_enable(DAC_GCLK_ID);
     7be:	2024      	movs	r0, #36	; 0x24
     7c0:	4b1a      	ldr	r3, [pc, #104]	; (82c <dac_init+0xac>)
     7c2:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7c4:	2600      	movs	r6, #0
     7c6:	466b      	mov	r3, sp
     7c8:	705e      	strb	r6, [r3, #1]
	config->powersave    = false;
     7ca:	70de      	strb	r6, [r3, #3]
	pin_conf.mux_position = MUX_PA02B_DAC_VOUT;
     7cc:	2301      	movs	r3, #1
     7ce:	466a      	mov	r2, sp
     7d0:	7013      	strb	r3, [r2, #0]
	pin_conf.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     7d2:	7096      	strb	r6, [r2, #2]
	system_pinmux_pin_set_config(PIN_PA02B_DAC_VOUT, &pin_conf);
     7d4:	4669      	mov	r1, sp
     7d6:	2002      	movs	r0, #2
     7d8:	4b15      	ldr	r3, [pc, #84]	; (830 <dac_init+0xb0>)
     7da:	4798      	blx	r3
	Dac *const dac_module = module_inst->hw;
     7dc:	682f      	ldr	r7, [r5, #0]
	module_inst->output = config->output;
     7de:	7863      	ldrb	r3, [r4, #1]
     7e0:	712b      	strb	r3, [r5, #4]
	module_inst->start_on_event = false;
     7e2:	71ae      	strb	r6, [r5, #6]
	if (config->run_in_standby) {
     7e4:	7963      	ldrb	r3, [r4, #5]
		new_ctrla |= DAC_CTRLA_RUNSTDBY;
     7e6:	1e5a      	subs	r2, r3, #1
     7e8:	4193      	sbcs	r3, r2
     7ea:	019b      	lsls	r3, r3, #6
	new_ctrlb |= config->reference;
     7ec:	7822      	ldrb	r2, [r4, #0]
     7ee:	4690      	mov	r8, r2
	if (config->left_adjust) {
     7f0:	78a2      	ldrb	r2, [r4, #2]
     7f2:	2a00      	cmp	r2, #0
     7f4:	d003      	beq.n	7fe <dac_init+0x7e>
     7f6:	2204      	movs	r2, #4
     7f8:	4641      	mov	r1, r8
     7fa:	4311      	orrs	r1, r2
     7fc:	4688      	mov	r8, r1
	if (config->voltage_pump_disable) {
     7fe:	7922      	ldrb	r2, [r4, #4]
     800:	2a00      	cmp	r2, #0
     802:	d003      	beq.n	80c <dac_init+0x8c>
     804:	2208      	movs	r2, #8
     806:	4641      	mov	r1, r8
     808:	4311      	orrs	r1, r2
     80a:	4688      	mov	r8, r1
	dac_module->CTRLA.reg = new_ctrla;
     80c:	b2db      	uxtb	r3, r3
     80e:	703b      	strb	r3, [r7, #0]
	while (dac_is_syncing(module_inst)) {
     810:	4e08      	ldr	r6, [pc, #32]	; (834 <dac_init+0xb4>)
     812:	0028      	movs	r0, r5
     814:	47b0      	blx	r6
     816:	2800      	cmp	r0, #0
     818:	d1fb      	bne.n	812 <dac_init+0x92>
	dac_module->CTRLB.reg = new_ctrlb;
     81a:	4643      	mov	r3, r8
     81c:	707b      	strb	r3, [r7, #1]
	module_inst->reference = config->reference;
     81e:	7823      	ldrb	r3, [r4, #0]
     820:	716b      	strb	r3, [r5, #5]
	return STATUS_OK;
     822:	e7be      	b.n	7a2 <dac_init+0x22>
     824:	40000800 	.word	0x40000800
     828:	0000261d 	.word	0x0000261d
     82c:	000025ad 	.word	0x000025ad
     830:	00002719 	.word	0x00002719
     834:	00000761 	.word	0x00000761

00000838 <dac_enable>:
 * \param[in] module_inst  Pointer to the DAC software instance struct
 *
 */
void dac_enable(
		struct dac_module *const module_inst)
{
     838:	b570      	push	{r4, r5, r6, lr}
     83a:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Dac *const dac_module = module_inst->hw;
     83c:	6805      	ldr	r5, [r0, #0]

	/* Enable selected output */
	dac_module->CTRLB.reg |= module_inst->output;
     83e:	786b      	ldrb	r3, [r5, #1]
     840:	7902      	ldrb	r2, [r0, #4]
     842:	4313      	orrs	r3, r2
     844:	706b      	strb	r3, [r5, #1]

	while (dac_is_syncing(module_inst)) {
     846:	4e0c      	ldr	r6, [pc, #48]	; (878 <dac_enable+0x40>)
     848:	0020      	movs	r0, r4
     84a:	47b0      	blx	r6
     84c:	2800      	cmp	r0, #0
     84e:	d1fb      	bne.n	848 <dac_enable+0x10>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	dac_module->CTRLA.reg |= DAC_CTRLA_ENABLE;
     850:	782b      	ldrb	r3, [r5, #0]
     852:	2202      	movs	r2, #2
     854:	4313      	orrs	r3, r2
     856:	702b      	strb	r3, [r5, #0]

	/* Enable internal bandgap reference if selected in the configuration */
	if (module_inst->reference == DAC_REFERENCE_INT1V) {
     858:	7963      	ldrb	r3, [r4, #5]
     85a:	2b00      	cmp	r3, #0
     85c:	d104      	bne.n	868 <dac_enable+0x30>
     85e:	4a07      	ldr	r2, [pc, #28]	; (87c <dac_enable+0x44>)
     860:	69d3      	ldr	r3, [r2, #28]
     862:	2104      	movs	r1, #4
     864:	430b      	orrs	r3, r1
     866:	61d3      	str	r3, [r2, #28]
#if (SAMC21)
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
	}

	if(dac_module->CTRLA.reg & DAC_CTRLA_ENABLE) {
     868:	782b      	ldrb	r3, [r5, #0]
     86a:	079b      	lsls	r3, r3, #30
     86c:	d503      	bpl.n	876 <dac_enable+0x3e>
		while(! (dac_module->STATUS.reg & DAC_STATUS_READY)) {
     86e:	2201      	movs	r2, #1
     870:	79eb      	ldrb	r3, [r5, #7]
     872:	4213      	tst	r3, r2
     874:	d0fc      	beq.n	870 <dac_enable+0x38>
#else
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#endif
}
     876:	bd70      	pop	{r4, r5, r6, pc}
     878:	00000761 	.word	0x00000761
     87c:	40001800 	.word	0x40001800

00000880 <dac_chan_get_config_defaults>:
void dac_chan_get_config_defaults(
		struct dac_chan_config *const config)
{
	/* Sanity check arguments */
	Assert(config);
}
     880:	4770      	bx	lr

00000882 <dac_chan_set_config>:
		const enum dac_channel channel,
		struct dac_chan_config *const config)
{
	/* No channel support yet */
	UNUSED(channel);
}
     882:	4770      	bx	lr

00000884 <dac_chan_enable>:
		struct dac_module *const module_inst,
		enum dac_channel channel)
{
	/* No channel support yet */
	UNUSED(channel);
}
     884:	4770      	bx	lr
	...

00000888 <dac_chan_write>:
 */
enum status_code dac_chan_write(
		struct dac_module *const module_inst,
		enum dac_channel channel,
		const uint16_t data)
{
     888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     88a:	0004      	movs	r4, r0
     88c:	0017      	movs	r7, r2
	Assert(module_inst->hw);

	/* No channel support yet */
	UNUSED(channel);

	Dac *const dac_module = module_inst->hw;
     88e:	6806      	ldr	r6, [r0, #0]

	/* Wait until the synchronization is complete */
	while (dac_is_syncing(module_inst)) {
     890:	4d06      	ldr	r5, [pc, #24]	; (8ac <dac_chan_write+0x24>)
     892:	0020      	movs	r0, r4
     894:	47a8      	blx	r5
     896:	2800      	cmp	r0, #0
     898:	d1fb      	bne.n	892 <dac_chan_write+0xa>
	};

	if (module_inst->start_on_event) {
     89a:	79a3      	ldrb	r3, [r4, #6]
     89c:	2b00      	cmp	r3, #0
     89e:	d102      	bne.n	8a6 <dac_chan_write+0x1e>
		/* Write the new value to the buffered DAC data register */
		dac_module->DATABUF.reg = data;
	} else {
		/* Write the new value to the DAC data register */
		dac_module->DATA.reg = data;
     8a0:	8137      	strh	r7, [r6, #8]
	}

	return STATUS_OK;
}
     8a2:	2000      	movs	r0, #0
     8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dac_module->DATABUF.reg = data;
     8a6:	81b7      	strh	r7, [r6, #12]
     8a8:	e7fb      	b.n	8a2 <dac_chan_write+0x1a>
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	00000761 	.word	0x00000761

000008b0 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8b0:	6802      	ldr	r2, [r0, #0]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8b2:	2104      	movs	r1, #4
     8b4:	4b07      	ldr	r3, [pc, #28]	; (8d4 <rtc_calendar_enable+0x24>)
     8b6:	6019      	str	r1, [r3, #0]
	Rtc *const rtc_module = module->hw;
     8b8:	6801      	ldr	r1, [r0, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     8ba:	690b      	ldr	r3, [r1, #16]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     8bc:	2b00      	cmp	r3, #0
     8be:	d1fc      	bne.n	8ba <rtc_calendar_enable+0xa>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;
     8c0:	8813      	ldrh	r3, [r2, #0]
     8c2:	2102      	movs	r1, #2
     8c4:	430b      	orrs	r3, r1
     8c6:	8013      	strh	r3, [r2, #0]
	Rtc *const rtc_module = module->hw;
     8c8:	6802      	ldr	r2, [r0, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     8ca:	6913      	ldr	r3, [r2, #16]

	while (rtc_calendar_is_syncing(module)) {
     8cc:	2b00      	cmp	r3, #0
     8ce:	d1fc      	bne.n	8ca <rtc_calendar_enable+0x1a>
		/* Wait for synchronization */
	}
}
     8d0:	4770      	bx	lr
     8d2:	46c0      	nop			; (mov r8, r8)
     8d4:	e000e100 	.word	0xe000e100

000008d8 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
     8d8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     8da:	6803      	ldr	r3, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     8dc:	2404      	movs	r4, #4
     8de:	2280      	movs	r2, #128	; 0x80
     8e0:	4908      	ldr	r1, [pc, #32]	; (904 <rtc_calendar_disable+0x2c>)
     8e2:	508c      	str	r4, [r1, r2]
	Rtc *const rtc_module = module->hw;
     8e4:	6801      	ldr	r1, [r0, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     8e6:	690a      	ldr	r2, [r1, #16]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     8e8:	2a00      	cmp	r2, #0
     8ea:	d1fc      	bne.n	8e6 <rtc_calendar_disable+0xe>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
     8ec:	4a06      	ldr	r2, [pc, #24]	; (908 <rtc_calendar_disable+0x30>)
     8ee:	811a      	strh	r2, [r3, #8]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
     8f0:	819a      	strh	r2, [r3, #12]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;
     8f2:	881a      	ldrh	r2, [r3, #0]
     8f4:	2102      	movs	r1, #2
     8f6:	438a      	bics	r2, r1
     8f8:	801a      	strh	r2, [r3, #0]
	Rtc *const rtc_module = module->hw;
     8fa:	6802      	ldr	r2, [r0, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     8fc:	6913      	ldr	r3, [r2, #16]

	while (rtc_calendar_is_syncing(module)) {
     8fe:	2b00      	cmp	r3, #0
     900:	d1fc      	bne.n	8fc <rtc_calendar_disable+0x24>
		/* Wait for synchronization */
	}
}
     902:	bd10      	pop	{r4, pc}
     904:	e000e100 	.word	0xe000e100
     908:	ffff81ff 	.word	0xffff81ff

0000090c <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     90c:	b570      	push	{r4, r5, r6, lr}
     90e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     910:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
     912:	4b09      	ldr	r3, [pc, #36]	; (938 <rtc_calendar_reset+0x2c>)
     914:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
     916:	2300      	movs	r3, #0
     918:	8623      	strh	r3, [r4, #48]	; 0x30
	module->enabled_callback    = 0;
     91a:	8663      	strh	r3, [r4, #50]	; 0x32
	Rtc *const rtc_module = module->hw;
     91c:	6822      	ldr	r2, [r4, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     91e:	6913      	ldr	r3, [r2, #16]
#endif

	while (rtc_calendar_is_syncing(module)) {
     920:	2b00      	cmp	r3, #0
     922:	d1fc      	bne.n	91e <rtc_calendar_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;
     924:	882b      	ldrh	r3, [r5, #0]
     926:	2201      	movs	r2, #1
     928:	4313      	orrs	r3, r2
     92a:	802b      	strh	r3, [r5, #0]
	Rtc *const rtc_module = module->hw;
     92c:	6822      	ldr	r2, [r4, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     92e:	6913      	ldr	r3, [r2, #16]

	while (rtc_calendar_is_syncing(module)) {
     930:	2b00      	cmp	r3, #0
     932:	d1fc      	bne.n	92e <rtc_calendar_reset+0x22>
		/* Wait for synchronization */
	}
}
     934:	bd70      	pop	{r4, r5, r6, pc}
     936:	46c0      	nop			; (mov r8, r8)
     938:	000008d9 	.word	0x000008d9

0000093c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     93c:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     93e:	88cb      	ldrh	r3, [r1, #6]
     940:	88c2      	ldrh	r2, [r0, #6]
     942:	1a9a      	subs	r2, r3, r2
     944:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     946:	794b      	ldrb	r3, [r1, #5]
     948:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     94a:	790c      	ldrb	r4, [r1, #4]
     94c:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     94e:	4323      	orrs	r3, r4
     950:	788c      	ldrb	r4, [r1, #2]
     952:	0324      	lsls	r4, r4, #12
     954:	4323      	orrs	r3, r4
     956:	4313      	orrs	r3, r2

	/* Check if 24h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     958:	7902      	ldrb	r2, [r0, #4]
     95a:	2a00      	cmp	r2, #0
     95c:	d105      	bne.n	96a <rtc_calendar_time_to_register_value+0x2e>
     95e:	78ca      	ldrb	r2, [r1, #3]
     960:	2a00      	cmp	r2, #0
     962:	d002      	beq.n	96a <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= (0x10u << RTC_MODE2_CLOCK_HOUR_Pos);
     964:	2280      	movs	r2, #128	; 0x80
     966:	0252      	lsls	r2, r2, #9
     968:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     96a:	7848      	ldrb	r0, [r1, #1]
     96c:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     96e:	780a      	ldrb	r2, [r1, #0]
     970:	4310      	orrs	r0, r2
     972:	4318      	orrs	r0, r3

	return register_value;
}
     974:	bd10      	pop	{r4, pc}

00000976 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
     976:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     978:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
     97a:	88c4      	ldrh	r4, [r0, #6]
     97c:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     97e:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
     980:	018b      	lsls	r3, r1, #6
     982:	0f1b      	lsrs	r3, r3, #28
     984:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
     986:	028b      	lsls	r3, r1, #10
     988:	0edb      	lsrs	r3, r3, #27
     98a:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
     98c:	7903      	ldrb	r3, [r0, #4]
     98e:	2b00      	cmp	r3, #0
     990:	d10c      	bne.n	9ac <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~(0x10u << RTC_MODE2_CLOCK_HOUR_Pos))) >>
     992:	040b      	lsls	r3, r1, #16
     994:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
     996:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & (0x10u << RTC_MODE2_CLOCK_HOUR_Pos)) != 0);
     998:	03cb      	lsls	r3, r1, #15
     99a:	0fdb      	lsrs	r3, r3, #31
     99c:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
     99e:	0988      	lsrs	r0, r1, #6
     9a0:	233f      	movs	r3, #63	; 0x3f
     9a2:	4018      	ands	r0, r3
     9a4:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
     9a6:	4019      	ands	r1, r3
     9a8:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
     9aa:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
     9ac:	03cb      	lsls	r3, r1, #15
     9ae:	0edb      	lsrs	r3, r3, #27
     9b0:	7093      	strb	r3, [r2, #2]
     9b2:	e7f4      	b.n	99e <rtc_calendar_register_value_to_time+0x28>

000009b4 <rtc_calendar_set_time>:
 * \param[in] time  The time to set in the calendar
 */
void rtc_calendar_set_time(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     9b4:	b570      	push	{r4, r5, r6, lr}
     9b6:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9b8:	6805      	ldr	r5, [r0, #0]

	uint32_t register_value = rtc_calendar_time_to_register_value(module, time);
     9ba:	4b05      	ldr	r3, [pc, #20]	; (9d0 <rtc_calendar_set_time+0x1c>)
     9bc:	4798      	blx	r3
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     9be:	692b      	ldr	r3, [r5, #16]

	while (rtc_calendar_is_syncing(module)) {
     9c0:	2b00      	cmp	r3, #0
     9c2:	d1fc      	bne.n	9be <rtc_calendar_set_time+0xa>
		/* Wait for synchronization */
	}

	/* Write value to register. */
	rtc_module->MODE2.CLOCK.reg = register_value;
     9c4:	61a8      	str	r0, [r5, #24]
	Rtc *const rtc_module = module->hw;
     9c6:	6822      	ldr	r2, [r4, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     9c8:	6913      	ldr	r3, [r2, #16]

	while (rtc_calendar_is_syncing(module)) {
     9ca:	2b00      	cmp	r3, #0
     9cc:	d1fc      	bne.n	9c8 <rtc_calendar_set_time+0x14>
		/* Wait for synchronization */
	}
}
     9ce:	bd70      	pop	{r4, r5, r6, pc}
     9d0:	0000093d 	.word	0x0000093d

000009d4 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
     9d4:	b510      	push	{r4, lr}
     9d6:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     9d8:	6804      	ldr	r4, [r0, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     9da:	6923      	ldr	r3, [r4, #16]

	while (rtc_calendar_is_syncing(module)) {
     9dc:	2b00      	cmp	r3, #0
     9de:	d1fc      	bne.n	9da <rtc_calendar_get_time+0x6>
		/* Wait for synchronization */
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
     9e0:	69a1      	ldr	r1, [r4, #24]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
     9e2:	4b01      	ldr	r3, [pc, #4]	; (9e8 <rtc_calendar_get_time+0x14>)
     9e4:	4798      	blx	r3
}
     9e6:	bd10      	pop	{r4, pc}
     9e8:	00000977 	.word	0x00000977

000009ec <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
     9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9ee:	0005      	movs	r5, r0
     9f0:	000e      	movs	r6, r1
     9f2:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
     9f4:	2017      	movs	r0, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
     9f6:	2a01      	cmp	r2, #1
     9f8:	d900      	bls.n	9fc <rtc_calendar_set_alarm+0x10>
	while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
	}

	return STATUS_OK;
}
     9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Rtc *const rtc_module = module->hw;
     9fc:	682f      	ldr	r7, [r5, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
     9fe:	0028      	movs	r0, r5
     a00:	4b0a      	ldr	r3, [pc, #40]	; (a2c <rtc_calendar_set_alarm+0x40>)
     a02:	4798      	blx	r3
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     a04:	693b      	ldr	r3, [r7, #16]
	while (rtc_calendar_is_syncing(module)) {
     a06:	2b00      	cmp	r3, #0
     a08:	d1fc      	bne.n	a04 <rtc_calendar_set_alarm+0x18>
     a0a:	00e4      	lsls	r4, r4, #3
     a0c:	193c      	adds	r4, r7, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
     a0e:	6220      	str	r0, [r4, #32]
	Rtc *const rtc_module = module->hw;
     a10:	682a      	ldr	r2, [r5, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     a12:	6913      	ldr	r3, [r2, #16]
	while (rtc_calendar_is_syncing(module)) {
     a14:	2b00      	cmp	r3, #0
     a16:	d1fc      	bne.n	a12 <rtc_calendar_set_alarm+0x26>
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
     a18:	7a32      	ldrb	r2, [r6, #8]
     a1a:	3324      	adds	r3, #36	; 0x24
     a1c:	54e2      	strb	r2, [r4, r3]
	Rtc *const rtc_module = module->hw;
     a1e:	682a      	ldr	r2, [r5, #0]
	if (rtc_module->MODE2.SYNCBUSY.reg) {
     a20:	6913      	ldr	r3, [r2, #16]
	while (rtc_calendar_is_syncing(module)) {
     a22:	2b00      	cmp	r3, #0
     a24:	d1fc      	bne.n	a20 <rtc_calendar_set_alarm+0x34>
	return STATUS_OK;
     a26:	2000      	movs	r0, #0
     a28:	e7e7      	b.n	9fa <rtc_calendar_set_alarm+0xe>
     a2a:	46c0      	nop			; (mov r8, r8)
     a2c:	0000093d 	.word	0x0000093d

00000a30 <rtc_calendar_init>:
{
     a30:	b570      	push	{r4, r5, r6, lr}
     a32:	0005      	movs	r5, r0
     a34:	0014      	movs	r4, r2
	module->hw = hw;
     a36:	6001      	str	r1, [r0, #0]
			MCLK->APBAMASK.reg |= mask;
     a38:	4a16      	ldr	r2, [pc, #88]	; (a94 <rtc_calendar_init+0x64>)
     a3a:	6951      	ldr	r1, [r2, #20]
     a3c:	2380      	movs	r3, #128	; 0x80
     a3e:	009b      	lsls	r3, r3, #2
     a40:	430b      	orrs	r3, r1
     a42:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
     a44:	2200      	movs	r2, #0
     a46:	4b14      	ldr	r3, [pc, #80]	; (a98 <rtc_calendar_init+0x68>)
     a48:	611a      	str	r2, [r3, #16]
	rtc_calendar_reset(module);
     a4a:	4b14      	ldr	r3, [pc, #80]	; (a9c <rtc_calendar_init+0x6c>)
     a4c:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
     a4e:	78e3      	ldrb	r3, [r4, #3]
     a50:	712b      	strb	r3, [r5, #4]
	module->year_init_value     = config->year_init_value;
     a52:	88a3      	ldrh	r3, [r4, #4]
     a54:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
     a56:	4b12      	ldr	r3, [pc, #72]	; (aa0 <rtc_calendar_init+0x70>)
     a58:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
     a5a:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRLA_MODE(2) | config->prescaler;
     a5c:	8823      	ldrh	r3, [r4, #0]
	if(config->enable_read_sync) {
     a5e:	79a1      	ldrb	r1, [r4, #6]
     a60:	2900      	cmp	r1, #0
     a62:	d113      	bne.n	a8c <rtc_calendar_init+0x5c>
	tmp_reg = RTC_MODE2_CTRLA_MODE(2) | config->prescaler;
     a64:	3108      	adds	r1, #8
     a66:	430b      	orrs	r3, r1
	if (!(config->clock_24h)) {
     a68:	78e1      	ldrb	r1, [r4, #3]
     a6a:	2900      	cmp	r1, #0
     a6c:	d101      	bne.n	a72 <rtc_calendar_init+0x42>
		tmp_reg |= RTC_MODE2_CTRLA_CLKREP;
     a6e:	3140      	adds	r1, #64	; 0x40
     a70:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
     a72:	78a1      	ldrb	r1, [r4, #2]
     a74:	2900      	cmp	r1, #0
     a76:	d001      	beq.n	a7c <rtc_calendar_init+0x4c>
		tmp_reg |= RTC_MODE2_CTRLA_MATCHCLR;
     a78:	2180      	movs	r1, #128	; 0x80
     a7a:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRLA.reg = tmp_reg;
     a7c:	8013      	strh	r3, [r2, #0]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
     a7e:	0021      	movs	r1, r4
     a80:	3108      	adds	r1, #8
     a82:	2200      	movs	r2, #0
     a84:	0028      	movs	r0, r5
     a86:	4b07      	ldr	r3, [pc, #28]	; (aa4 <rtc_calendar_init+0x74>)
     a88:	4798      	blx	r3
}
     a8a:	bd70      	pop	{r4, r5, r6, pc}
		tmp_reg |= RTC_MODE2_CTRLA_CLOCKSYNC;
     a8c:	4906      	ldr	r1, [pc, #24]	; (aa8 <rtc_calendar_init+0x78>)
     a8e:	430b      	orrs	r3, r1
     a90:	e7ea      	b.n	a68 <rtc_calendar_init+0x38>
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	40000800 	.word	0x40000800
     a98:	40001400 	.word	0x40001400
     a9c:	0000090d 	.word	0x0000090d
     aa0:	20000470 	.word	0x20000470
     aa4:	000009ed 	.word	0x000009ed
     aa8:	00008008 	.word	0x00008008

00000aac <rtc_calendar_register_callback>:
		|| callback_type == RTC_CALENDAR_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_0
			&& callback_type <= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else if (callback_type > (RTC_NUM_OF_ALARMS + RTC_PER_NUM)) {
     aac:	2a09      	cmp	r2, #9
     aae:	d901      	bls.n	ab4 <rtc_calendar_register_callback+0x8>
		/* Make sure alarm callback can be registered */
		status = STATUS_ERR_INVALID_ARG;
     ab0:	2017      	movs	r0, #23
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
	}

	return status;
}
     ab2:	4770      	bx	lr
		module->callbacks[callback_type] = callback;
     ab4:	1c93      	adds	r3, r2, #2
     ab6:	009b      	lsls	r3, r3, #2
     ab8:	5019      	str	r1, [r3, r0]
		module->registered_callback |= (1 << callback_type);
     aba:	8e03      	ldrh	r3, [r0, #48]	; 0x30
     abc:	2101      	movs	r1, #1
     abe:	4091      	lsls	r1, r2
     ac0:	430b      	orrs	r3, r1
     ac2:	b29b      	uxth	r3, r3
     ac4:	8603      	strh	r3, [r0, #48]	; 0x30
     ac6:	2000      	movs	r0, #0
	return status;
     ac8:	e7f3      	b.n	ab2 <rtc_calendar_register_callback+0x6>
	...

00000acc <rtc_calendar_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_calendar_enable_callback(
		struct rtc_module *const module,
		enum rtc_calendar_callback callback_type)
{
     acc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     ace:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_CALENDAR_CALLBACK_OVERFLOW) {
     ad0:	2909      	cmp	r1, #9
     ad2:	d011      	beq.n	af8 <rtc_calendar_enable_callback+0x2c>
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_CALENDAR_CALLBACK_TAMPER) {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_0
     ad4:	2907      	cmp	r1, #7
     ad6:	d912      	bls.n	afe <rtc_calendar_enable_callback+0x32>
			&& callback_type <= RTC_CALENDAR_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_PER((1 << callback_type));
	}else {
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_ALARM(1 << (callback_type - RTC_PER_NUM));
     ad8:	2380      	movs	r3, #128	; 0x80
     ada:	005b      	lsls	r3, r3, #1
     adc:	000c      	movs	r4, r1
     ade:	3c08      	subs	r4, #8
     ae0:	40a3      	lsls	r3, r4
     ae2:	2480      	movs	r4, #128	; 0x80
     ae4:	0064      	lsls	r4, r4, #1
     ae6:	4023      	ands	r3, r4
     ae8:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
     aea:	8e43      	ldrh	r3, [r0, #50]	; 0x32
     aec:	2201      	movs	r2, #1
     aee:	408a      	lsls	r2, r1
     af0:	4313      	orrs	r3, r2
     af2:	b29b      	uxth	r3, r3
     af4:	8643      	strh	r3, [r0, #50]	; 0x32
}
     af6:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_OVF;
     af8:	4b04      	ldr	r3, [pc, #16]	; (b0c <rtc_calendar_enable_callback+0x40>)
     afa:	8153      	strh	r3, [r2, #10]
     afc:	e7f5      	b.n	aea <rtc_calendar_enable_callback+0x1e>
		rtc_module->MODE2.INTENSET.reg = RTC_MODE2_INTFLAG_PER((1 << callback_type));
     afe:	2401      	movs	r4, #1
     b00:	408c      	lsls	r4, r1
     b02:	23ff      	movs	r3, #255	; 0xff
     b04:	4023      	ands	r3, r4
     b06:	8153      	strh	r3, [r2, #10]
     b08:	e7ef      	b.n	aea <rtc_calendar_enable_callback+0x1e>
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	ffff8000 	.word	0xffff8000

00000b10 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b12:	46de      	mov	lr, fp
     b14:	4657      	mov	r7, sl
     b16:	464e      	mov	r6, r9
     b18:	4645      	mov	r5, r8
     b1a:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     b1c:	4b24      	ldr	r3, [pc, #144]	; (bb0 <RTC_Handler+0xa0>)
     b1e:	681b      	ldr	r3, [r3, #0]
     b20:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
     b22:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
     b24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
	callback_mask &= module->registered_callback;
     b26:	4652      	mov	r2, sl
     b28:	8e12      	ldrh	r2, [r2, #48]	; 0x30
     b2a:	401a      	ands	r2, r3
     b2c:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
     b2e:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
     b30:	8973      	ldrh	r3, [r6, #10]
     b32:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
     b34:	b21a      	sxth	r2, r3
     b36:	2a00      	cmp	r2, #0
     b38:	db08      	blt.n	b4c <RTC_Handler+0x3c>
     b3a:	27ff      	movs	r7, #255	; 0xff
     b3c:	401f      	ands	r7, r3
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
     b3e:	d02a      	beq.n	b96 <RTC_Handler+0x86>
     b40:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
     b42:	2301      	movs	r3, #1
     b44:	4699      	mov	r9, r3
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
     b46:	33fe      	adds	r3, #254	; 0xfe
     b48:	469b      	mov	fp, r3
     b4a:	e014      	b.n	b76 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
     b4c:	4643      	mov	r3, r8
     b4e:	059b      	lsls	r3, r3, #22
     b50:	d407      	bmi.n	b62 <RTC_Handler+0x52>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
     b52:	4b18      	ldr	r3, [pc, #96]	; (bb4 <RTC_Handler+0xa4>)
     b54:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
     b56:	bc3c      	pop	{r2, r3, r4, r5}
     b58:	4690      	mov	r8, r2
     b5a:	4699      	mov	r9, r3
     b5c:	46a2      	mov	sl, r4
     b5e:	46ab      	mov	fp, r5
     b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
     b62:	4653      	mov	r3, sl
     b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     b66:	4798      	blx	r3
     b68:	e7f3      	b.n	b52 <RTC_Handler+0x42>
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
     b6a:	465b      	mov	r3, fp
     b6c:	401d      	ands	r5, r3
     b6e:	81b5      	strh	r5, [r6, #12]
     b70:	3401      	adds	r4, #1
		for (i = 0;i < RTC_PER_NUM;i++) {
     b72:	2c08      	cmp	r4, #8
     b74:	d0ef      	beq.n	b56 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
     b76:	0023      	movs	r3, r4
     b78:	464d      	mov	r5, r9
     b7a:	40a5      	lsls	r5, r4
     b7c:	422f      	tst	r7, r5
     b7e:	d0f4      	beq.n	b6a <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
     b80:	4642      	mov	r2, r8
     b82:	4122      	asrs	r2, r4
     b84:	4649      	mov	r1, r9
     b86:	4211      	tst	r1, r2
     b88:	d0ef      	beq.n	b6a <RTC_Handler+0x5a>
				module->callbacks[i]();
     b8a:	3302      	adds	r3, #2
     b8c:	009b      	lsls	r3, r3, #2
     b8e:	4652      	mov	r2, sl
     b90:	589b      	ldr	r3, [r3, r2]
     b92:	4798      	blx	r3
     b94:	e7e9      	b.n	b6a <RTC_Handler+0x5a>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
     b96:	05db      	lsls	r3, r3, #23
     b98:	d5dd      	bpl.n	b56 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
     b9a:	4643      	mov	r3, r8
     b9c:	05db      	lsls	r3, r3, #23
     b9e:	d403      	bmi.n	ba8 <RTC_Handler+0x98>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
     ba0:	2380      	movs	r3, #128	; 0x80
     ba2:	005b      	lsls	r3, r3, #1
     ba4:	81b3      	strh	r3, [r6, #12]
}
     ba6:	e7d6      	b.n	b56 <RTC_Handler+0x46>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
     ba8:	4653      	mov	r3, sl
     baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     bac:	4798      	blx	r3
     bae:	e7f7      	b.n	ba0 <RTC_Handler+0x90>
     bb0:	20000470 	.word	0x20000470
     bb4:	ffff8000 	.word	0xffff8000

00000bb8 <tsens_init>:
 * \retval STATUS_ERR_INVALID_ARG   Invalid argument(s) were provided
 * \retval STATUS_BUSY              The module is busy with a reset operation
 * \retval STATUS_ERR_DENIED        The module is enabled
 */
enum status_code tsens_init(struct tsens_config *config)
{
     bb8:	b510      	push	{r4, lr}
     bba:	b082      	sub	sp, #8
     bbc:	0004      	movs	r4, r0
     bbe:	4a28      	ldr	r2, [pc, #160]	; (c60 <tsens_init+0xa8>)
     bc0:	6951      	ldr	r1, [r2, #20]
     bc2:	2380      	movs	r3, #128	; 0x80
     bc4:	015b      	lsls	r3, r3, #5
     bc6:	430b      	orrs	r3, r1
     bc8:	6153      	str	r3, [r2, #20]
	Assert(config);

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_TSENS);

	if (TSENS->CTRLA.reg & TSENS_CTRLA_SWRST) {
     bca:	4b26      	ldr	r3, [pc, #152]	; (c64 <tsens_init+0xac>)
     bcc:	781b      	ldrb	r3, [r3, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     bce:	2005      	movs	r0, #5
	if (TSENS->CTRLA.reg & TSENS_CTRLA_SWRST) {
     bd0:	07db      	lsls	r3, r3, #31
     bd2:	d501      	bpl.n	bd8 <tsens_init+0x20>
		return STATUS_ERR_DENIED;
	}

	/* Write configuration to module */
	return _tsens_set_config(config);
}
     bd4:	b002      	add	sp, #8
     bd6:	bd10      	pop	{r4, pc}
	if (TSENS->CTRLA.reg & TSENS_CTRLA_ENABLE) {
     bd8:	4b22      	ldr	r3, [pc, #136]	; (c64 <tsens_init+0xac>)
     bda:	781b      	ldrb	r3, [r3, #0]
		return STATUS_ERR_DENIED;
     bdc:	3017      	adds	r0, #23
	if (TSENS->CTRLA.reg & TSENS_CTRLA_ENABLE) {
     bde:	079b      	lsls	r3, r3, #30
     be0:	d4f8      	bmi.n	bd4 <tsens_init+0x1c>
	gclk_chan_conf.source_generator = config->clock_source;
     be2:	a901      	add	r1, sp, #4
     be4:	7823      	ldrb	r3, [r4, #0]
     be6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(TSENS_GCLK_ID, &gclk_chan_conf);
     be8:	3817      	subs	r0, #23
     bea:	4b1f      	ldr	r3, [pc, #124]	; (c68 <tsens_init+0xb0>)
     bec:	4798      	blx	r3
	system_gclk_chan_enable(TSENS_GCLK_ID);
     bee:	2005      	movs	r0, #5
     bf0:	4b1e      	ldr	r3, [pc, #120]	; (c6c <tsens_init+0xb4>)
     bf2:	4798      	blx	r3
	TSENS->CTRLA.reg = (config->run_in_standby << TSENS_CTRLA_RUNSTDBY_Pos);
     bf4:	78a3      	ldrb	r3, [r4, #2]
     bf6:	019b      	lsls	r3, r3, #6
     bf8:	b2db      	uxtb	r3, r3
     bfa:	4a1a      	ldr	r2, [pc, #104]	; (c64 <tsens_init+0xac>)
     bfc:	7013      	strb	r3, [r2, #0]
	if (config->window.window_mode != TSENS_WINDOW_MODE_DISABLE) {
     bfe:	7923      	ldrb	r3, [r4, #4]
     c00:	2b00      	cmp	r3, #0
     c02:	d006      	beq.n	c12 <tsens_init+0x5a>
				return STATUS_ERR_INVALID_ARG;
     c04:	2017      	movs	r0, #23
		if((config->window.window_lower_value < WINDOW_MIN_VALUE) || \
     c06:	68a2      	ldr	r2, [r4, #8]
     c08:	3228      	adds	r2, #40	; 0x28
     c0a:	dbe3      	blt.n	bd4 <tsens_init+0x1c>
     c0c:	68e2      	ldr	r2, [r4, #12]
     c0e:	2a69      	cmp	r2, #105	; 0x69
     c10:	dce0      	bgt.n	bd4 <tsens_init+0x1c>
			(config->free_running << TSENS_CTRLC_FREERUN_Pos) | \
     c12:	7862      	ldrb	r2, [r4, #1]
     c14:	0112      	lsls	r2, r2, #4
     c16:	431a      	orrs	r2, r3
     c18:	b2d2      	uxtb	r2, r2
	TSENS->CTRLC.reg =
     c1a:	4b12      	ldr	r3, [pc, #72]	; (c64 <tsens_init+0xac>)
     c1c:	709a      	strb	r2, [r3, #2]
	TSENS->WINLT.reg = TSENS_WINLT_WINLT(config->window.window_upper_value);
     c1e:	68e2      	ldr	r2, [r4, #12]
     c20:	0212      	lsls	r2, r2, #8
     c22:	0a12      	lsrs	r2, r2, #8
     c24:	611a      	str	r2, [r3, #16]
	TSENS->WINUT.reg = TSENS_WINLT_WINLT(config->window.window_lower_value);
     c26:	68a2      	ldr	r2, [r4, #8]
     c28:	0212      	lsls	r2, r2, #8
     c2a:	0a12      	lsrs	r2, r2, #8
     c2c:	615a      	str	r2, [r3, #20]
	TSENS->EVCTRL.reg = config->event_action;
     c2e:	7c22      	ldrb	r2, [r4, #16]
     c30:	70da      	strb	r2, [r3, #3]
	TSENS->INTENCLR.reg =
     c32:	220f      	movs	r2, #15
     c34:	711a      	strb	r2, [r3, #4]
	uint32_t tsens_bits = *((uint32_t *)NVMCTRL_TEMP_LOG);
     c36:	4a0e      	ldr	r2, [pc, #56]	; (c70 <tsens_init+0xb8>)
     c38:	6812      	ldr	r2, [r2, #0]
	uint32_t tsens_fcal = \
     c3a:	0511      	lsls	r1, r2, #20
     c3c:	0e89      	lsrs	r1, r1, #26
	TSENS->CAL.reg = TSENS_CAL_TCAL(tsens_tcal) | TSENS_CAL_FCAL(tsens_fcal);
     c3e:	0212      	lsls	r2, r2, #8
     c40:	20fc      	movs	r0, #252	; 0xfc
     c42:	0180      	lsls	r0, r0, #6
     c44:	4002      	ands	r2, r0
     c46:	430a      	orrs	r2, r1
     c48:	621a      	str	r2, [r3, #32]
	TSENS->GAIN.reg = TSENS_GAIN_GAIN(config->calibration.gain);
     c4a:	6962      	ldr	r2, [r4, #20]
     c4c:	0212      	lsls	r2, r2, #8
     c4e:	0a12      	lsrs	r2, r2, #8
     c50:	619a      	str	r2, [r3, #24]
	TSENS->OFFSET.reg = TSENS_OFFSET_OFFSETC(config->calibration.offset);
     c52:	69a2      	ldr	r2, [r4, #24]
     c54:	0212      	lsls	r2, r2, #8
     c56:	0a12      	lsrs	r2, r2, #8
     c58:	61da      	str	r2, [r3, #28]
	return STATUS_OK;
     c5a:	2000      	movs	r0, #0
     c5c:	e7ba      	b.n	bd4 <tsens_init+0x1c>
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	40000800 	.word	0x40000800
     c64:	40003000 	.word	0x40003000
     c68:	0000261d 	.word	0x0000261d
     c6c:	000025ad 	.word	0x000025ad
     c70:	00806030 	.word	0x00806030

00000c74 <tsens_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void tsens_get_config_defaults(struct tsens_config *const config)
{
     c74:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     c76:	2300      	movs	r3, #0
     c78:	7003      	strb	r3, [r0, #0]
	config->free_running                  = false;
     c7a:	7043      	strb	r3, [r0, #1]
	config->run_in_standby                = false;
     c7c:	7083      	strb	r3, [r0, #2]
	config->window.window_mode            = TSENS_WINDOW_MODE_DISABLE;
     c7e:	7103      	strb	r3, [r0, #4]
	config->window.window_upper_value     = 0;
     c80:	60c3      	str	r3, [r0, #12]
	config->window.window_lower_value     = 0;
     c82:	6083      	str	r3, [r0, #8]
	config->event_action                  = TSENS_EVENT_ACTION_DISABLED;
     c84:	7403      	strb	r3, [r0, #16]

	uint32_t tsens_bits[2];
	tsens_bits[0] = *((uint32_t *)NVMCTRL_TEMP_LOG);
     c86:	4b06      	ldr	r3, [pc, #24]	; (ca0 <tsens_get_config_defaults+0x2c>)
     c88:	681b      	ldr	r3, [r3, #0]
	tsens_bits[1] = *(((uint32_t *)NVMCTRL_TEMP_LOG) + 1);
     c8a:	4a06      	ldr	r2, [pc, #24]	; (ca4 <tsens_get_config_defaults+0x30>)
     c8c:	6814      	ldr	r4, [r2, #0]
	config->calibration.offset   = \
		((tsens_bits[0] & TSENS_FUSES_OFFSET_Msk) >> TSENS_FUSES_OFFSET_Pos);
     c8e:	0119      	lsls	r1, r3, #4
     c90:	0a09      	lsrs	r1, r1, #8
	config->calibration.offset   = \
     c92:	6181      	str	r1, [r0, #24]
	config->calibration.gain     = \
		((tsens_bits[0] & TSENS_FUSES_GAIN_0_Msk) >> TSENS_FUSES_GAIN_0_Pos) | \
     c94:	0b1b      	lsrs	r3, r3, #12
		((tsens_bits[1] & TSENS_FUSES_GAIN_1_Msk) >> TSENS_FUSES_GAIN_1_Pos);
     c96:	220f      	movs	r2, #15
     c98:	4022      	ands	r2, r4
		((tsens_bits[0] & TSENS_FUSES_GAIN_0_Msk) >> TSENS_FUSES_GAIN_0_Pos) | \
     c9a:	4313      	orrs	r3, r2
	config->calibration.gain     = \
     c9c:	6143      	str	r3, [r0, #20]
}
     c9e:	bd10      	pop	{r4, pc}
     ca0:	00806030 	.word	0x00806030
     ca4:	00806034 	.word	0x00806034

00000ca8 <tsens_read>:
 *                                    window range
 * \retval TSENS_STATUS_OVERFLOW      TSENS result overflows
 */
static inline uint32_t tsens_get_status(void)
{
	uint32_t int_flags = TSENS->INTFLAG.reg;
     ca8:	4b1f      	ldr	r3, [pc, #124]	; (d28 <tsens_read+0x80>)
     caa:	799a      	ldrb	r2, [r3, #6]
     cac:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for TSENS Result Ready */
	if (int_flags & TSENS_INTFLAG_RESRDY) {
     cae:	2301      	movs	r3, #1
     cb0:	4013      	ands	r3, r2
		status_flags |= TSENS_STATUS_RESULT_READY;
	}

	/* Check for TSENS Overrun */
	if (int_flags & TSENS_INTFLAG_OVERRUN) {
     cb2:	0791      	lsls	r1, r2, #30
     cb4:	d501      	bpl.n	cba <tsens_read+0x12>
		status_flags |= TSENS_STATUS_OVERRUN;
     cb6:	2102      	movs	r1, #2
     cb8:	430b      	orrs	r3, r1
	}

	/* Check for TSENS Window Match */
	if (int_flags & TSENS_INTFLAG_WINMON) {
     cba:	0751      	lsls	r1, r2, #29
     cbc:	d501      	bpl.n	cc2 <tsens_read+0x1a>
		status_flags |= TSENS_STATUS_WINDOW;
     cbe:	2104      	movs	r1, #4
     cc0:	430b      	orrs	r3, r1
	}

	/* Check for TSENS overflow */
	if (int_flags & TSENS_INTFLAG_OVF) {
     cc2:	0712      	lsls	r2, r2, #28
     cc4:	d501      	bpl.n	cca <tsens_read+0x22>
		status_flags |= TSENS_STATUS_OVERFLOW;
     cc6:	2208      	movs	r2, #8
     cc8:	4313      	orrs	r3, r2
{
	Assert(result);

	if (!(tsens_get_status() & TSENS_STATUS_RESULT_READY)) {
		/* Result not ready */
		return STATUS_BUSY;
     cca:	2205      	movs	r2, #5
	if (!(tsens_get_status() & TSENS_STATUS_RESULT_READY)) {
     ccc:	07db      	lsls	r3, r3, #31
     cce:	d401      	bmi.n	cd4 <tsens_read+0x2c>
		tsens_clear_status(TSENS_STATUS_OVERRUN);
		return STATUS_ERR_OVERFLOW;
	}

	return STATUS_OK;
}
     cd0:	0010      	movs	r0, r2
     cd2:	4770      	bx	lr
	if (TSENS->STATUS.reg & TSENS_STATUS_OVF) {
     cd4:	4b14      	ldr	r3, [pc, #80]	; (d28 <tsens_read+0x80>)
     cd6:	79db      	ldrb	r3, [r3, #7]
		return STATUS_ERR_BAD_DATA;
     cd8:	320e      	adds	r2, #14
	if (TSENS->STATUS.reg & TSENS_STATUS_OVF) {
     cda:	07db      	lsls	r3, r3, #31
     cdc:	d4f8      	bmi.n	cd0 <tsens_read+0x28>
	uint32_t temp = TSENS->VALUE.reg;
     cde:	4b12      	ldr	r3, [pc, #72]	; (d28 <tsens_read+0x80>)
     ce0:	68db      	ldr	r3, [r3, #12]
	if(temp & 0x00800000) {
     ce2:	021a      	lsls	r2, r3, #8
     ce4:	d502      	bpl.n	cec <tsens_read+0x44>
		temp |= ~TSENS_VALUE_MASK;
     ce6:	22ff      	movs	r2, #255	; 0xff
     ce8:	0612      	lsls	r2, r2, #24
     cea:	4313      	orrs	r3, r2
	*result = temp * (-1);
     cec:	425b      	negs	r3, r3
     cee:	6003      	str	r3, [r0, #0]
	if (status_flags & TSENS_INTFLAG_OVF) {
		int_flags |= TSENS_STATUS_OVERFLOW;
	}

	/* Clear interrupt flag */
	TSENS->INTFLAG.reg = int_flags;
     cf0:	4a0d      	ldr	r2, [pc, #52]	; (d28 <tsens_read+0x80>)
     cf2:	2301      	movs	r3, #1
     cf4:	7193      	strb	r3, [r2, #6]
	uint32_t int_flags = TSENS->INTFLAG.reg;
     cf6:	7992      	ldrb	r2, [r2, #6]
     cf8:	b2d2      	uxtb	r2, r2
	if (int_flags & TSENS_INTFLAG_RESRDY) {
     cfa:	4013      	ands	r3, r2
	if (int_flags & TSENS_INTFLAG_OVERRUN) {
     cfc:	0791      	lsls	r1, r2, #30
     cfe:	d501      	bpl.n	d04 <tsens_read+0x5c>
		status_flags |= TSENS_STATUS_OVERRUN;
     d00:	2102      	movs	r1, #2
     d02:	430b      	orrs	r3, r1
	if (int_flags & TSENS_INTFLAG_WINMON) {
     d04:	0751      	lsls	r1, r2, #29
     d06:	d501      	bpl.n	d0c <tsens_read+0x64>
		status_flags |= TSENS_STATUS_WINDOW;
     d08:	2104      	movs	r1, #4
     d0a:	430b      	orrs	r3, r1
	if (int_flags & TSENS_INTFLAG_OVF) {
     d0c:	0712      	lsls	r2, r2, #28
     d0e:	d501      	bpl.n	d14 <tsens_read+0x6c>
		status_flags |= TSENS_STATUS_OVERFLOW;
     d10:	2208      	movs	r2, #8
     d12:	4313      	orrs	r3, r2
	if (tsens_get_status() & TSENS_STATUS_OVERRUN) {
     d14:	079b      	lsls	r3, r3, #30
     d16:	d504      	bpl.n	d22 <tsens_read+0x7a>
	TSENS->INTFLAG.reg = int_flags;
     d18:	2202      	movs	r2, #2
     d1a:	4b03      	ldr	r3, [pc, #12]	; (d28 <tsens_read+0x80>)
     d1c:	719a      	strb	r2, [r3, #6]
		return STATUS_ERR_OVERFLOW;
     d1e:	321c      	adds	r2, #28
     d20:	e7d6      	b.n	cd0 <tsens_read+0x28>
	return STATUS_OK;
     d22:	2200      	movs	r2, #0
     d24:	e7d4      	b.n	cd0 <tsens_read+0x28>
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	40003000 	.word	0x40003000

00000d2c <TSENS_Handler>:

struct tsens_module *_tsens_instances;

/** Interrupt handler for the TSENS module. */
void TSENS_Handler(void)
{
     d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d2e:	46c6      	mov	lr, r8
     d30:	b500      	push	{lr}
	struct tsens_module *module = _tsens_instances;
     d32:	4b14      	ldr	r3, [pc, #80]	; (d84 <TSENS_Handler+0x58>)
     d34:	681f      	ldr	r7, [r3, #0]
	Assert(module);

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = TSENS->INTFLAG.reg;
     d36:	4b14      	ldr	r3, [pc, #80]	; (d88 <TSENS_Handler+0x5c>)
     d38:	799e      	ldrb	r6, [r3, #6]
     d3a:	b2f6      	uxtb	r6, r6

	/* store TSENS result in job buffer */
	uint32_t temp = TSENS->VALUE.reg;
     d3c:	68db      	ldr	r3, [r3, #12]
	if(temp & 0x00800000) {
     d3e:	021a      	lsls	r2, r3, #8
     d40:	d502      	bpl.n	d48 <TSENS_Handler+0x1c>
		temp |= ~TSENS_VALUE_MASK;
     d42:	22ff      	movs	r2, #255	; 0xff
     d44:	0612      	lsls	r2, r2, #24
     d46:	4313      	orrs	r3, r2
	}
#if (ERRATA_14476)
	*(module->value) = temp * (-1);
     d48:	693a      	ldr	r2, [r7, #16]
     d4a:	425b      	negs	r3, r3
     d4c:	6013      	str	r3, [r2, #0]
     d4e:	2400      	movs	r4, #0
#endif

	for(uint8_t i = 0; i < TSENS_CALLBACK_NUM; i++)
	{
		if (flags & ((uint32_t)0x01 << i)) {
     d50:	2501      	movs	r5, #1
			/* Clear the INTFLAG anyway */
			TSENS->INTFLAG.reg = (uint32_t)0x01 << i;
     d52:	4b0d      	ldr	r3, [pc, #52]	; (d88 <TSENS_Handler+0x5c>)
     d54:	4698      	mov	r8, r3
     d56:	e002      	b.n	d5e <TSENS_Handler+0x32>
     d58:	3401      	adds	r4, #1
	for(uint8_t i = 0; i < TSENS_CALLBACK_NUM; i++)
     d5a:	2c04      	cmp	r4, #4
     d5c:	d00f      	beq.n	d7e <TSENS_Handler+0x52>
     d5e:	b2e0      	uxtb	r0, r4
		if (flags & ((uint32_t)0x01 << i)) {
     d60:	0033      	movs	r3, r6
     d62:	40e3      	lsrs	r3, r4
     d64:	421d      	tst	r5, r3
     d66:	d0f7      	beq.n	d58 <TSENS_Handler+0x2c>
			TSENS->INTFLAG.reg = (uint32_t)0x01 << i;
     d68:	002b      	movs	r3, r5
     d6a:	40a3      	lsls	r3, r4
     d6c:	b2db      	uxtb	r3, r3
     d6e:	4642      	mov	r2, r8
     d70:	7193      	strb	r3, [r2, #6]

			if(module->callback[i] != NULL) {
     d72:	00a3      	lsls	r3, r4, #2
     d74:	58fb      	ldr	r3, [r7, r3]
     d76:	2b00      	cmp	r3, #0
     d78:	d0ee      	beq.n	d58 <TSENS_Handler+0x2c>
				module->callback[i]((enum tsens_callback)i);
     d7a:	4798      	blx	r3
     d7c:	e7ec      	b.n	d58 <TSENS_Handler+0x2c>
			}
		}
	}
}
     d7e:	bc04      	pop	{r2}
     d80:	4690      	mov	r8, r2
     d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d84:	20000474 	.word	0x20000474
     d88:	40003000 	.word	0x40003000

00000d8c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d8e:	46c6      	mov	lr, r8
     d90:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     d92:	0080      	lsls	r0, r0, #2
     d94:	4b0e      	ldr	r3, [pc, #56]	; (dd0 <_tcc_interrupt_handler+0x44>)
     d96:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     d98:	683b      	ldr	r3, [r7, #0]
     d9a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     da0:	4013      	ands	r3, r2
     da2:	401e      	ands	r6, r3
     da4:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     da6:	4b0b      	ldr	r3, [pc, #44]	; (dd4 <_tcc_interrupt_handler+0x48>)
     da8:	4698      	mov	r8, r3
     daa:	e002      	b.n	db2 <_tcc_interrupt_handler+0x26>
     dac:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     dae:	2c30      	cmp	r4, #48	; 0x30
     db0:	d00a      	beq.n	dc8 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     db2:	4643      	mov	r3, r8
     db4:	58e5      	ldr	r5, [r4, r3]
     db6:	4235      	tst	r5, r6
     db8:	d0f8      	beq.n	dac <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     dba:	193b      	adds	r3, r7, r4
     dbc:	685b      	ldr	r3, [r3, #4]
     dbe:	0038      	movs	r0, r7
     dc0:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     dc2:	683b      	ldr	r3, [r7, #0]
     dc4:	62dd      	str	r5, [r3, #44]	; 0x2c
     dc6:	e7f1      	b.n	dac <_tcc_interrupt_handler+0x20>
		}
	}
}
     dc8:	bc04      	pop	{r2}
     dca:	4690      	mov	r8, r2
     dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	20000478 	.word	0x20000478
     dd4:	000050cc 	.word	0x000050cc

00000dd8 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     dd8:	b510      	push	{r4, lr}
     dda:	2000      	movs	r0, #0
     ddc:	4b01      	ldr	r3, [pc, #4]	; (de4 <TCC0_Handler+0xc>)
     dde:	4798      	blx	r3
     de0:	bd10      	pop	{r4, pc}
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	00000d8d 	.word	0x00000d8d

00000de8 <TCC1_Handler>:
     de8:	b510      	push	{r4, lr}
     dea:	2001      	movs	r0, #1
     dec:	4b01      	ldr	r3, [pc, #4]	; (df4 <TCC1_Handler+0xc>)
     dee:	4798      	blx	r3
     df0:	bd10      	pop	{r4, pc}
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	00000d8d 	.word	0x00000d8d

00000df8 <TCC2_Handler>:
     df8:	b510      	push	{r4, lr}
     dfa:	2002      	movs	r0, #2
     dfc:	4b01      	ldr	r3, [pc, #4]	; (e04 <TCC2_Handler+0xc>)
     dfe:	4798      	blx	r3
     e00:	bd10      	pop	{r4, pc}
     e02:	46c0      	nop			; (mov r8, r8)
     e04:	00000d8d 	.word	0x00000d8d

00000e08 <events_create_hook>:
extern struct _events_module _events_inst;

enum status_code events_create_hook(struct events_hook *hook, events_interrupt_hook func)
{
	/* Initialize the hook struct members */
	hook->next      = NULL;
     e08:	2300      	movs	r3, #0
     e0a:	6083      	str	r3, [r0, #8]
	hook->resource  = NULL;
     e0c:	6003      	str	r3, [r0, #0]
	hook->hook_func = func;
     e0e:	6041      	str	r1, [r0, #4]

	return STATUS_OK;
}
     e10:	2000      	movs	r0, #0
     e12:	4770      	bx	lr

00000e14 <events_add_hook>:
enum status_code events_add_hook(struct events_resource *resource, struct events_hook *hook)
{
	struct events_hook *tmp_hook = NULL;

	/* Associate the hook with the resource */
	hook->resource = resource;
     e14:	6008      	str	r0, [r1, #0]

	/* Check if this is the first hook in the list */
	if (_events_inst.hook_list == NULL) {
     e16:	4b0a      	ldr	r3, [pc, #40]	; (e40 <events_add_hook+0x2c>)
     e18:	691a      	ldr	r2, [r3, #16]
     e1a:	2a00      	cmp	r2, #0
     e1c:	d102      	bne.n	e24 <events_add_hook+0x10>
		_events_inst.hook_list = hook;
     e1e:	6119      	str	r1, [r3, #16]
     e20:	e004      	b.n	e2c <events_add_hook+0x18>
	} else {
		tmp_hook = _events_inst.hook_list;

		/* Find the first free place in the list */
		while (tmp_hook->next != NULL) {
			tmp_hook = tmp_hook->next;
     e22:	001a      	movs	r2, r3
		while (tmp_hook->next != NULL) {
     e24:	6893      	ldr	r3, [r2, #8]
     e26:	2b00      	cmp	r3, #0
     e28:	d1fb      	bne.n	e22 <events_add_hook+0xe>
		}

		/* Put the hook into the next free place in the list */
		tmp_hook->next = hook;
     e2a:	6091      	str	r1, [r2, #8]
	return (bool)((NVIC->ISER[0] >> (uint32_t)vector) & 0x00000001);
     e2c:	4b05      	ldr	r3, [pc, #20]	; (e44 <events_add_hook+0x30>)
     e2e:	681b      	ldr	r3, [r3, #0]
	}

	/* Check if interrupts from the EVSYS module is enabled in the interrupt controller */
	if (!system_interrupt_is_enabled(SYSTEM_INTERRUPT_MODULE_EVSYS)) {
     e30:	05db      	lsls	r3, r3, #23
     e32:	d403      	bmi.n	e3c <events_add_hook+0x28>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     e34:	2280      	movs	r2, #128	; 0x80
     e36:	0052      	lsls	r2, r2, #1
     e38:	4b02      	ldr	r3, [pc, #8]	; (e44 <events_add_hook+0x30>)
     e3a:	601a      	str	r2, [r3, #0]
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EVSYS);
	}

	return STATUS_OK;
}
     e3c:	2000      	movs	r0, #0
     e3e:	4770      	bx	lr
     e40:	20000000 	.word	0x20000000
     e44:	e000e100 	.word	0xe000e100

00000e48 <events_enable_interrupt_source>:

	return STATUS_OK;
}

enum status_code events_enable_interrupt_source(struct events_resource *resource, enum events_interrupt_source source)
{
     e48:	b510      	push	{r4, lr}
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	if (source == EVENTS_INTERRUPT_DETECT) {
     e4a:	2901      	cmp	r1, #1
     e4c:	d004      	beq.n	e58 <events_enable_interrupt_source+0x10>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
     e4e:	2317      	movs	r3, #23
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     e50:	2900      	cmp	r1, #0
     e52:	d00a      	beq.n	e6a <events_enable_interrupt_source+0x22>
	}

	return STATUS_OK;
}
     e54:	0018      	movs	r0, r3
     e56:	bd10      	pop	{r4, pc}
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
     e58:	7800      	ldrb	r0, [r0, #0]
     e5a:	310f      	adds	r1, #15
     e5c:	4b07      	ldr	r3, [pc, #28]	; (e7c <events_enable_interrupt_source+0x34>)
     e5e:	4798      	blx	r3
     e60:	2384      	movs	r3, #132	; 0x84
     e62:	05db      	lsls	r3, r3, #23
     e64:	6158      	str	r0, [r3, #20]
	return STATUS_OK;
     e66:	2300      	movs	r3, #0
     e68:	e7f4      	b.n	e54 <events_enable_interrupt_source+0xc>
		EVSYS->INTENSET.reg = _events_find_bit_position(resource->channel,
     e6a:	7800      	ldrb	r0, [r0, #0]
     e6c:	4b03      	ldr	r3, [pc, #12]	; (e7c <events_enable_interrupt_source+0x34>)
     e6e:	4798      	blx	r3
     e70:	2384      	movs	r3, #132	; 0x84
     e72:	05db      	lsls	r3, r3, #23
     e74:	6158      	str	r0, [r3, #20]
	return STATUS_OK;
     e76:	2300      	movs	r3, #0
     e78:	e7ec      	b.n	e54 <events_enable_interrupt_source+0xc>
     e7a:	46c0      	nop			; (mov r8, r8)
     e7c:	00000f2d 	.word	0x00000f2d

00000e80 <events_is_interrupt_set>:
	return STATUS_OK;
}


bool events_is_interrupt_set(struct events_resource *resource, enum events_interrupt_source source)
{
     e80:	b510      	push	{r4, lr}
     e82:	0003      	movs	r3, r0
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
     e84:	2901      	cmp	r1, #1
     e86:	d003      	beq.n	e90 <events_is_interrupt_set+0x10>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return false;
     e88:	2000      	movs	r0, #0
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     e8a:	2900      	cmp	r1, #0
     e8c:	d006      	beq.n	e9c <events_is_interrupt_set+0x1c>
	}

	return (bool)(_events_inst.interrupt_flag_buffer & bitpos);
}
     e8e:	bd10      	pop	{r4, pc}
		bitpos = _events_find_bit_position(resource->channel,
     e90:	7800      	ldrb	r0, [r0, #0]
     e92:	310f      	adds	r1, #15
     e94:	4b07      	ldr	r3, [pc, #28]	; (eb4 <events_is_interrupt_set+0x34>)
     e96:	4798      	blx	r3
     e98:	0003      	movs	r3, r0
     e9a:	e003      	b.n	ea4 <events_is_interrupt_set+0x24>
		bitpos = _events_find_bit_position(resource->channel,
     e9c:	7818      	ldrb	r0, [r3, #0]
     e9e:	4b05      	ldr	r3, [pc, #20]	; (eb4 <events_is_interrupt_set+0x34>)
     ea0:	4798      	blx	r3
     ea2:	0003      	movs	r3, r0
	return (bool)(_events_inst.interrupt_flag_buffer & bitpos);
     ea4:	4a04      	ldr	r2, [pc, #16]	; (eb8 <events_is_interrupt_set+0x38>)
     ea6:	6890      	ldr	r0, [r2, #8]
     ea8:	4018      	ands	r0, r3
     eaa:	1e43      	subs	r3, r0, #1
     eac:	4198      	sbcs	r0, r3
     eae:	b2c0      	uxtb	r0, r0
     eb0:	e7ed      	b.n	e8e <events_is_interrupt_set+0xe>
     eb2:	46c0      	nop			; (mov r8, r8)
     eb4:	00000f2d 	.word	0x00000f2d
     eb8:	20000000 	.word	0x20000000

00000ebc <events_ack_interrupt>:

enum status_code events_ack_interrupt(struct events_resource *resource, enum events_interrupt_source source)
{
     ebc:	b510      	push	{r4, lr}
	Assert((source == EVENTS_INTERRUPT_DETECT) || (source == EVENTS_INTERRUPT_OVERRUN));

	uint32_t bitpos;

	if (source == EVENTS_INTERRUPT_DETECT) {
     ebe:	2901      	cmp	r1, #1
     ec0:	d004      	beq.n	ecc <events_ack_interrupt+0x10>
				_EVENTS_START_OFFSET_DETECTION_BIT);
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
		bitpos = _events_find_bit_position(resource->channel,
				_EVENTS_START_OFFSET_OVERRUN_BIT);
	} else {
		return STATUS_ERR_INVALID_ARG;
     ec2:	2317      	movs	r3, #23
	} else if (source == EVENTS_INTERRUPT_OVERRUN) {
     ec4:	2900      	cmp	r1, #0
     ec6:	d006      	beq.n	ed6 <events_ack_interrupt+0x1a>
	}

	_events_inst.interrupt_flag_ack_buffer |= bitpos;

	return STATUS_OK;
}
     ec8:	0018      	movs	r0, r3
     eca:	bd10      	pop	{r4, pc}
		bitpos = _events_find_bit_position(resource->channel,
     ecc:	7800      	ldrb	r0, [r0, #0]
     ece:	310f      	adds	r1, #15
     ed0:	4b05      	ldr	r3, [pc, #20]	; (ee8 <events_ack_interrupt+0x2c>)
     ed2:	4798      	blx	r3
     ed4:	e002      	b.n	edc <events_ack_interrupt+0x20>
		bitpos = _events_find_bit_position(resource->channel,
     ed6:	7800      	ldrb	r0, [r0, #0]
     ed8:	4b03      	ldr	r3, [pc, #12]	; (ee8 <events_ack_interrupt+0x2c>)
     eda:	4798      	blx	r3
	_events_inst.interrupt_flag_ack_buffer |= bitpos;
     edc:	4b03      	ldr	r3, [pc, #12]	; (eec <events_ack_interrupt+0x30>)
     ede:	68da      	ldr	r2, [r3, #12]
     ee0:	4310      	orrs	r0, r2
     ee2:	60d8      	str	r0, [r3, #12]
	return STATUS_OK;
     ee4:	2300      	movs	r3, #0
     ee6:	e7ef      	b.n	ec8 <events_ack_interrupt+0xc>
     ee8:	00000f2d 	.word	0x00000f2d
     eec:	20000000 	.word	0x20000000

00000ef0 <EVSYS_Handler>:

void EVSYS_Handler(void)
{
     ef0:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     ef2:	4b0c      	ldr	r3, [pc, #48]	; (f24 <EVSYS_Handler+0x34>)
     ef4:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     ef6:	2184      	movs	r1, #132	; 0x84
     ef8:	05c9      	lsls	r1, r1, #23
     efa:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     efc:	6898      	ldr	r0, [r3, #8]
     efe:	4302      	orrs	r2, r0
     f00:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     f02:	4b09      	ldr	r3, [pc, #36]	; (f28 <EVSYS_Handler+0x38>)
     f04:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     f06:	2c00      	cmp	r4, #0
     f08:	d005      	beq.n	f16 <EVSYS_Handler+0x26>
		current_hook->hook_func(current_hook->resource);
     f0a:	6820      	ldr	r0, [r4, #0]
     f0c:	6863      	ldr	r3, [r4, #4]
     f0e:	4798      	blx	r3
		current_hook = current_hook->next;
     f10:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     f12:	2c00      	cmp	r4, #0
     f14:	d1f9      	bne.n	f0a <EVSYS_Handler+0x1a>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     f16:	4b03      	ldr	r3, [pc, #12]	; (f24 <EVSYS_Handler+0x34>)
     f18:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     f1a:	689a      	ldr	r2, [r3, #8]
     f1c:	438a      	bics	r2, r1
     f1e:	609a      	str	r2, [r3, #8]
}
     f20:	bd10      	pop	{r4, pc}
     f22:	46c0      	nop			; (mov r8, r8)
     f24:	20000000 	.word	0x20000000
     f28:	0fff0fff 	.word	0x0fff0fff

00000f2c <_events_find_bit_position>:
 */
uint32_t _events_find_bit_position(uint8_t channel, uint8_t start_offset)
{
	uint32_t pos;

	pos = 0x01UL << (start_offset + channel);
     f2c:	1809      	adds	r1, r1, r0
     f2e:	2001      	movs	r0, #1
     f30:	4088      	lsls	r0, r1

	return pos;
}
     f32:	4770      	bx	lr

00000f34 <_system_events_init>:
			MCLK->APBCMASK.reg |= mask;
     f34:	4906      	ldr	r1, [pc, #24]	; (f50 <_system_events_init+0x1c>)
     f36:	69cb      	ldr	r3, [r1, #28]
     f38:	2201      	movs	r2, #1
     f3a:	4313      	orrs	r3, r2
     f3c:	61cb      	str	r3, [r1, #28]
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_EVSYS);
#endif

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRLA.reg = EVSYS_CTRLA_SWRST;
     f3e:	2384      	movs	r3, #132	; 0x84
     f40:	05db      	lsls	r3, r3, #23
     f42:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRLA.reg & EVSYS_CTRLA_SWRST) {
     f44:	0019      	movs	r1, r3
     f46:	780b      	ldrb	r3, [r1, #0]
     f48:	4213      	tst	r3, r2
     f4a:	d1fc      	bne.n	f46 <_system_events_init+0x12>
	}
}
     f4c:	4770      	bx	lr
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	40000800 	.word	0x40000800

00000f54 <events_get_config_defaults>:
void events_get_config_defaults(struct events_config *config)
{
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
     f54:	2301      	movs	r3, #1
     f56:	7003      	strb	r3, [r0, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
     f58:	2300      	movs	r3, #0
     f5a:	7043      	strb	r3, [r0, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
     f5c:	7083      	strb	r3, [r0, #2]
	config->clock_source = GCLK_GENERATOR_0;
     f5e:	70c3      	strb	r3, [r0, #3]
	config->run_in_standby = false;
     f60:	7103      	strb	r3, [r0, #4]
	config->on_demand    = false;
     f62:	7143      	strb	r3, [r0, #5]
}
     f64:	4770      	bx	lr
	...

00000f68 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
     f68:	b570      	push	{r4, r5, r6, lr}
     f6a:	b082      	sub	sp, #8
     f6c:	0005      	movs	r5, r0
     f6e:	000e      	movs	r6, r1
	cpu_irq_enter_critical();
     f70:	4b25      	ldr	r3, [pc, #148]	; (1008 <events_allocate+0xa0>)
     f72:	4798      	blx	r3
	tmp = _events_inst.allocated_channels;
     f74:	4b25      	ldr	r3, [pc, #148]	; (100c <events_allocate+0xa4>)
     f76:	681b      	ldr	r3, [r3, #0]
		if(!(tmp & 0x00000001)) {
     f78:	07da      	lsls	r2, r3, #31
     f7a:	d50e      	bpl.n	f9a <events_allocate+0x32>
		tmp = tmp >> 1;
     f7c:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     f7e:	2401      	movs	r4, #1
		if(!(tmp & 0x00000001)) {
     f80:	2201      	movs	r2, #1
     f82:	421a      	tst	r2, r3
     f84:	d00a      	beq.n	f9c <events_allocate+0x34>
		tmp = tmp >> 1;
     f86:	085b      	lsrs	r3, r3, #1
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     f88:	3401      	adds	r4, #1
     f8a:	b2e4      	uxtb	r4, r4
     f8c:	2c0c      	cmp	r4, #12
     f8e:	d1f8      	bne.n	f82 <events_allocate+0x1a>
	cpu_irq_leave_critical();
     f90:	4b1f      	ldr	r3, [pc, #124]	; (1010 <events_allocate+0xa8>)
     f92:	4798      	blx	r3
	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();

	if(new_channel == EVENTS_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
     f94:	2014      	movs	r0, #20
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
			EVSYS_CHANNEL_EDGSEL(config->edge_detect);

	return STATUS_OK;
}
     f96:	b002      	add	sp, #8
     f98:	bd70      	pop	{r4, r5, r6, pc}
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
     f9a:	2400      	movs	r4, #0
			_events_inst.allocated_channels |= 1 << count;
     f9c:	4a1b      	ldr	r2, [pc, #108]	; (100c <events_allocate+0xa4>)
     f9e:	6811      	ldr	r1, [r2, #0]
     fa0:	2301      	movs	r3, #1
     fa2:	40a3      	lsls	r3, r4
     fa4:	430b      	orrs	r3, r1
     fa6:	6013      	str	r3, [r2, #0]
			_events_inst.free_channels--;
     fa8:	7913      	ldrb	r3, [r2, #4]
     faa:	3b01      	subs	r3, #1
     fac:	7113      	strb	r3, [r2, #4]
     fae:	4b18      	ldr	r3, [pc, #96]	; (1010 <events_allocate+0xa8>)
     fb0:	4798      	blx	r3
		return STATUS_ERR_NOT_FOUND;
     fb2:	2014      	movs	r0, #20
	if(new_channel == EVENTS_INVALID_CHANNEL) {
     fb4:	2cff      	cmp	r4, #255	; 0xff
     fb6:	d0ee      	beq.n	f96 <events_allocate+0x2e>
	resource->channel = new_channel;
     fb8:	702c      	strb	r4, [r5, #0]
	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
     fba:	7873      	ldrb	r3, [r6, #1]
     fbc:	2b02      	cmp	r3, #2
     fbe:	d00a      	beq.n	fd6 <events_allocate+0x6e>
		gclk_chan_conf.source_generator =
     fc0:	a901      	add	r1, sp, #4
     fc2:	78f3      	ldrb	r3, [r6, #3]
     fc4:	700b      	strb	r3, [r1, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
     fc6:	3406      	adds	r4, #6
     fc8:	b2e4      	uxtb	r4, r4
     fca:	0020      	movs	r0, r4
     fcc:	4b11      	ldr	r3, [pc, #68]	; (1014 <events_allocate+0xac>)
     fce:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
     fd0:	0020      	movs	r0, r4
     fd2:	4b11      	ldr	r3, [pc, #68]	; (1018 <events_allocate+0xb0>)
     fd4:	4798      	blx	r3
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
     fd6:	78b2      	ldrb	r2, [r6, #2]
     fd8:	237f      	movs	r3, #127	; 0x7f
     fda:	4013      	ands	r3, r2
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
     fdc:	7932      	ldrb	r2, [r6, #4]
     fde:	0392      	lsls	r2, r2, #14
     fe0:	4313      	orrs	r3, r2
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
     fe2:	7972      	ldrb	r2, [r6, #5]
     fe4:	03d2      	lsls	r2, r2, #15
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
     fe6:	4313      	orrs	r3, r2
			EVSYS_CHANNEL_PATH(config->path)                                 |
     fe8:	7872      	ldrb	r2, [r6, #1]
     fea:	0212      	lsls	r2, r2, #8
     fec:	21c0      	movs	r1, #192	; 0xc0
     fee:	0089      	lsls	r1, r1, #2
     ff0:	400a      	ands	r2, r1
			((uint32_t)config->run_in_standby << EVSYS_CHANNEL_RUNSTDBY_Pos) |
     ff2:	4313      	orrs	r3, r2
			EVSYS_CHANNEL_EDGSEL(config->edge_detect);
     ff4:	7832      	ldrb	r2, [r6, #0]
     ff6:	0292      	lsls	r2, r2, #10
     ff8:	21c0      	movs	r1, #192	; 0xc0
     ffa:	0109      	lsls	r1, r1, #4
     ffc:	400a      	ands	r2, r1
			((uint32_t)config->on_demand << EVSYS_CHANNEL_ONDEMAND_Pos) |
     ffe:	4313      	orrs	r3, r2
	resource->channel_reg = EVSYS_CHANNEL_EVGEN(config->generator)           |
    1000:	606b      	str	r3, [r5, #4]
	return STATUS_OK;
    1002:	2000      	movs	r0, #0
    1004:	e7c7      	b.n	f96 <events_allocate+0x2e>
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	00001055 	.word	0x00001055
    100c:	20000000 	.word	0x20000000
    1010:	00001095 	.word	0x00001095
    1014:	0000261d 	.word	0x0000261d
    1018:	000025ad 	.word	0x000025ad

0000101c <events_is_busy>:

bool events_is_busy(struct events_resource *resource)
{
	Assert(resource);

	return EVSYS->CHSTATUS.reg & (_events_find_bit_position(resource->channel,
    101c:	2384      	movs	r3, #132	; 0x84
    101e:	05db      	lsls	r3, r3, #23
    1020:	68db      	ldr	r3, [r3, #12]
	pos = 0x01UL << (start_offset + channel);
    1022:	7802      	ldrb	r2, [r0, #0]
    1024:	3210      	adds	r2, #16
    1026:	2001      	movs	r0, #1
    1028:	4090      	lsls	r0, r2
	return EVSYS->CHSTATUS.reg & (_events_find_bit_position(resource->channel,
    102a:	4018      	ands	r0, r3
    102c:	1e43      	subs	r3, r0, #1
    102e:	4198      	sbcs	r0, r3
    1030:	b2c0      	uxtb	r0, r0
			_EVENTS_START_OFFSET_BUSY_BITS));
}
    1032:	4770      	bx	lr

00001034 <events_attach_user>:
enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER[user_id].reg = EVSYS_USER_CHANNEL(resource->channel + 1);
    1034:	7802      	ldrb	r2, [r0, #0]
    1036:	3201      	adds	r2, #1
    1038:	231f      	movs	r3, #31
    103a:	4013      	ands	r3, r2
    103c:	2284      	movs	r2, #132	; 0x84
    103e:	05d2      	lsls	r2, r2, #23
    1040:	3120      	adds	r1, #32
    1042:	0089      	lsls	r1, r1, #2
    1044:	508b      	str	r3, [r1, r2]

	/* Then configure the channel */
	EVSYS->CHANNEL[resource->channel].reg = resource->channel_reg;
    1046:	7803      	ldrb	r3, [r0, #0]
    1048:	6841      	ldr	r1, [r0, #4]
    104a:	3308      	adds	r3, #8
    104c:	009b      	lsls	r3, r3, #2
    104e:	5099      	str	r1, [r3, r2]

	return STATUS_OK;
}
    1050:	2000      	movs	r0, #0
    1052:	4770      	bx	lr

00001054 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1054:	4b0c      	ldr	r3, [pc, #48]	; (1088 <cpu_irq_enter_critical+0x34>)
    1056:	681b      	ldr	r3, [r3, #0]
    1058:	2b00      	cmp	r3, #0
    105a:	d106      	bne.n	106a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    105c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1060:	2b00      	cmp	r3, #0
    1062:	d007      	beq.n	1074 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1064:	2200      	movs	r2, #0
    1066:	4b09      	ldr	r3, [pc, #36]	; (108c <cpu_irq_enter_critical+0x38>)
    1068:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    106a:	4a07      	ldr	r2, [pc, #28]	; (1088 <cpu_irq_enter_critical+0x34>)
    106c:	6813      	ldr	r3, [r2, #0]
    106e:	3301      	adds	r3, #1
    1070:	6013      	str	r3, [r2, #0]
}
    1072:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1074:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1076:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    107a:	2200      	movs	r2, #0
    107c:	4b04      	ldr	r3, [pc, #16]	; (1090 <cpu_irq_enter_critical+0x3c>)
    107e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1080:	3201      	adds	r2, #1
    1082:	4b02      	ldr	r3, [pc, #8]	; (108c <cpu_irq_enter_critical+0x38>)
    1084:	701a      	strb	r2, [r3, #0]
    1086:	e7f0      	b.n	106a <cpu_irq_enter_critical+0x16>
    1088:	200000b4 	.word	0x200000b4
    108c:	200000b8 	.word	0x200000b8
    1090:	20000014 	.word	0x20000014

00001094 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1094:	4b08      	ldr	r3, [pc, #32]	; (10b8 <cpu_irq_leave_critical+0x24>)
    1096:	681a      	ldr	r2, [r3, #0]
    1098:	3a01      	subs	r2, #1
    109a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    109c:	681b      	ldr	r3, [r3, #0]
    109e:	2b00      	cmp	r3, #0
    10a0:	d109      	bne.n	10b6 <cpu_irq_leave_critical+0x22>
    10a2:	4b06      	ldr	r3, [pc, #24]	; (10bc <cpu_irq_leave_critical+0x28>)
    10a4:	781b      	ldrb	r3, [r3, #0]
    10a6:	2b00      	cmp	r3, #0
    10a8:	d005      	beq.n	10b6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    10aa:	2201      	movs	r2, #1
    10ac:	4b04      	ldr	r3, [pc, #16]	; (10c0 <cpu_irq_leave_critical+0x2c>)
    10ae:	701a      	strb	r2, [r3, #0]
    10b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    10b4:	b662      	cpsie	i
	}
}
    10b6:	4770      	bx	lr
    10b8:	200000b4 	.word	0x200000b4
    10bc:	200000b8 	.word	0x200000b8
    10c0:	20000014 	.word	0x20000014

000010c4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    10c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10c6:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    10c8:	ac01      	add	r4, sp, #4
    10ca:	2501      	movs	r5, #1
    10cc:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    10ce:	2700      	movs	r7, #0
    10d0:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    10d2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    10d4:	0021      	movs	r1, r4
    10d6:	200f      	movs	r0, #15
    10d8:	4e06      	ldr	r6, [pc, #24]	; (10f4 <system_board_init+0x30>)
    10da:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    10dc:	2280      	movs	r2, #128	; 0x80
    10de:	0212      	lsls	r2, r2, #8
    10e0:	2382      	movs	r3, #130	; 0x82
    10e2:	05db      	lsls	r3, r3, #23
    10e4:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    10e6:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    10e8:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    10ea:	0021      	movs	r1, r4
    10ec:	201c      	movs	r0, #28
    10ee:	47b0      	blx	r6
}
    10f0:	b003      	add	sp, #12
    10f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10f4:	000015dd 	.word	0x000015dd

000010f8 <_can_enable_peripheral_clock>:
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
}

static void _can_enable_peripheral_clock(struct can_module *const module_inst)
{
	if (module_inst->hw == CAN0) {
    10f8:	6803      	ldr	r3, [r0, #0]
    10fa:	4a0a      	ldr	r2, [pc, #40]	; (1124 <_can_enable_peripheral_clock+0x2c>)
    10fc:	4293      	cmp	r3, r2
    10fe:	d003      	beq.n	1108 <_can_enable_peripheral_clock+0x10>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN0);
	} else if (module_inst->hw == CAN1) {
    1100:	4a09      	ldr	r2, [pc, #36]	; (1128 <_can_enable_peripheral_clock+0x30>)
    1102:	4293      	cmp	r3, r2
    1104:	d007      	beq.n	1116 <_can_enable_peripheral_clock+0x1e>
		/* Turn on the digital interface clock. */
		system_ahb_clock_set_mask(MCLK_AHBMASK_CAN1);
	}
}
    1106:	4770      	bx	lr
	MCLK->AHBMASK.reg |= ahb_mask;
    1108:	4a08      	ldr	r2, [pc, #32]	; (112c <_can_enable_peripheral_clock+0x34>)
    110a:	6911      	ldr	r1, [r2, #16]
    110c:	2380      	movs	r3, #128	; 0x80
    110e:	005b      	lsls	r3, r3, #1
    1110:	430b      	orrs	r3, r1
    1112:	6113      	str	r3, [r2, #16]
    1114:	e7f7      	b.n	1106 <_can_enable_peripheral_clock+0xe>
    1116:	4a05      	ldr	r2, [pc, #20]	; (112c <_can_enable_peripheral_clock+0x34>)
    1118:	6911      	ldr	r1, [r2, #16]
    111a:	2380      	movs	r3, #128	; 0x80
    111c:	009b      	lsls	r3, r3, #2
    111e:	430b      	orrs	r3, r1
    1120:	6113      	str	r3, [r2, #16]
    1122:	e7f0      	b.n	1106 <_can_enable_peripheral_clock+0xe>
    1124:	42001c00 	.word	0x42001c00
    1128:	42002000 	.word	0x42002000
    112c:	40000800 	.word	0x40000800

00001130 <can_init>:

void can_init(struct can_module *const module_inst, Can *hw,
		struct can_config *config)
{
    1130:	b570      	push	{r4, r5, r6, lr}
    1132:	000c      	movs	r4, r1
    1134:	0015      	movs	r5, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    1136:	6001      	str	r1, [r0, #0]

	/* Enable peripheral clock */
	_can_enable_peripheral_clock(module_inst);
    1138:	4ba3      	ldr	r3, [pc, #652]	; (13c8 <can_init+0x298>)
    113a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    113c:	4ba3      	ldr	r3, [pc, #652]	; (13cc <can_init+0x29c>)
    113e:	2200      	movs	r2, #0
    1140:	701a      	strb	r2, [r3, #0]

	/* Configure GCLK channel */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
    1142:	782a      	ldrb	r2, [r5, #0]
    1144:	701a      	strb	r2, [r3, #0]

	if (hw == CAN0) {
    1146:	4ba2      	ldr	r3, [pc, #648]	; (13d0 <can_init+0x2a0>)
    1148:	429c      	cmp	r4, r3
    114a:	d100      	bne.n	114e <can_init+0x1e>
    114c:	e0c6      	b.n	12dc <can_init+0x1ac>
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
		system_gclk_chan_enable(CAN0_GCLK_ID);
	} else if (hw == CAN1) {
    114e:	4ba1      	ldr	r3, [pc, #644]	; (13d4 <can_init+0x2a4>)
    1150:	429c      	cmp	r4, r3
    1152:	d100      	bne.n	1156 <can_init+0x26>
    1154:	e0fd      	b.n	1352 <can_init+0x222>
		system_gclk_chan_enable(CAN1_GCLK_ID);
	}


	/* Configuration Change Enable. */
	hw->CCCR.reg |= CAN_CCCR_CCE;
    1156:	69a3      	ldr	r3, [r4, #24]
    1158:	2202      	movs	r2, #2
    115a:	4313      	orrs	r3, r2
    115c:	61a3      	str	r3, [r4, #24]
		hw->RXESC.reg = CAN_RXESC_RBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4) |
    115e:	2300      	movs	r3, #0
    1160:	22bc      	movs	r2, #188	; 0xbc
    1162:	50a3      	str	r3, [r4, r2]
		hw->TXESC.reg = CAN_TXESC_TBDS((CONF_CAN_ELEMENT_DATA_SIZE - 8) / 4);
    1164:	320c      	adds	r2, #12
    1166:	50a3      	str	r3, [r4, r2]
	hw->NBTP.reg = CAN_NBTP_NBRP(CONF_CAN_NBTP_NBRP_VALUE) |
    1168:	4b9b      	ldr	r3, [pc, #620]	; (13d8 <can_init+0x2a8>)
    116a:	61e3      	str	r3, [r4, #28]
	hw->DBTP.reg = CAN_DBTP_DBRP(CONF_CAN_DBTP_DBRP_VALUE) |
    116c:	4b9b      	ldr	r3, [pc, #620]	; (13dc <can_init+0x2ac>)
    116e:	60e3      	str	r3, [r4, #12]
	if (config->tdc_enable) {
    1170:	7bab      	ldrb	r3, [r5, #14]
    1172:	2b00      	cmp	r3, #0
    1174:	d004      	beq.n	1180 <can_init+0x50>
		hw->DBTP.reg |= CAN_DBTP_TDC;
    1176:	68e2      	ldr	r2, [r4, #12]
    1178:	2380      	movs	r3, #128	; 0x80
    117a:	041b      	lsls	r3, r3, #16
    117c:	4313      	orrs	r3, r2
    117e:	60e3      	str	r3, [r4, #12]
	if (config->run_in_standby) {
    1180:	786b      	ldrb	r3, [r5, #1]
    1182:	2b00      	cmp	r3, #0
    1184:	d003      	beq.n	118e <can_init+0x5e>
		hw->MRCFG.reg |= 0x01<<6;
    1186:	68a3      	ldr	r3, [r4, #8]
    1188:	2240      	movs	r2, #64	; 0x40
    118a:	4313      	orrs	r3, r2
    118c:	60a3      	str	r3, [r4, #8]
	hw->RWD.reg |= CAN_RWD_WDC(config->watchdog_configuration);
    118e:	6962      	ldr	r2, [r4, #20]
    1190:	78ab      	ldrb	r3, [r5, #2]
    1192:	4313      	orrs	r3, r2
    1194:	6163      	str	r3, [r4, #20]
	if (config->transmit_pause) {
    1196:	78eb      	ldrb	r3, [r5, #3]
    1198:	2b00      	cmp	r3, #0
    119a:	d004      	beq.n	11a6 <can_init+0x76>
		hw->CCCR.reg |= CAN_CCCR_TXP;
    119c:	69a2      	ldr	r2, [r4, #24]
    119e:	2380      	movs	r3, #128	; 0x80
    11a0:	01db      	lsls	r3, r3, #7
    11a2:	4313      	orrs	r3, r2
    11a4:	61a3      	str	r3, [r4, #24]
	if (config->edge_filtering) {
    11a6:	792b      	ldrb	r3, [r5, #4]
    11a8:	2b00      	cmp	r3, #0
    11aa:	d004      	beq.n	11b6 <can_init+0x86>
		hw->CCCR.reg |= CAN_CCCR_EFBI;
    11ac:	69a2      	ldr	r2, [r4, #24]
    11ae:	2380      	movs	r3, #128	; 0x80
    11b0:	019b      	lsls	r3, r3, #6
    11b2:	4313      	orrs	r3, r2
    11b4:	61a3      	str	r3, [r4, #24]
	if (config->protocol_exception_handling) {
    11b6:	796b      	ldrb	r3, [r5, #5]
    11b8:	2b00      	cmp	r3, #0
    11ba:	d004      	beq.n	11c6 <can_init+0x96>
		hw->CCCR.reg |= CAN_CCCR_PXHD;
    11bc:	69a2      	ldr	r2, [r4, #24]
    11be:	2380      	movs	r3, #128	; 0x80
    11c0:	015b      	lsls	r3, r3, #5
    11c2:	4313      	orrs	r3, r2
    11c4:	61a3      	str	r3, [r4, #24]
	if (!config->automatic_retransmission) {
    11c6:	79ab      	ldrb	r3, [r5, #6]
    11c8:	2b00      	cmp	r3, #0
    11ca:	d103      	bne.n	11d4 <can_init+0xa4>
		hw->CCCR.reg |= CAN_CCCR_DAR;
    11cc:	69a3      	ldr	r3, [r4, #24]
    11ce:	2240      	movs	r2, #64	; 0x40
    11d0:	4313      	orrs	r3, r2
    11d2:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_request) {
    11d4:	79eb      	ldrb	r3, [r5, #7]
    11d6:	2b00      	cmp	r3, #0
    11d8:	d003      	beq.n	11e2 <can_init+0xb2>
		hw->CCCR.reg |= CAN_CCCR_CSR;
    11da:	69a3      	ldr	r3, [r4, #24]
    11dc:	2210      	movs	r2, #16
    11de:	4313      	orrs	r3, r2
    11e0:	61a3      	str	r3, [r4, #24]
	if (config->clock_stop_acknowledge) {
    11e2:	7a2b      	ldrb	r3, [r5, #8]
    11e4:	2b00      	cmp	r3, #0
    11e6:	d003      	beq.n	11f0 <can_init+0xc0>
		hw->CCCR.reg |= CAN_CCCR_CSA;
    11e8:	69a3      	ldr	r3, [r4, #24]
    11ea:	2208      	movs	r2, #8
    11ec:	4313      	orrs	r3, r2
    11ee:	61a3      	str	r3, [r4, #24]
	hw->TSCC.reg = CAN_TSCC_TCP(config->timestamp_prescaler) |
    11f0:	7a6b      	ldrb	r3, [r5, #9]
    11f2:	041b      	lsls	r3, r3, #16
    11f4:	22f0      	movs	r2, #240	; 0xf0
    11f6:	0312      	lsls	r2, r2, #12
    11f8:	4013      	ands	r3, r2
    11fa:	2201      	movs	r2, #1
    11fc:	4313      	orrs	r3, r2
    11fe:	6223      	str	r3, [r4, #32]
			config->timeout_mode | config->timeout_enable;
    1200:	7b2b      	ldrb	r3, [r5, #12]
    1202:	7b6a      	ldrb	r2, [r5, #13]
    1204:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    1206:	896a      	ldrh	r2, [r5, #10]
    1208:	0412      	lsls	r2, r2, #16
			config->timeout_mode | config->timeout_enable;
    120a:	4313      	orrs	r3, r2
	hw->TOCC.reg = CAN_TOCC_TOP(config->timeout_period) |
    120c:	62a3      	str	r3, [r4, #40]	; 0x28
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    120e:	7beb      	ldrb	r3, [r5, #15]
    1210:	021b      	lsls	r3, r3, #8
    1212:	22fe      	movs	r2, #254	; 0xfe
    1214:	01d2      	lsls	r2, r2, #7
    1216:	4013      	ands	r3, r2
			CAN_TDCR_TDCF(config->delay_compensation_filter_window_length);
    1218:	7c29      	ldrb	r1, [r5, #16]
    121a:	227f      	movs	r2, #127	; 0x7f
    121c:	400a      	ands	r2, r1
	hw->TDCR.reg = CAN_TDCR_TDCO(config->delay_compensation_offset) |
    121e:	4313      	orrs	r3, r2
    1220:	64a3      	str	r3, [r4, #72]	; 0x48
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
    1222:	7c6a      	ldrb	r2, [r5, #17]
    1224:	0112      	lsls	r2, r2, #4
    1226:	2330      	movs	r3, #48	; 0x30
    1228:	4013      	ands	r3, r2
			CAN_GFC_ANFE(config->nonmatching_frames_action_extended);
    122a:	7ca9      	ldrb	r1, [r5, #18]
    122c:	0089      	lsls	r1, r1, #2
    122e:	220c      	movs	r2, #12
    1230:	400a      	ands	r2, r1
	hw->GFC.reg = CAN_GFC_ANFS(config->nonmatching_frames_action_standard) |
    1232:	4313      	orrs	r3, r2
    1234:	2280      	movs	r2, #128	; 0x80
    1236:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_standard_reject) {
    1238:	7ceb      	ldrb	r3, [r5, #19]
    123a:	2b00      	cmp	r3, #0
    123c:	d003      	beq.n	1246 <can_init+0x116>
		hw->GFC.reg |= CAN_GFC_RRFS;
    123e:	58a3      	ldr	r3, [r4, r2]
    1240:	2102      	movs	r1, #2
    1242:	430b      	orrs	r3, r1
    1244:	50a3      	str	r3, [r4, r2]
	if (config->remote_frames_extended_reject) {
    1246:	7d2b      	ldrb	r3, [r5, #20]
    1248:	2b00      	cmp	r3, #0
    124a:	d004      	beq.n	1256 <can_init+0x126>
		hw->GFC.reg |= CAN_GFC_RRFE;
    124c:	2280      	movs	r2, #128	; 0x80
    124e:	58a3      	ldr	r3, [r4, r2]
    1250:	2101      	movs	r1, #1
    1252:	430b      	orrs	r3, r1
    1254:	50a3      	str	r3, [r4, r2]
	hw->XIDAM.reg = config->extended_id_mask;
    1256:	2390      	movs	r3, #144	; 0x90
    1258:	69aa      	ldr	r2, [r5, #24]
    125a:	50e2      	str	r2, [r4, r3]
	if (config->rx_fifo_0_overwrite) {
    125c:	7f2b      	ldrb	r3, [r5, #28]
    125e:	2b00      	cmp	r3, #0
    1260:	d005      	beq.n	126e <can_init+0x13e>
		hw->RXF0C.reg |= CAN_RXF0C_F0OM;
    1262:	22a0      	movs	r2, #160	; 0xa0
    1264:	58a1      	ldr	r1, [r4, r2]
    1266:	2380      	movs	r3, #128	; 0x80
    1268:	061b      	lsls	r3, r3, #24
    126a:	430b      	orrs	r3, r1
    126c:	50a3      	str	r3, [r4, r2]
	hw->RXF0C.reg |= CAN_RXF0C_F0WM(config->rx_fifo_0_watermark);
    126e:	22a0      	movs	r2, #160	; 0xa0
    1270:	58a1      	ldr	r1, [r4, r2]
    1272:	7f6b      	ldrb	r3, [r5, #29]
    1274:	061b      	lsls	r3, r3, #24
    1276:	20fe      	movs	r0, #254	; 0xfe
    1278:	05c0      	lsls	r0, r0, #23
    127a:	4003      	ands	r3, r0
    127c:	430b      	orrs	r3, r1
    127e:	50a3      	str	r3, [r4, r2]
	if (config->rx_fifo_1_overwrite) {
    1280:	7fab      	ldrb	r3, [r5, #30]
    1282:	2b00      	cmp	r3, #0
    1284:	d005      	beq.n	1292 <can_init+0x162>
		hw->RXF1C.reg |= CAN_RXF1C_F1OM;
    1286:	3210      	adds	r2, #16
    1288:	58a1      	ldr	r1, [r4, r2]
    128a:	2380      	movs	r3, #128	; 0x80
    128c:	061b      	lsls	r3, r3, #24
    128e:	430b      	orrs	r3, r1
    1290:	50a3      	str	r3, [r4, r2]
	hw->RXF1C.reg |= CAN_RXF1C_F1WM(config->rx_fifo_1_watermark);
    1292:	22b0      	movs	r2, #176	; 0xb0
    1294:	58a1      	ldr	r1, [r4, r2]
    1296:	7feb      	ldrb	r3, [r5, #31]
    1298:	061b      	lsls	r3, r3, #24
    129a:	20fe      	movs	r0, #254	; 0xfe
    129c:	05c0      	lsls	r0, r0, #23
    129e:	4003      	ands	r3, r0
    12a0:	430b      	orrs	r3, r1
    12a2:	50a3      	str	r3, [r4, r2]
	if (config->tx_queue_mode) {
    12a4:	2320      	movs	r3, #32
    12a6:	5ceb      	ldrb	r3, [r5, r3]
    12a8:	2b00      	cmp	r3, #0
    12aa:	d005      	beq.n	12b8 <can_init+0x188>
		hw->TXBC.reg |= CAN_TXBC_TFQM;
    12ac:	3210      	adds	r2, #16
    12ae:	58a1      	ldr	r1, [r4, r2]
    12b0:	2380      	movs	r3, #128	; 0x80
    12b2:	05db      	lsls	r3, r3, #23
    12b4:	430b      	orrs	r3, r1
    12b6:	50a3      	str	r3, [r4, r2]
	hw->TXEFC.reg |= CAN_TXEFC_EFWM(config->tx_event_fifo_watermark);
    12b8:	22f0      	movs	r2, #240	; 0xf0
    12ba:	58a1      	ldr	r1, [r4, r2]
    12bc:	2321      	movs	r3, #33	; 0x21
    12be:	5ceb      	ldrb	r3, [r5, r3]
    12c0:	061b      	lsls	r3, r3, #24
    12c2:	20fc      	movs	r0, #252	; 0xfc
    12c4:	0580      	lsls	r0, r0, #22
    12c6:	4003      	ands	r3, r0
    12c8:	430b      	orrs	r3, r1
    12ca:	50a3      	str	r3, [r4, r2]

	/* Set the configuration. */
	_can_set_configuration(hw, config);

	/* Enable the interrupt setting which no need change. */
	hw->ILE.reg = CAN_ILE_EINT0 | CAN_ILE_EINT1;
    12cc:	2303      	movs	r3, #3
    12ce:	65e3      	str	r3, [r4, #92]	; 0x5c
	hw->TXBTIE.reg = CAN_TXBTIE_MASK;
    12d0:	3b04      	subs	r3, #4
    12d2:	3a10      	subs	r2, #16
    12d4:	50a3      	str	r3, [r4, r2]
	hw->TXBCIE.reg = CAN_TXBCIE_MASK;
    12d6:	3204      	adds	r2, #4
    12d8:	50a3      	str	r3, [r4, r2]
}
    12da:	bd70      	pop	{r4, r5, r6, pc}
		system_gclk_chan_set_config(CAN0_GCLK_ID, &gclk_chan_conf);
    12dc:	493b      	ldr	r1, [pc, #236]	; (13cc <can_init+0x29c>)
    12de:	201a      	movs	r0, #26
    12e0:	4b3f      	ldr	r3, [pc, #252]	; (13e0 <can_init+0x2b0>)
    12e2:	4798      	blx	r3
		system_gclk_chan_enable(CAN0_GCLK_ID);
    12e4:	201a      	movs	r0, #26
    12e6:	4b3f      	ldr	r3, [pc, #252]	; (13e4 <can_init+0x2b4>)
    12e8:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
    12ea:	4b39      	ldr	r3, [pc, #228]	; (13d0 <can_init+0x2a0>)
    12ec:	699a      	ldr	r2, [r3, #24]
    12ee:	2102      	movs	r1, #2
    12f0:	430a      	orrs	r2, r1
    12f2:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can0_rx_standard_filter) |
    12f4:	4a3c      	ldr	r2, [pc, #240]	; (13e8 <can_init+0x2b8>)
    12f6:	0412      	lsls	r2, r2, #16
    12f8:	0c12      	lsrs	r2, r2, #16
    12fa:	2180      	movs	r1, #128	; 0x80
    12fc:	02c9      	lsls	r1, r1, #11
    12fe:	430a      	orrs	r2, r1
    1300:	2084      	movs	r0, #132	; 0x84
    1302:	501a      	str	r2, [r3, r0]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can0_rx_extended_filter) |
    1304:	4a39      	ldr	r2, [pc, #228]	; (13ec <can_init+0x2bc>)
    1306:	0412      	lsls	r2, r2, #16
    1308:	0c12      	lsrs	r2, r2, #16
    130a:	2080      	movs	r0, #128	; 0x80
    130c:	0280      	lsls	r0, r0, #10
    130e:	4302      	orrs	r2, r0
    1310:	2088      	movs	r0, #136	; 0x88
    1312:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can0_rx_fifo_0) |
    1314:	4a36      	ldr	r2, [pc, #216]	; (13f0 <can_init+0x2c0>)
    1316:	0412      	lsls	r2, r2, #16
    1318:	0c12      	lsrs	r2, r2, #16
    131a:	430a      	orrs	r2, r1
    131c:	3018      	adds	r0, #24
    131e:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can0_rx_fifo_1) |
    1320:	4a34      	ldr	r2, [pc, #208]	; (13f4 <can_init+0x2c4>)
    1322:	0412      	lsls	r2, r2, #16
    1324:	0c12      	lsrs	r2, r2, #16
    1326:	430a      	orrs	r2, r1
    1328:	3010      	adds	r0, #16
    132a:	501a      	str	r2, [r3, r0]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can0_rx_buffer);
    132c:	4a32      	ldr	r2, [pc, #200]	; (13f8 <can_init+0x2c8>)
    132e:	0412      	lsls	r2, r2, #16
    1330:	0c12      	lsrs	r2, r2, #16
    1332:	3804      	subs	r0, #4
    1334:	501a      	str	r2, [r3, r0]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    1336:	4a31      	ldr	r2, [pc, #196]	; (13fc <can_init+0x2cc>)
    1338:	0412      	lsls	r2, r2, #16
    133a:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN0_TX_BUFFER_NUM) |
    133c:	4830      	ldr	r0, [pc, #192]	; (1400 <can_init+0x2d0>)
    133e:	4302      	orrs	r2, r0
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can0_tx_buffer) |
    1340:	20c0      	movs	r0, #192	; 0xc0
    1342:	501a      	str	r2, [r3, r0]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can0_tx_event_fifo) |
    1344:	4a2f      	ldr	r2, [pc, #188]	; (1404 <can_init+0x2d4>)
    1346:	0412      	lsls	r2, r2, #16
    1348:	0c12      	lsrs	r2, r2, #16
    134a:	4311      	orrs	r1, r2
    134c:	22f0      	movs	r2, #240	; 0xf0
    134e:	5099      	str	r1, [r3, r2]
    1350:	e705      	b.n	115e <can_init+0x2e>
		system_gclk_chan_set_config(CAN1_GCLK_ID, &gclk_chan_conf);
    1352:	491e      	ldr	r1, [pc, #120]	; (13cc <can_init+0x29c>)
    1354:	201b      	movs	r0, #27
    1356:	4b22      	ldr	r3, [pc, #136]	; (13e0 <can_init+0x2b0>)
    1358:	4798      	blx	r3
		system_gclk_chan_enable(CAN1_GCLK_ID);
    135a:	201b      	movs	r0, #27
    135c:	4b21      	ldr	r3, [pc, #132]	; (13e4 <can_init+0x2b4>)
    135e:	4798      	blx	r3
	hw->CCCR.reg |= CAN_CCCR_CCE;
    1360:	4b1c      	ldr	r3, [pc, #112]	; (13d4 <can_init+0x2a4>)
    1362:	699a      	ldr	r2, [r3, #24]
    1364:	2102      	movs	r1, #2
    1366:	430a      	orrs	r2, r1
    1368:	619a      	str	r2, [r3, #24]
		hw->SIDFC.reg = CAN_SIDFC_FLSSA((uint32_t)can1_rx_standard_filter) |
    136a:	4a27      	ldr	r2, [pc, #156]	; (1408 <can_init+0x2d8>)
    136c:	0412      	lsls	r2, r2, #16
    136e:	0c12      	lsrs	r2, r2, #16
    1370:	2180      	movs	r1, #128	; 0x80
    1372:	02c9      	lsls	r1, r1, #11
    1374:	430a      	orrs	r2, r1
    1376:	2084      	movs	r0, #132	; 0x84
    1378:	501a      	str	r2, [r3, r0]
		hw->XIDFC.reg = CAN_XIDFC_FLESA((uint32_t)can1_rx_extended_filter) |
    137a:	4a24      	ldr	r2, [pc, #144]	; (140c <can_init+0x2dc>)
    137c:	0412      	lsls	r2, r2, #16
    137e:	0c12      	lsrs	r2, r2, #16
    1380:	2080      	movs	r0, #128	; 0x80
    1382:	0280      	lsls	r0, r0, #10
    1384:	4302      	orrs	r2, r0
    1386:	2088      	movs	r0, #136	; 0x88
    1388:	501a      	str	r2, [r3, r0]
		hw->RXF0C.reg = CAN_RXF0C_F0SA((uint32_t)can1_rx_fifo_0) |
    138a:	4a21      	ldr	r2, [pc, #132]	; (1410 <can_init+0x2e0>)
    138c:	0412      	lsls	r2, r2, #16
    138e:	0c12      	lsrs	r2, r2, #16
    1390:	430a      	orrs	r2, r1
    1392:	3018      	adds	r0, #24
    1394:	501a      	str	r2, [r3, r0]
		hw->RXF1C.reg = CAN_RXF1C_F1SA((uint32_t)can1_rx_fifo_1) |
    1396:	4a1f      	ldr	r2, [pc, #124]	; (1414 <can_init+0x2e4>)
    1398:	0412      	lsls	r2, r2, #16
    139a:	0c12      	lsrs	r2, r2, #16
    139c:	430a      	orrs	r2, r1
    139e:	3010      	adds	r0, #16
    13a0:	501a      	str	r2, [r3, r0]
		hw->RXBC.reg = CAN_RXBC_RBSA((uint32_t)can1_rx_buffer);
    13a2:	4a1d      	ldr	r2, [pc, #116]	; (1418 <can_init+0x2e8>)
    13a4:	0412      	lsls	r2, r2, #16
    13a6:	0c12      	lsrs	r2, r2, #16
    13a8:	3804      	subs	r0, #4
    13aa:	501a      	str	r2, [r3, r0]
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    13ac:	4a1b      	ldr	r2, [pc, #108]	; (141c <can_init+0x2ec>)
    13ae:	0412      	lsls	r2, r2, #16
    13b0:	0c12      	lsrs	r2, r2, #16
				CAN_TXBC_NDTB(CONF_CAN1_TX_BUFFER_NUM) |
    13b2:	4813      	ldr	r0, [pc, #76]	; (1400 <can_init+0x2d0>)
    13b4:	4302      	orrs	r2, r0
		hw->TXBC.reg = CAN_TXBC_TBSA((uint32_t)can1_tx_buffer) |
    13b6:	20c0      	movs	r0, #192	; 0xc0
    13b8:	501a      	str	r2, [r3, r0]
		hw->TXEFC.reg = CAN_TXEFC_EFSA((uint32_t)can1_tx_event_fifo) |
    13ba:	4a19      	ldr	r2, [pc, #100]	; (1420 <can_init+0x2f0>)
    13bc:	0412      	lsls	r2, r2, #16
    13be:	0c12      	lsrs	r2, r2, #16
    13c0:	4311      	orrs	r1, r2
    13c2:	22f0      	movs	r2, #240	; 0xf0
    13c4:	5099      	str	r1, [r3, r2]
    13c6:	e6ca      	b.n	115e <can_init+0x2e>
    13c8:	000010f9 	.word	0x000010f9
    13cc:	20000484 	.word	0x20000484
    13d0:	42001c00 	.word	0x42001c00
    13d4:	42002000 	.word	0x42002000
    13d8:	06050a03 	.word	0x06050a03
    13dc:	00000a33 	.word	0x00000a33
    13e0:	0000261d 	.word	0x0000261d
    13e4:	000025ad 	.word	0x000025ad
    13e8:	2000018c 	.word	0x2000018c
    13ec:	200000fc 	.word	0x200000fc
    13f0:	2000010c 	.word	0x2000010c
    13f4:	2000014c 	.word	0x2000014c
    13f8:	200000bc 	.word	0x200000bc
    13fc:	2000019c 	.word	0x2000019c
    1400:	02020000 	.word	0x02020000
    1404:	200001dc 	.word	0x200001dc
    1408:	200002cc 	.word	0x200002cc
    140c:	2000023c 	.word	0x2000023c
    1410:	2000024c 	.word	0x2000024c
    1414:	2000028c 	.word	0x2000028c
    1418:	200001fc 	.word	0x200001fc
    141c:	200002dc 	.word	0x200002dc
    1420:	2000031c 	.word	0x2000031c

00001424 <can_start>:
			CAN_DBTP_DTSEG2(can_fd_dbtp_dtseg2_value);
}

void can_start(struct can_module *const module_inst)
{
	module_inst->hw->CCCR.reg &= ~CAN_CCCR_INIT;
    1424:	6802      	ldr	r2, [r0, #0]
    1426:	6993      	ldr	r3, [r2, #24]
    1428:	2101      	movs	r1, #1
    142a:	438b      	bics	r3, r1
    142c:	6193      	str	r3, [r2, #24]
	/* Wait for the sync. */
	while (module_inst->hw->CCCR.reg & CAN_CCCR_INIT);
    142e:	6801      	ldr	r1, [r0, #0]
    1430:	2201      	movs	r2, #1
    1432:	698b      	ldr	r3, [r1, #24]
    1434:	421a      	tst	r2, r3
    1436:	d1fc      	bne.n	1432 <can_start+0xe>
}
    1438:	4770      	bx	lr
	...

0000143c <can_set_rx_standard_filter>:
}

enum status_code can_set_rx_standard_filter(
		struct can_module *const module_inst,
		struct can_standard_message_filter_element *sd_filter, uint32_t index)
{
    143c:	b510      	push	{r4, lr}
	if (module_inst->hw == CAN0) {
    143e:	6803      	ldr	r3, [r0, #0]
    1440:	4809      	ldr	r0, [pc, #36]	; (1468 <can_set_rx_standard_filter+0x2c>)
    1442:	4283      	cmp	r3, r0
    1444:	d004      	beq.n	1450 <can_set_rx_standard_filter+0x14>
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1446:	4c09      	ldr	r4, [pc, #36]	; (146c <can_set_rx_standard_filter+0x30>)
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1448:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    144a:	42a3      	cmp	r3, r4
    144c:	d006      	beq.n	145c <can_set_rx_standard_filter+0x20>
}
    144e:	bd10      	pop	{r4, pc}
		can0_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
    1450:	6809      	ldr	r1, [r1, #0]
    1452:	0092      	lsls	r2, r2, #2
    1454:	4b06      	ldr	r3, [pc, #24]	; (1470 <can_set_rx_standard_filter+0x34>)
    1456:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    1458:	2000      	movs	r0, #0
    145a:	e7f8      	b.n	144e <can_set_rx_standard_filter+0x12>
		can1_rx_standard_filter[index].S0.reg = sd_filter->S0.reg;
    145c:	6809      	ldr	r1, [r1, #0]
    145e:	0092      	lsls	r2, r2, #2
    1460:	4b04      	ldr	r3, [pc, #16]	; (1474 <can_set_rx_standard_filter+0x38>)
    1462:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    1464:	2000      	movs	r0, #0
    1466:	e7f2      	b.n	144e <can_set_rx_standard_filter+0x12>
    1468:	42001c00 	.word	0x42001c00
    146c:	42002000 	.word	0x42002000
    1470:	2000018c 	.word	0x2000018c
    1474:	200002cc 	.word	0x200002cc

00001478 <can_get_rx_buffer_element>:
}

enum status_code can_get_rx_buffer_element(
		struct can_module *const module_inst,
		struct can_rx_element_buffer *rx_element, uint32_t index)
{
    1478:	b570      	push	{r4, r5, r6, lr}
    147a:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
    147c:	6803      	ldr	r3, [r0, #0]
    147e:	4c0d      	ldr	r4, [pc, #52]	; (14b4 <can_get_rx_buffer_element+0x3c>)
    1480:	42a3      	cmp	r3, r4
    1482:	d004      	beq.n	148e <can_get_rx_buffer_element+0x16>
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1484:	4c0c      	ldr	r4, [pc, #48]	; (14b8 <can_get_rx_buffer_element+0x40>)
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1486:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    1488:	42a3      	cmp	r3, r4
    148a:	d009      	beq.n	14a0 <can_get_rx_buffer_element+0x28>
}
    148c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    148e:	0112      	lsls	r2, r2, #4
    1490:	490a      	ldr	r1, [pc, #40]	; (14bc <can_get_rx_buffer_element+0x44>)
    1492:	1889      	adds	r1, r1, r2
    1494:	2210      	movs	r2, #16
    1496:	0028      	movs	r0, r5
    1498:	4b09      	ldr	r3, [pc, #36]	; (14c0 <can_get_rx_buffer_element+0x48>)
    149a:	4798      	blx	r3
		return STATUS_OK;
    149c:	2000      	movs	r0, #0
    149e:	e7f5      	b.n	148c <can_get_rx_buffer_element+0x14>
		memcpy(rx_element, &can1_rx_buffer[index], sizeof(struct can_rx_element_buffer));
    14a0:	0112      	lsls	r2, r2, #4
    14a2:	4908      	ldr	r1, [pc, #32]	; (14c4 <can_get_rx_buffer_element+0x4c>)
    14a4:	1889      	adds	r1, r1, r2
    14a6:	2210      	movs	r2, #16
    14a8:	0028      	movs	r0, r5
    14aa:	4b05      	ldr	r3, [pc, #20]	; (14c0 <can_get_rx_buffer_element+0x48>)
    14ac:	4798      	blx	r3
		return STATUS_OK;
    14ae:	2000      	movs	r0, #0
    14b0:	e7ec      	b.n	148c <can_get_rx_buffer_element+0x14>
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	42001c00 	.word	0x42001c00
    14b8:	42002000 	.word	0x42002000
    14bc:	200000bc 	.word	0x200000bc
    14c0:	00003e91 	.word	0x00003e91
    14c4:	200001fc 	.word	0x200001fc

000014c8 <can_get_rx_fifo_0_element>:

enum status_code can_get_rx_fifo_0_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_0 *rx_element, uint32_t index)
{
    14c8:	b570      	push	{r4, r5, r6, lr}
    14ca:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
    14cc:	6803      	ldr	r3, [r0, #0]
    14ce:	4c0d      	ldr	r4, [pc, #52]	; (1504 <can_get_rx_fifo_0_element+0x3c>)
    14d0:	42a3      	cmp	r3, r4
    14d2:	d004      	beq.n	14de <can_get_rx_fifo_0_element+0x16>
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    14d4:	4c0c      	ldr	r4, [pc, #48]	; (1508 <can_get_rx_fifo_0_element+0x40>)
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    14d6:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    14d8:	42a3      	cmp	r3, r4
    14da:	d009      	beq.n	14f0 <can_get_rx_fifo_0_element+0x28>
}
    14dc:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
    14de:	0112      	lsls	r2, r2, #4
    14e0:	490a      	ldr	r1, [pc, #40]	; (150c <can_get_rx_fifo_0_element+0x44>)
    14e2:	1889      	adds	r1, r1, r2
    14e4:	2210      	movs	r2, #16
    14e6:	0028      	movs	r0, r5
    14e8:	4b09      	ldr	r3, [pc, #36]	; (1510 <can_get_rx_fifo_0_element+0x48>)
    14ea:	4798      	blx	r3
		return STATUS_OK;
    14ec:	2000      	movs	r0, #0
    14ee:	e7f5      	b.n	14dc <can_get_rx_fifo_0_element+0x14>
		memcpy(rx_element, &can1_rx_fifo_0[index], sizeof(struct can_rx_element_buffer));
    14f0:	0112      	lsls	r2, r2, #4
    14f2:	4908      	ldr	r1, [pc, #32]	; (1514 <can_get_rx_fifo_0_element+0x4c>)
    14f4:	1889      	adds	r1, r1, r2
    14f6:	2210      	movs	r2, #16
    14f8:	0028      	movs	r0, r5
    14fa:	4b05      	ldr	r3, [pc, #20]	; (1510 <can_get_rx_fifo_0_element+0x48>)
    14fc:	4798      	blx	r3
		return STATUS_OK;
    14fe:	2000      	movs	r0, #0
    1500:	e7ec      	b.n	14dc <can_get_rx_fifo_0_element+0x14>
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	42001c00 	.word	0x42001c00
    1508:	42002000 	.word	0x42002000
    150c:	2000010c 	.word	0x2000010c
    1510:	00003e91 	.word	0x00003e91
    1514:	2000024c 	.word	0x2000024c

00001518 <can_get_rx_fifo_1_element>:

enum status_code can_get_rx_fifo_1_element(
		struct can_module *const module_inst,
		struct can_rx_element_fifo_1 *rx_element, uint32_t index)
{
    1518:	b570      	push	{r4, r5, r6, lr}
    151a:	000d      	movs	r5, r1
	if (module_inst->hw == CAN0) {
    151c:	6803      	ldr	r3, [r0, #0]
    151e:	4c0d      	ldr	r4, [pc, #52]	; (1554 <can_get_rx_fifo_1_element+0x3c>)
    1520:	42a3      	cmp	r3, r4
    1522:	d004      	beq.n	152e <can_get_rx_fifo_1_element+0x16>
		memcpy(rx_element, &can0_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1524:	4c0c      	ldr	r4, [pc, #48]	; (1558 <can_get_rx_fifo_1_element+0x40>)
		memcpy(rx_element, &can1_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1526:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    1528:	42a3      	cmp	r3, r4
    152a:	d009      	beq.n	1540 <can_get_rx_fifo_1_element+0x28>
}
    152c:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rx_element, &can0_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
    152e:	0112      	lsls	r2, r2, #4
    1530:	490a      	ldr	r1, [pc, #40]	; (155c <can_get_rx_fifo_1_element+0x44>)
    1532:	1889      	adds	r1, r1, r2
    1534:	2210      	movs	r2, #16
    1536:	0028      	movs	r0, r5
    1538:	4b09      	ldr	r3, [pc, #36]	; (1560 <can_get_rx_fifo_1_element+0x48>)
    153a:	4798      	blx	r3
		return STATUS_OK;
    153c:	2000      	movs	r0, #0
    153e:	e7f5      	b.n	152c <can_get_rx_fifo_1_element+0x14>
		memcpy(rx_element, &can1_rx_fifo_1[index], sizeof(struct can_rx_element_buffer));
    1540:	0112      	lsls	r2, r2, #4
    1542:	4908      	ldr	r1, [pc, #32]	; (1564 <can_get_rx_fifo_1_element+0x4c>)
    1544:	1889      	adds	r1, r1, r2
    1546:	2210      	movs	r2, #16
    1548:	0028      	movs	r0, r5
    154a:	4b05      	ldr	r3, [pc, #20]	; (1560 <can_get_rx_fifo_1_element+0x48>)
    154c:	4798      	blx	r3
		return STATUS_OK;
    154e:	2000      	movs	r0, #0
    1550:	e7ec      	b.n	152c <can_get_rx_fifo_1_element+0x14>
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	42001c00 	.word	0x42001c00
    1558:	42002000 	.word	0x42002000
    155c:	2000014c 	.word	0x2000014c
    1560:	00003e91 	.word	0x00003e91
    1564:	2000028c 	.word	0x2000028c

00001568 <can_set_tx_buffer_element>:

enum status_code can_set_tx_buffer_element(
		struct can_module *const module_inst,
		struct can_tx_element *tx_element, uint32_t index)
{
    1568:	b510      	push	{r4, lr}
	uint32_t i;
	if (module_inst->hw == CAN0) {
    156a:	6803      	ldr	r3, [r0, #0]
    156c:	4817      	ldr	r0, [pc, #92]	; (15cc <can_set_tx_buffer_element+0x64>)
    156e:	4283      	cmp	r3, r0
    1570:	d004      	beq.n	157c <can_set_tx_buffer_element+0x14>
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can0_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	} else if (module_inst->hw == CAN1) {
    1572:	4c17      	ldr	r4, [pc, #92]	; (15d0 <can_set_tx_buffer_element+0x68>)
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
			can1_tx_buffer[index].data[i] = tx_element->data[i];
		}
		return STATUS_OK;
	}
	return STATUS_ERR_INVALID_ARG;
    1574:	2017      	movs	r0, #23
	} else if (module_inst->hw == CAN1) {
    1576:	42a3      	cmp	r3, r4
    1578:	d014      	beq.n	15a4 <can_set_tx_buffer_element+0x3c>
}
    157a:	bd10      	pop	{r4, pc}
		can0_tx_buffer[index].T0.reg = tx_element->T0.reg;
    157c:	680b      	ldr	r3, [r1, #0]
    157e:	4815      	ldr	r0, [pc, #84]	; (15d4 <can_set_tx_buffer_element+0x6c>)
    1580:	0112      	lsls	r2, r2, #4
    1582:	5013      	str	r3, [r2, r0]
		can0_tx_buffer[index].T1.reg = tx_element->T1.reg;
    1584:	684c      	ldr	r4, [r1, #4]
    1586:	1883      	adds	r3, r0, r2
    1588:	605c      	str	r4, [r3, #4]
    158a:	000b      	movs	r3, r1
    158c:	3308      	adds	r3, #8
    158e:	3208      	adds	r2, #8
    1590:	1882      	adds	r2, r0, r2
    1592:	3110      	adds	r1, #16
			can0_tx_buffer[index].data[i] = tx_element->data[i];
    1594:	7818      	ldrb	r0, [r3, #0]
    1596:	7010      	strb	r0, [r2, #0]
    1598:	3301      	adds	r3, #1
    159a:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    159c:	428b      	cmp	r3, r1
    159e:	d1f9      	bne.n	1594 <can_set_tx_buffer_element+0x2c>
		return STATUS_OK;
    15a0:	2000      	movs	r0, #0
    15a2:	e7ea      	b.n	157a <can_set_tx_buffer_element+0x12>
		can1_tx_buffer[index].T0.reg = tx_element->T0.reg;
    15a4:	680b      	ldr	r3, [r1, #0]
    15a6:	480c      	ldr	r0, [pc, #48]	; (15d8 <can_set_tx_buffer_element+0x70>)
    15a8:	0112      	lsls	r2, r2, #4
    15aa:	5013      	str	r3, [r2, r0]
		can1_tx_buffer[index].T1.reg = tx_element->T1.reg;
    15ac:	684c      	ldr	r4, [r1, #4]
    15ae:	1883      	adds	r3, r0, r2
    15b0:	605c      	str	r4, [r3, #4]
    15b2:	000b      	movs	r3, r1
    15b4:	3308      	adds	r3, #8
    15b6:	3208      	adds	r2, #8
    15b8:	1882      	adds	r2, r0, r2
    15ba:	3110      	adds	r1, #16
			can1_tx_buffer[index].data[i] = tx_element->data[i];
    15bc:	7818      	ldrb	r0, [r3, #0]
    15be:	7010      	strb	r0, [r2, #0]
    15c0:	3301      	adds	r3, #1
    15c2:	3201      	adds	r2, #1
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    15c4:	428b      	cmp	r3, r1
    15c6:	d1f9      	bne.n	15bc <can_set_tx_buffer_element+0x54>
		return STATUS_OK;
    15c8:	2000      	movs	r0, #0
    15ca:	e7d6      	b.n	157a <can_set_tx_buffer_element+0x12>
    15cc:	42001c00 	.word	0x42001c00
    15d0:	42002000 	.word	0x42002000
    15d4:	2000019c 	.word	0x2000019c
    15d8:	200002dc 	.word	0x200002dc

000015dc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    15dc:	b500      	push	{lr}
    15de:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    15e0:	ab01      	add	r3, sp, #4
    15e2:	2280      	movs	r2, #128	; 0x80
    15e4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    15e6:	780a      	ldrb	r2, [r1, #0]
    15e8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    15ea:	784a      	ldrb	r2, [r1, #1]
    15ec:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    15ee:	788a      	ldrb	r2, [r1, #2]
    15f0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    15f2:	0019      	movs	r1, r3
    15f4:	4b01      	ldr	r3, [pc, #4]	; (15fc <port_pin_set_config+0x20>)
    15f6:	4798      	blx	r3
}
    15f8:	b003      	add	sp, #12
    15fa:	bd00      	pop	{pc}
    15fc:	00002719 	.word	0x00002719

00001600 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1600:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1602:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1604:	2340      	movs	r3, #64	; 0x40
    1606:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1608:	4281      	cmp	r1, r0
    160a:	d202      	bcs.n	1612 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    160c:	0018      	movs	r0, r3
    160e:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1610:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1612:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1614:	1c63      	adds	r3, r4, #1
    1616:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1618:	4288      	cmp	r0, r1
    161a:	d9f9      	bls.n	1610 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    161c:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    161e:	2cff      	cmp	r4, #255	; 0xff
    1620:	d8f4      	bhi.n	160c <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1622:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1624:	2300      	movs	r3, #0
    1626:	e7f1      	b.n	160c <_sercom_get_sync_baud_val+0xc>

00001628 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1628:	b5f0      	push	{r4, r5, r6, r7, lr}
    162a:	46de      	mov	lr, fp
    162c:	4657      	mov	r7, sl
    162e:	464e      	mov	r6, r9
    1630:	4645      	mov	r5, r8
    1632:	b5e0      	push	{r5, r6, r7, lr}
    1634:	b089      	sub	sp, #36	; 0x24
    1636:	000c      	movs	r4, r1
    1638:	9205      	str	r2, [sp, #20]
    163a:	aa12      	add	r2, sp, #72	; 0x48
    163c:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    163e:	0005      	movs	r5, r0
    1640:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1642:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1644:	42a5      	cmp	r5, r4
    1646:	d907      	bls.n	1658 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1648:	0010      	movs	r0, r2
    164a:	b009      	add	sp, #36	; 0x24
    164c:	bc3c      	pop	{r2, r3, r4, r5}
    164e:	4690      	mov	r8, r2
    1650:	4699      	mov	r9, r3
    1652:	46a2      	mov	sl, r4
    1654:	46ab      	mov	fp, r5
    1656:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1658:	2b00      	cmp	r3, #0
    165a:	d155      	bne.n	1708 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    165c:	0002      	movs	r2, r0
    165e:	0008      	movs	r0, r1
    1660:	2100      	movs	r1, #0
    1662:	4d63      	ldr	r5, [pc, #396]	; (17f0 <_sercom_get_async_baud_val+0x1c8>)
    1664:	47a8      	blx	r5
    1666:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    1668:	0026      	movs	r6, r4
    166a:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
    166c:	2300      	movs	r3, #0
    166e:	2400      	movs	r4, #0
    1670:	9300      	str	r3, [sp, #0]
    1672:	9401      	str	r4, [sp, #4]
    1674:	2200      	movs	r2, #0
    1676:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    1678:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    167a:	2120      	movs	r1, #32
    167c:	468c      	mov	ip, r1
    167e:	391f      	subs	r1, #31
    1680:	9602      	str	r6, [sp, #8]
    1682:	9703      	str	r7, [sp, #12]
    1684:	e014      	b.n	16b0 <_sercom_get_async_baud_val+0x88>
    1686:	4664      	mov	r4, ip
    1688:	1a24      	subs	r4, r4, r0
    168a:	000d      	movs	r5, r1
    168c:	40e5      	lsrs	r5, r4
    168e:	46a8      	mov	r8, r5
    1690:	e015      	b.n	16be <_sercom_get_async_baud_val+0x96>
			r = r - d;
    1692:	9c02      	ldr	r4, [sp, #8]
    1694:	9d03      	ldr	r5, [sp, #12]
    1696:	1b12      	subs	r2, r2, r4
    1698:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    169a:	464d      	mov	r5, r9
    169c:	9e00      	ldr	r6, [sp, #0]
    169e:	9f01      	ldr	r7, [sp, #4]
    16a0:	4335      	orrs	r5, r6
    16a2:	003c      	movs	r4, r7
    16a4:	4646      	mov	r6, r8
    16a6:	4334      	orrs	r4, r6
    16a8:	9500      	str	r5, [sp, #0]
    16aa:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
    16ac:	3801      	subs	r0, #1
    16ae:	d31d      	bcc.n	16ec <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
    16b0:	2420      	movs	r4, #32
    16b2:	4264      	negs	r4, r4
    16b4:	1904      	adds	r4, r0, r4
    16b6:	d4e6      	bmi.n	1686 <_sercom_get_async_baud_val+0x5e>
    16b8:	000d      	movs	r5, r1
    16ba:	40a5      	lsls	r5, r4
    16bc:	46a8      	mov	r8, r5
    16be:	000c      	movs	r4, r1
    16c0:	4084      	lsls	r4, r0
    16c2:	46a1      	mov	r9, r4
		r = r << 1;
    16c4:	1892      	adds	r2, r2, r2
    16c6:	415b      	adcs	r3, r3
    16c8:	0014      	movs	r4, r2
    16ca:	001d      	movs	r5, r3
		if (n & bit_shift) {
    16cc:	4646      	mov	r6, r8
    16ce:	465f      	mov	r7, fp
    16d0:	423e      	tst	r6, r7
    16d2:	d003      	beq.n	16dc <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
    16d4:	000e      	movs	r6, r1
    16d6:	4326      	orrs	r6, r4
    16d8:	0032      	movs	r2, r6
    16da:	002b      	movs	r3, r5
		if (r >= d) {
    16dc:	9c02      	ldr	r4, [sp, #8]
    16de:	9d03      	ldr	r5, [sp, #12]
    16e0:	429d      	cmp	r5, r3
    16e2:	d8e3      	bhi.n	16ac <_sercom_get_async_baud_val+0x84>
    16e4:	d1d5      	bne.n	1692 <_sercom_get_async_baud_val+0x6a>
    16e6:	4294      	cmp	r4, r2
    16e8:	d8e0      	bhi.n	16ac <_sercom_get_async_baud_val+0x84>
    16ea:	e7d2      	b.n	1692 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
    16ec:	2200      	movs	r2, #0
    16ee:	2301      	movs	r3, #1
    16f0:	9800      	ldr	r0, [sp, #0]
    16f2:	9901      	ldr	r1, [sp, #4]
    16f4:	1a12      	subs	r2, r2, r0
    16f6:	418b      	sbcs	r3, r1
    16f8:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
    16fa:	0c13      	lsrs	r3, r2, #16
    16fc:	040a      	lsls	r2, r1, #16
    16fe:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1700:	9b05      	ldr	r3, [sp, #20]
    1702:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    1704:	2200      	movs	r2, #0
    1706:	e79f      	b.n	1648 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
    1708:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    170a:	2b01      	cmp	r3, #1
    170c:	d1f8      	bne.n	1700 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    170e:	0f63      	lsrs	r3, r4, #29
    1710:	9304      	str	r3, [sp, #16]
    1712:	00e3      	lsls	r3, r4, #3
    1714:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
    1716:	000a      	movs	r2, r1
    1718:	2300      	movs	r3, #0
    171a:	2100      	movs	r1, #0
    171c:	4c34      	ldr	r4, [pc, #208]	; (17f0 <_sercom_get_async_baud_val+0x1c8>)
    171e:	47a0      	blx	r4
    1720:	0004      	movs	r4, r0
    1722:	000d      	movs	r5, r1
    1724:	2300      	movs	r3, #0
    1726:	469c      	mov	ip, r3
    1728:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
    172a:	3320      	adds	r3, #32
    172c:	469b      	mov	fp, r3
    172e:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
    1730:	4663      	mov	r3, ip
    1732:	9307      	str	r3, [sp, #28]
    1734:	e048      	b.n	17c8 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
    1736:	4659      	mov	r1, fp
    1738:	1bc9      	subs	r1, r1, r7
    173a:	0030      	movs	r0, r6
    173c:	40c8      	lsrs	r0, r1
    173e:	4682      	mov	sl, r0
    1740:	e010      	b.n	1764 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
    1742:	9800      	ldr	r0, [sp, #0]
    1744:	9901      	ldr	r1, [sp, #4]
    1746:	1a12      	subs	r2, r2, r0
    1748:	418b      	sbcs	r3, r1
			q |= bit_shift;
    174a:	9902      	ldr	r1, [sp, #8]
    174c:	4648      	mov	r0, r9
    174e:	4301      	orrs	r1, r0
    1750:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
    1752:	3f01      	subs	r7, #1
    1754:	d325      	bcc.n	17a2 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
    1756:	2120      	movs	r1, #32
    1758:	4249      	negs	r1, r1
    175a:	1879      	adds	r1, r7, r1
    175c:	d4eb      	bmi.n	1736 <_sercom_get_async_baud_val+0x10e>
    175e:	0030      	movs	r0, r6
    1760:	4088      	lsls	r0, r1
    1762:	4682      	mov	sl, r0
    1764:	0031      	movs	r1, r6
    1766:	40b9      	lsls	r1, r7
    1768:	4689      	mov	r9, r1
		r = r << 1;
    176a:	1892      	adds	r2, r2, r2
    176c:	415b      	adcs	r3, r3
    176e:	0010      	movs	r0, r2
    1770:	0019      	movs	r1, r3
		if (n & bit_shift) {
    1772:	4644      	mov	r4, r8
    1774:	464d      	mov	r5, r9
    1776:	402c      	ands	r4, r5
    1778:	46a4      	mov	ip, r4
    177a:	4654      	mov	r4, sl
    177c:	9d04      	ldr	r5, [sp, #16]
    177e:	402c      	ands	r4, r5
    1780:	46a2      	mov	sl, r4
    1782:	4664      	mov	r4, ip
    1784:	4655      	mov	r5, sl
    1786:	432c      	orrs	r4, r5
    1788:	d003      	beq.n	1792 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
    178a:	0034      	movs	r4, r6
    178c:	4304      	orrs	r4, r0
    178e:	0022      	movs	r2, r4
    1790:	000b      	movs	r3, r1
		if (r >= d) {
    1792:	9800      	ldr	r0, [sp, #0]
    1794:	9901      	ldr	r1, [sp, #4]
    1796:	4299      	cmp	r1, r3
    1798:	d8db      	bhi.n	1752 <_sercom_get_async_baud_val+0x12a>
    179a:	d1d2      	bne.n	1742 <_sercom_get_async_baud_val+0x11a>
    179c:	4290      	cmp	r0, r2
    179e:	d8d8      	bhi.n	1752 <_sercom_get_async_baud_val+0x12a>
    17a0:	e7cf      	b.n	1742 <_sercom_get_async_baud_val+0x11a>
    17a2:	9c00      	ldr	r4, [sp, #0]
    17a4:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
    17a6:	9902      	ldr	r1, [sp, #8]
    17a8:	9a07      	ldr	r2, [sp, #28]
    17aa:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
    17ac:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    17ae:	4911      	ldr	r1, [pc, #68]	; (17f4 <_sercom_get_async_baud_val+0x1cc>)
    17b0:	428b      	cmp	r3, r1
    17b2:	d914      	bls.n	17de <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    17b4:	9b06      	ldr	r3, [sp, #24]
    17b6:	3301      	adds	r3, #1
    17b8:	b2db      	uxtb	r3, r3
    17ba:	0019      	movs	r1, r3
    17bc:	9306      	str	r3, [sp, #24]
    17be:	0013      	movs	r3, r2
    17c0:	3301      	adds	r3, #1
    17c2:	9307      	str	r3, [sp, #28]
    17c4:	2908      	cmp	r1, #8
    17c6:	d008      	beq.n	17da <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
    17c8:	2300      	movs	r3, #0
    17ca:	9302      	str	r3, [sp, #8]
    17cc:	2200      	movs	r2, #0
    17ce:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    17d0:	213f      	movs	r1, #63	; 0x3f
    17d2:	9400      	str	r4, [sp, #0]
    17d4:	9501      	str	r5, [sp, #4]
    17d6:	000f      	movs	r7, r1
    17d8:	e7bd      	b.n	1756 <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    17da:	2240      	movs	r2, #64	; 0x40
    17dc:	e734      	b.n	1648 <_sercom_get_async_baud_val+0x20>
    17de:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
    17e0:	9906      	ldr	r1, [sp, #24]
    17e2:	2908      	cmp	r1, #8
    17e4:	d100      	bne.n	17e8 <_sercom_get_async_baud_val+0x1c0>
    17e6:	e72f      	b.n	1648 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
    17e8:	034a      	lsls	r2, r1, #13
    17ea:	431a      	orrs	r2, r3
    17ec:	e788      	b.n	1700 <_sercom_get_async_baud_val+0xd8>
    17ee:	46c0      	nop			; (mov r8, r8)
    17f0:	00003c21 	.word	0x00003c21
    17f4:	00001fff 	.word	0x00001fff

000017f8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    17f8:	b510      	push	{r4, lr}
    17fa:	b082      	sub	sp, #8
    17fc:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    17fe:	4b0e      	ldr	r3, [pc, #56]	; (1838 <sercom_set_gclk_generator+0x40>)
    1800:	781b      	ldrb	r3, [r3, #0]
    1802:	2b00      	cmp	r3, #0
    1804:	d007      	beq.n	1816 <sercom_set_gclk_generator+0x1e>
    1806:	2900      	cmp	r1, #0
    1808:	d105      	bne.n	1816 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    180a:	4b0b      	ldr	r3, [pc, #44]	; (1838 <sercom_set_gclk_generator+0x40>)
    180c:	785b      	ldrb	r3, [r3, #1]
    180e:	4283      	cmp	r3, r0
    1810:	d010      	beq.n	1834 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1812:	201d      	movs	r0, #29
    1814:	e00c      	b.n	1830 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1816:	a901      	add	r1, sp, #4
    1818:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    181a:	2012      	movs	r0, #18
    181c:	4b07      	ldr	r3, [pc, #28]	; (183c <sercom_set_gclk_generator+0x44>)
    181e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1820:	2012      	movs	r0, #18
    1822:	4b07      	ldr	r3, [pc, #28]	; (1840 <sercom_set_gclk_generator+0x48>)
    1824:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1826:	4b04      	ldr	r3, [pc, #16]	; (1838 <sercom_set_gclk_generator+0x40>)
    1828:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    182a:	2201      	movs	r2, #1
    182c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    182e:	2000      	movs	r0, #0
}
    1830:	b002      	add	sp, #8
    1832:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1834:	2000      	movs	r0, #0
    1836:	e7fb      	b.n	1830 <sercom_set_gclk_generator+0x38>
    1838:	2000033c 	.word	0x2000033c
    183c:	0000261d 	.word	0x0000261d
    1840:	000025ad 	.word	0x000025ad

00001844 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1844:	4b40      	ldr	r3, [pc, #256]	; (1948 <_sercom_get_default_pad+0x104>)
    1846:	4298      	cmp	r0, r3
    1848:	d031      	beq.n	18ae <_sercom_get_default_pad+0x6a>
    184a:	d90a      	bls.n	1862 <_sercom_get_default_pad+0x1e>
    184c:	4b3f      	ldr	r3, [pc, #252]	; (194c <_sercom_get_default_pad+0x108>)
    184e:	4298      	cmp	r0, r3
    1850:	d04d      	beq.n	18ee <_sercom_get_default_pad+0xaa>
    1852:	4b3f      	ldr	r3, [pc, #252]	; (1950 <_sercom_get_default_pad+0x10c>)
    1854:	4298      	cmp	r0, r3
    1856:	d05a      	beq.n	190e <_sercom_get_default_pad+0xca>
    1858:	4b3e      	ldr	r3, [pc, #248]	; (1954 <_sercom_get_default_pad+0x110>)
    185a:	4298      	cmp	r0, r3
    185c:	d037      	beq.n	18ce <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    185e:	2000      	movs	r0, #0
}
    1860:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1862:	4b3d      	ldr	r3, [pc, #244]	; (1958 <_sercom_get_default_pad+0x114>)
    1864:	4298      	cmp	r0, r3
    1866:	d00c      	beq.n	1882 <_sercom_get_default_pad+0x3e>
    1868:	4b3c      	ldr	r3, [pc, #240]	; (195c <_sercom_get_default_pad+0x118>)
    186a:	4298      	cmp	r0, r3
    186c:	d1f7      	bne.n	185e <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    186e:	2901      	cmp	r1, #1
    1870:	d017      	beq.n	18a2 <_sercom_get_default_pad+0x5e>
    1872:	2900      	cmp	r1, #0
    1874:	d05d      	beq.n	1932 <_sercom_get_default_pad+0xee>
    1876:	2902      	cmp	r1, #2
    1878:	d015      	beq.n	18a6 <_sercom_get_default_pad+0x62>
    187a:	2903      	cmp	r1, #3
    187c:	d015      	beq.n	18aa <_sercom_get_default_pad+0x66>
	return 0;
    187e:	2000      	movs	r0, #0
    1880:	e7ee      	b.n	1860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1882:	2901      	cmp	r1, #1
    1884:	d007      	beq.n	1896 <_sercom_get_default_pad+0x52>
    1886:	2900      	cmp	r1, #0
    1888:	d051      	beq.n	192e <_sercom_get_default_pad+0xea>
    188a:	2902      	cmp	r1, #2
    188c:	d005      	beq.n	189a <_sercom_get_default_pad+0x56>
    188e:	2903      	cmp	r1, #3
    1890:	d005      	beq.n	189e <_sercom_get_default_pad+0x5a>
	return 0;
    1892:	2000      	movs	r0, #0
    1894:	e7e4      	b.n	1860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1896:	4832      	ldr	r0, [pc, #200]	; (1960 <_sercom_get_default_pad+0x11c>)
    1898:	e7e2      	b.n	1860 <_sercom_get_default_pad+0x1c>
    189a:	4832      	ldr	r0, [pc, #200]	; (1964 <_sercom_get_default_pad+0x120>)
    189c:	e7e0      	b.n	1860 <_sercom_get_default_pad+0x1c>
    189e:	4832      	ldr	r0, [pc, #200]	; (1968 <_sercom_get_default_pad+0x124>)
    18a0:	e7de      	b.n	1860 <_sercom_get_default_pad+0x1c>
    18a2:	4832      	ldr	r0, [pc, #200]	; (196c <_sercom_get_default_pad+0x128>)
    18a4:	e7dc      	b.n	1860 <_sercom_get_default_pad+0x1c>
    18a6:	4832      	ldr	r0, [pc, #200]	; (1970 <_sercom_get_default_pad+0x12c>)
    18a8:	e7da      	b.n	1860 <_sercom_get_default_pad+0x1c>
    18aa:	4832      	ldr	r0, [pc, #200]	; (1974 <_sercom_get_default_pad+0x130>)
    18ac:	e7d8      	b.n	1860 <_sercom_get_default_pad+0x1c>
    18ae:	2901      	cmp	r1, #1
    18b0:	d007      	beq.n	18c2 <_sercom_get_default_pad+0x7e>
    18b2:	2900      	cmp	r1, #0
    18b4:	d03f      	beq.n	1936 <_sercom_get_default_pad+0xf2>
    18b6:	2902      	cmp	r1, #2
    18b8:	d005      	beq.n	18c6 <_sercom_get_default_pad+0x82>
    18ba:	2903      	cmp	r1, #3
    18bc:	d005      	beq.n	18ca <_sercom_get_default_pad+0x86>
	return 0;
    18be:	2000      	movs	r0, #0
    18c0:	e7ce      	b.n	1860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    18c2:	482d      	ldr	r0, [pc, #180]	; (1978 <_sercom_get_default_pad+0x134>)
    18c4:	e7cc      	b.n	1860 <_sercom_get_default_pad+0x1c>
    18c6:	482d      	ldr	r0, [pc, #180]	; (197c <_sercom_get_default_pad+0x138>)
    18c8:	e7ca      	b.n	1860 <_sercom_get_default_pad+0x1c>
    18ca:	482d      	ldr	r0, [pc, #180]	; (1980 <_sercom_get_default_pad+0x13c>)
    18cc:	e7c8      	b.n	1860 <_sercom_get_default_pad+0x1c>
    18ce:	2901      	cmp	r1, #1
    18d0:	d007      	beq.n	18e2 <_sercom_get_default_pad+0x9e>
    18d2:	2900      	cmp	r1, #0
    18d4:	d031      	beq.n	193a <_sercom_get_default_pad+0xf6>
    18d6:	2902      	cmp	r1, #2
    18d8:	d005      	beq.n	18e6 <_sercom_get_default_pad+0xa2>
    18da:	2903      	cmp	r1, #3
    18dc:	d005      	beq.n	18ea <_sercom_get_default_pad+0xa6>
	return 0;
    18de:	2000      	movs	r0, #0
    18e0:	e7be      	b.n	1860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    18e2:	4828      	ldr	r0, [pc, #160]	; (1984 <_sercom_get_default_pad+0x140>)
    18e4:	e7bc      	b.n	1860 <_sercom_get_default_pad+0x1c>
    18e6:	4828      	ldr	r0, [pc, #160]	; (1988 <_sercom_get_default_pad+0x144>)
    18e8:	e7ba      	b.n	1860 <_sercom_get_default_pad+0x1c>
    18ea:	4828      	ldr	r0, [pc, #160]	; (198c <_sercom_get_default_pad+0x148>)
    18ec:	e7b8      	b.n	1860 <_sercom_get_default_pad+0x1c>
    18ee:	2901      	cmp	r1, #1
    18f0:	d007      	beq.n	1902 <_sercom_get_default_pad+0xbe>
    18f2:	2900      	cmp	r1, #0
    18f4:	d023      	beq.n	193e <_sercom_get_default_pad+0xfa>
    18f6:	2902      	cmp	r1, #2
    18f8:	d005      	beq.n	1906 <_sercom_get_default_pad+0xc2>
    18fa:	2903      	cmp	r1, #3
    18fc:	d005      	beq.n	190a <_sercom_get_default_pad+0xc6>
	return 0;
    18fe:	2000      	movs	r0, #0
    1900:	e7ae      	b.n	1860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1902:	4823      	ldr	r0, [pc, #140]	; (1990 <_sercom_get_default_pad+0x14c>)
    1904:	e7ac      	b.n	1860 <_sercom_get_default_pad+0x1c>
    1906:	4823      	ldr	r0, [pc, #140]	; (1994 <_sercom_get_default_pad+0x150>)
    1908:	e7aa      	b.n	1860 <_sercom_get_default_pad+0x1c>
    190a:	4823      	ldr	r0, [pc, #140]	; (1998 <_sercom_get_default_pad+0x154>)
    190c:	e7a8      	b.n	1860 <_sercom_get_default_pad+0x1c>
    190e:	2901      	cmp	r1, #1
    1910:	d007      	beq.n	1922 <_sercom_get_default_pad+0xde>
    1912:	2900      	cmp	r1, #0
    1914:	d015      	beq.n	1942 <_sercom_get_default_pad+0xfe>
    1916:	2902      	cmp	r1, #2
    1918:	d005      	beq.n	1926 <_sercom_get_default_pad+0xe2>
    191a:	2903      	cmp	r1, #3
    191c:	d005      	beq.n	192a <_sercom_get_default_pad+0xe6>
	return 0;
    191e:	2000      	movs	r0, #0
    1920:	e79e      	b.n	1860 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1922:	481e      	ldr	r0, [pc, #120]	; (199c <_sercom_get_default_pad+0x158>)
    1924:	e79c      	b.n	1860 <_sercom_get_default_pad+0x1c>
    1926:	481e      	ldr	r0, [pc, #120]	; (19a0 <_sercom_get_default_pad+0x15c>)
    1928:	e79a      	b.n	1860 <_sercom_get_default_pad+0x1c>
    192a:	481e      	ldr	r0, [pc, #120]	; (19a4 <_sercom_get_default_pad+0x160>)
    192c:	e798      	b.n	1860 <_sercom_get_default_pad+0x1c>
    192e:	481e      	ldr	r0, [pc, #120]	; (19a8 <_sercom_get_default_pad+0x164>)
    1930:	e796      	b.n	1860 <_sercom_get_default_pad+0x1c>
    1932:	481e      	ldr	r0, [pc, #120]	; (19ac <_sercom_get_default_pad+0x168>)
    1934:	e794      	b.n	1860 <_sercom_get_default_pad+0x1c>
    1936:	481e      	ldr	r0, [pc, #120]	; (19b0 <_sercom_get_default_pad+0x16c>)
    1938:	e792      	b.n	1860 <_sercom_get_default_pad+0x1c>
    193a:	481e      	ldr	r0, [pc, #120]	; (19b4 <_sercom_get_default_pad+0x170>)
    193c:	e790      	b.n	1860 <_sercom_get_default_pad+0x1c>
    193e:	481e      	ldr	r0, [pc, #120]	; (19b8 <_sercom_get_default_pad+0x174>)
    1940:	e78e      	b.n	1860 <_sercom_get_default_pad+0x1c>
    1942:	481e      	ldr	r0, [pc, #120]	; (19bc <_sercom_get_default_pad+0x178>)
    1944:	e78c      	b.n	1860 <_sercom_get_default_pad+0x1c>
    1946:	46c0      	nop			; (mov r8, r8)
    1948:	42000c00 	.word	0x42000c00
    194c:	42001400 	.word	0x42001400
    1950:	42001800 	.word	0x42001800
    1954:	42001000 	.word	0x42001000
    1958:	42000400 	.word	0x42000400
    195c:	42000800 	.word	0x42000800
    1960:	00050003 	.word	0x00050003
    1964:	00060003 	.word	0x00060003
    1968:	00070003 	.word	0x00070003
    196c:	00110002 	.word	0x00110002
    1970:	00120002 	.word	0x00120002
    1974:	00130002 	.word	0x00130002
    1978:	000d0002 	.word	0x000d0002
    197c:	000e0002 	.word	0x000e0002
    1980:	000f0002 	.word	0x000f0002
    1984:	00170002 	.word	0x00170002
    1988:	00180002 	.word	0x00180002
    198c:	00190002 	.word	0x00190002
    1990:	00290003 	.word	0x00290003
    1994:	002a0003 	.word	0x002a0003
    1998:	002b0003 	.word	0x002b0003
    199c:	00230003 	.word	0x00230003
    19a0:	00200003 	.word	0x00200003
    19a4:	00210003 	.word	0x00210003
    19a8:	00040003 	.word	0x00040003
    19ac:	00100002 	.word	0x00100002
    19b0:	000c0002 	.word	0x000c0002
    19b4:	00160002 	.word	0x00160002
    19b8:	00280003 	.word	0x00280003
    19bc:	00220003 	.word	0x00220003

000019c0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    19c0:	b530      	push	{r4, r5, lr}
    19c2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    19c4:	4b0b      	ldr	r3, [pc, #44]	; (19f4 <_sercom_get_sercom_inst_index+0x34>)
    19c6:	466a      	mov	r2, sp
    19c8:	cb32      	ldmia	r3!, {r1, r4, r5}
    19ca:	c232      	stmia	r2!, {r1, r4, r5}
    19cc:	cb32      	ldmia	r3!, {r1, r4, r5}
    19ce:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    19d0:	9b00      	ldr	r3, [sp, #0]
    19d2:	4283      	cmp	r3, r0
    19d4:	d00b      	beq.n	19ee <_sercom_get_sercom_inst_index+0x2e>
    19d6:	2301      	movs	r3, #1
    19d8:	009a      	lsls	r2, r3, #2
    19da:	4669      	mov	r1, sp
    19dc:	5852      	ldr	r2, [r2, r1]
    19de:	4282      	cmp	r2, r0
    19e0:	d006      	beq.n	19f0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19e2:	3301      	adds	r3, #1
    19e4:	2b06      	cmp	r3, #6
    19e6:	d1f7      	bne.n	19d8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    19e8:	2000      	movs	r0, #0
}
    19ea:	b007      	add	sp, #28
    19ec:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19ee:	2300      	movs	r3, #0
			return i;
    19f0:	b2d8      	uxtb	r0, r3
    19f2:	e7fa      	b.n	19ea <_sercom_get_sercom_inst_index+0x2a>
    19f4:	000050fc 	.word	0x000050fc

000019f8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    19f8:	4770      	bx	lr
	...

000019fc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    19fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    19fe:	4b0a      	ldr	r3, [pc, #40]	; (1a28 <_sercom_set_handler+0x2c>)
    1a00:	781b      	ldrb	r3, [r3, #0]
    1a02:	2b00      	cmp	r3, #0
    1a04:	d10c      	bne.n	1a20 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1a06:	4f09      	ldr	r7, [pc, #36]	; (1a2c <_sercom_set_handler+0x30>)
    1a08:	4e09      	ldr	r6, [pc, #36]	; (1a30 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1a0a:	4d0a      	ldr	r5, [pc, #40]	; (1a34 <_sercom_set_handler+0x38>)
    1a0c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1a0e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1a10:	195a      	adds	r2, r3, r5
    1a12:	6014      	str	r4, [r2, #0]
    1a14:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1a16:	2b18      	cmp	r3, #24
    1a18:	d1f9      	bne.n	1a0e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1a1a:	2201      	movs	r2, #1
    1a1c:	4b02      	ldr	r3, [pc, #8]	; (1a28 <_sercom_set_handler+0x2c>)
    1a1e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1a20:	0080      	lsls	r0, r0, #2
    1a22:	4b02      	ldr	r3, [pc, #8]	; (1a2c <_sercom_set_handler+0x30>)
    1a24:	50c1      	str	r1, [r0, r3]
}
    1a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a28:	2000033e 	.word	0x2000033e
    1a2c:	20000340 	.word	0x20000340
    1a30:	000019f9 	.word	0x000019f9
    1a34:	20000488 	.word	0x20000488

00001a38 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1a38:	b500      	push	{lr}
    1a3a:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1a3c:	2309      	movs	r3, #9
    1a3e:	466a      	mov	r2, sp
    1a40:	7013      	strb	r3, [r2, #0]
    1a42:	3301      	adds	r3, #1
    1a44:	7053      	strb	r3, [r2, #1]
    1a46:	3301      	adds	r3, #1
    1a48:	7093      	strb	r3, [r2, #2]
    1a4a:	3301      	adds	r3, #1
    1a4c:	70d3      	strb	r3, [r2, #3]
    1a4e:	3301      	adds	r3, #1
    1a50:	7113      	strb	r3, [r2, #4]
    1a52:	3301      	adds	r3, #1
    1a54:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1a56:	4b03      	ldr	r3, [pc, #12]	; (1a64 <_sercom_get_interrupt_vector+0x2c>)
    1a58:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1a5a:	466b      	mov	r3, sp
    1a5c:	5618      	ldrsb	r0, [r3, r0]
}
    1a5e:	b003      	add	sp, #12
    1a60:	bd00      	pop	{pc}
    1a62:	46c0      	nop			; (mov r8, r8)
    1a64:	000019c1 	.word	0x000019c1

00001a68 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1a68:	b510      	push	{r4, lr}
    1a6a:	4b02      	ldr	r3, [pc, #8]	; (1a74 <SERCOM0_Handler+0xc>)
    1a6c:	681b      	ldr	r3, [r3, #0]
    1a6e:	2000      	movs	r0, #0
    1a70:	4798      	blx	r3
    1a72:	bd10      	pop	{r4, pc}
    1a74:	20000340 	.word	0x20000340

00001a78 <SERCOM1_Handler>:
    1a78:	b510      	push	{r4, lr}
    1a7a:	4b02      	ldr	r3, [pc, #8]	; (1a84 <SERCOM1_Handler+0xc>)
    1a7c:	685b      	ldr	r3, [r3, #4]
    1a7e:	2001      	movs	r0, #1
    1a80:	4798      	blx	r3
    1a82:	bd10      	pop	{r4, pc}
    1a84:	20000340 	.word	0x20000340

00001a88 <SERCOM2_Handler>:
    1a88:	b510      	push	{r4, lr}
    1a8a:	4b02      	ldr	r3, [pc, #8]	; (1a94 <SERCOM2_Handler+0xc>)
    1a8c:	689b      	ldr	r3, [r3, #8]
    1a8e:	2002      	movs	r0, #2
    1a90:	4798      	blx	r3
    1a92:	bd10      	pop	{r4, pc}
    1a94:	20000340 	.word	0x20000340

00001a98 <SERCOM3_Handler>:
    1a98:	b510      	push	{r4, lr}
    1a9a:	4b02      	ldr	r3, [pc, #8]	; (1aa4 <SERCOM3_Handler+0xc>)
    1a9c:	68db      	ldr	r3, [r3, #12]
    1a9e:	2003      	movs	r0, #3
    1aa0:	4798      	blx	r3
    1aa2:	bd10      	pop	{r4, pc}
    1aa4:	20000340 	.word	0x20000340

00001aa8 <SERCOM4_Handler>:
    1aa8:	b510      	push	{r4, lr}
    1aaa:	4b02      	ldr	r3, [pc, #8]	; (1ab4 <SERCOM4_Handler+0xc>)
    1aac:	691b      	ldr	r3, [r3, #16]
    1aae:	2004      	movs	r0, #4
    1ab0:	4798      	blx	r3
    1ab2:	bd10      	pop	{r4, pc}
    1ab4:	20000340 	.word	0x20000340

00001ab8 <SERCOM5_Handler>:
    1ab8:	b510      	push	{r4, lr}
    1aba:	4b02      	ldr	r3, [pc, #8]	; (1ac4 <SERCOM5_Handler+0xc>)
    1abc:	695b      	ldr	r3, [r3, #20]
    1abe:	2005      	movs	r0, #5
    1ac0:	4798      	blx	r3
    1ac2:	bd10      	pop	{r4, pc}
    1ac4:	20000340 	.word	0x20000340

00001ac8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    1ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aca:	46de      	mov	lr, fp
    1acc:	4657      	mov	r7, sl
    1ace:	464e      	mov	r6, r9
    1ad0:	4645      	mov	r5, r8
    1ad2:	b5e0      	push	{r5, r6, r7, lr}
    1ad4:	b091      	sub	sp, #68	; 0x44
    1ad6:	0005      	movs	r5, r0
    1ad8:	000c      	movs	r4, r1
    1ada:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    1adc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1ade:	0008      	movs	r0, r1
    1ae0:	4bd4      	ldr	r3, [pc, #848]	; (1e34 <usart_init+0x36c>)
    1ae2:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
    1ae4:	2805      	cmp	r0, #5
    1ae6:	d00d      	beq.n	1b04 <usart_init+0x3c>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    1ae8:	0007      	movs	r7, r0
    1aea:	3713      	adds	r7, #19
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1aec:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    1aee:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    1af0:	07d2      	lsls	r2, r2, #31
    1af2:	d509      	bpl.n	1b08 <usart_init+0x40>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    1af4:	0018      	movs	r0, r3
    1af6:	b011      	add	sp, #68	; 0x44
    1af8:	bc3c      	pop	{r2, r3, r4, r5}
    1afa:	4690      	mov	r8, r2
    1afc:	4699      	mov	r9, r3
    1afe:	46a2      	mov	sl, r4
    1b00:	46ab      	mov	fp, r5
    1b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    1b04:	2719      	movs	r7, #25
    1b06:	e7f1      	b.n	1aec <usart_init+0x24>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1b08:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    1b0a:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    1b0c:	0792      	lsls	r2, r2, #30
    1b0e:	d4f1      	bmi.n	1af4 <usart_init+0x2c>
			MCLK->APBCMASK.reg |= mask;
    1b10:	4ac9      	ldr	r2, [pc, #804]	; (1e38 <usart_init+0x370>)
    1b12:	69d1      	ldr	r1, [r2, #28]
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    1b14:	3001      	adds	r0, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1b16:	3b1b      	subs	r3, #27
    1b18:	4083      	lsls	r3, r0
    1b1a:	430b      	orrs	r3, r1
    1b1c:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    1b1e:	a90f      	add	r1, sp, #60	; 0x3c
    1b20:	2335      	movs	r3, #53	; 0x35
    1b22:	4698      	mov	r8, r3
    1b24:	5cf3      	ldrb	r3, [r6, r3]
    1b26:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1b28:	b2ff      	uxtb	r7, r7
    1b2a:	0038      	movs	r0, r7
    1b2c:	4bc3      	ldr	r3, [pc, #780]	; (1e3c <usart_init+0x374>)
    1b2e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    1b30:	0038      	movs	r0, r7
    1b32:	4bc3      	ldr	r3, [pc, #780]	; (1e40 <usart_init+0x378>)
    1b34:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1b36:	4643      	mov	r3, r8
    1b38:	5cf0      	ldrb	r0, [r6, r3]
    1b3a:	2100      	movs	r1, #0
    1b3c:	4bc1      	ldr	r3, [pc, #772]	; (1e44 <usart_init+0x37c>)
    1b3e:	4798      	blx	r3
	module->character_size = config->character_size;
    1b40:	7af3      	ldrb	r3, [r6, #11]
    1b42:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    1b44:	232c      	movs	r3, #44	; 0x2c
    1b46:	5cf3      	ldrb	r3, [r6, r3]
    1b48:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1b4a:	232d      	movs	r3, #45	; 0x2d
    1b4c:	5cf3      	ldrb	r3, [r6, r3]
    1b4e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    1b50:	7ef3      	ldrb	r3, [r6, #27]
    1b52:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    1b54:	2324      	movs	r3, #36	; 0x24
    1b56:	5cf3      	ldrb	r3, [r6, r3]
    1b58:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b5a:	682b      	ldr	r3, [r5, #0]
    1b5c:	9302      	str	r3, [sp, #8]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1b5e:	0018      	movs	r0, r3
    1b60:	4bb4      	ldr	r3, [pc, #720]	; (1e34 <usart_init+0x36c>)
    1b62:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1b64:	3013      	adds	r0, #19
	uint16_t baud  = 0;
    1b66:	2200      	movs	r2, #0
    1b68:	230e      	movs	r3, #14
    1b6a:	a906      	add	r1, sp, #24
    1b6c:	468c      	mov	ip, r1
    1b6e:	4463      	add	r3, ip
    1b70:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    1b72:	8a33      	ldrh	r3, [r6, #16]
    1b74:	4698      	mov	r8, r3
    1b76:	2380      	movs	r3, #128	; 0x80
    1b78:	01db      	lsls	r3, r3, #7
    1b7a:	4598      	cmp	r8, r3
    1b7c:	d100      	bne.n	1b80 <usart_init+0xb8>
    1b7e:	e0c3      	b.n	1d08 <usart_init+0x240>
    1b80:	d90e      	bls.n	1ba0 <usart_init+0xd8>
    1b82:	23c0      	movs	r3, #192	; 0xc0
    1b84:	01db      	lsls	r3, r3, #7
    1b86:	4598      	cmp	r8, r3
    1b88:	d100      	bne.n	1b8c <usart_init+0xc4>
    1b8a:	e0b8      	b.n	1cfe <usart_init+0x236>
    1b8c:	2380      	movs	r3, #128	; 0x80
    1b8e:	021b      	lsls	r3, r3, #8
    1b90:	4598      	cmp	r8, r3
    1b92:	d000      	beq.n	1b96 <usart_init+0xce>
    1b94:	e148      	b.n	1e28 <usart_init+0x360>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    1b96:	2303      	movs	r3, #3
    1b98:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1b9a:	2300      	movs	r3, #0
    1b9c:	9307      	str	r3, [sp, #28]
    1b9e:	e008      	b.n	1bb2 <usart_init+0xea>
	switch (config->sample_rate) {
    1ba0:	2380      	movs	r3, #128	; 0x80
    1ba2:	019b      	lsls	r3, r3, #6
    1ba4:	4598      	cmp	r8, r3
    1ba6:	d000      	beq.n	1baa <usart_init+0xe2>
    1ba8:	e13e      	b.n	1e28 <usart_init+0x360>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1baa:	2310      	movs	r3, #16
    1bac:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1bae:	3b0f      	subs	r3, #15
    1bb0:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    1bb2:	6833      	ldr	r3, [r6, #0]
    1bb4:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1bb6:	68f3      	ldr	r3, [r6, #12]
    1bb8:	469b      	mov	fp, r3
		config->sample_adjustment |
    1bba:	6973      	ldr	r3, [r6, #20]
    1bbc:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1bbe:	7e33      	ldrb	r3, [r6, #24]
    1bc0:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1bc2:	232e      	movs	r3, #46	; 0x2e
    1bc4:	5cf3      	ldrb	r3, [r6, r3]
    1bc6:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1bc8:	6873      	ldr	r3, [r6, #4]
    1bca:	4699      	mov	r9, r3
	switch (transfer_mode)
    1bcc:	2b00      	cmp	r3, #0
    1bce:	d100      	bne.n	1bd2 <usart_init+0x10a>
    1bd0:	e0c7      	b.n	1d62 <usart_init+0x29a>
    1bd2:	2380      	movs	r3, #128	; 0x80
    1bd4:	055b      	lsls	r3, r3, #21
    1bd6:	4599      	cmp	r9, r3
    1bd8:	d100      	bne.n	1bdc <usart_init+0x114>
    1bda:	e0aa      	b.n	1d32 <usart_init+0x26a>
	if(config->encoding_format_enable) {
    1bdc:	7e73      	ldrb	r3, [r6, #25]
    1bde:	2b00      	cmp	r3, #0
    1be0:	d002      	beq.n	1be8 <usart_init+0x120>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1be2:	7eb3      	ldrb	r3, [r6, #26]
    1be4:	9a02      	ldr	r2, [sp, #8]
    1be6:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    1be8:	682a      	ldr	r2, [r5, #0]
    1bea:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1bec:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    1bee:	2b00      	cmp	r3, #0
    1bf0:	d1fc      	bne.n	1bec <usart_init+0x124>
    1bf2:	9702      	str	r7, [sp, #8]
	usart_hw->BAUD.reg = baud;
    1bf4:	330e      	adds	r3, #14
    1bf6:	a906      	add	r1, sp, #24
    1bf8:	468c      	mov	ip, r1
    1bfa:	4463      	add	r3, ip
    1bfc:	881b      	ldrh	r3, [r3, #0]
    1bfe:	81bb      	strh	r3, [r7, #12]
	ctrla |= transfer_mode;
    1c00:	9a05      	ldr	r2, [sp, #20]
    1c02:	465b      	mov	r3, fp
    1c04:	431a      	orrs	r2, r3
    1c06:	9b03      	ldr	r3, [sp, #12]
    1c08:	431a      	orrs	r2, r3
    1c0a:	464b      	mov	r3, r9
    1c0c:	431a      	orrs	r2, r3
    1c0e:	4643      	mov	r3, r8
    1c10:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1c12:	9b04      	ldr	r3, [sp, #16]
    1c14:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    1c16:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1c18:	4653      	mov	r3, sl
    1c1a:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    1c1c:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
    1c1e:	232f      	movs	r3, #47	; 0x2f
    1c20:	5cf3      	ldrb	r3, [r6, r3]
    1c22:	2b00      	cmp	r3, #0
    1c24:	d101      	bne.n	1c2a <usart_init+0x162>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    1c26:	3304      	adds	r3, #4
    1c28:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1c2a:	7e73      	ldrb	r3, [r6, #25]
    1c2c:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1c2e:	2124      	movs	r1, #36	; 0x24
    1c30:	5c71      	ldrb	r1, [r6, r1]
    1c32:	0249      	lsls	r1, r1, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    1c34:	430b      	orrs	r3, r1
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1c36:	2126      	movs	r1, #38	; 0x26
    1c38:	5c71      	ldrb	r1, [r6, r1]
    1c3a:	0209      	lsls	r1, r1, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1c3c:	430b      	orrs	r3, r1
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1c3e:	212c      	movs	r1, #44	; 0x2c
    1c40:	5c71      	ldrb	r1, [r6, r1]
    1c42:	0449      	lsls	r1, r1, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1c44:	430b      	orrs	r3, r1
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    1c46:	212d      	movs	r1, #45	; 0x2d
    1c48:	5c71      	ldrb	r1, [r6, r1]
    1c4a:	0409      	lsls	r1, r1, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1c4c:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
    1c4e:	7af1      	ldrb	r1, [r6, #11]
    1c50:	4319      	orrs	r1, r3
    1c52:	468c      	mov	ip, r1
	if (config->parity != USART_PARITY_NONE) {
    1c54:	8933      	ldrh	r3, [r6, #8]
    1c56:	2bff      	cmp	r3, #255	; 0xff
    1c58:	d100      	bne.n	1c5c <usart_init+0x194>
    1c5a:	e0a8      	b.n	1dae <usart_init+0x2e6>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    1c5c:	2180      	movs	r1, #128	; 0x80
    1c5e:	0449      	lsls	r1, r1, #17
    1c60:	430a      	orrs	r2, r1
		ctrlb |= config->parity;
    1c62:	4661      	mov	r1, ip
    1c64:	4319      	orrs	r1, r3
    1c66:	468c      	mov	ip, r1
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1c68:	9f02      	ldr	r7, [sp, #8]
    1c6a:	68bb      	ldr	r3, [r7, #8]
						| config->lin_break_length;
    1c6c:	8c31      	ldrh	r1, [r6, #32]
    1c6e:	8c70      	ldrh	r0, [r6, #34]	; 0x22
    1c70:	4301      	orrs	r1, r0
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1c72:	2007      	movs	r0, #7
    1c74:	4018      	ands	r0, r3
						| config->lin_break_length;
    1c76:	4301      	orrs	r1, r0
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
    1c78:	60b9      	str	r1, [r7, #8]
	if (config->lin_node != LIN_INVALID_MODE) {
    1c7a:	69f3      	ldr	r3, [r6, #28]
    1c7c:	2b00      	cmp	r3, #0
    1c7e:	d002      	beq.n	1c86 <usart_init+0x1be>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
    1c80:	4971      	ldr	r1, [pc, #452]	; (1e48 <usart_init+0x380>)
    1c82:	400a      	ands	r2, r1
		ctrla |= config->lin_node;
    1c84:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    1c86:	2334      	movs	r3, #52	; 0x34
    1c88:	5cf3      	ldrb	r3, [r6, r3]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d103      	bne.n	1c96 <usart_init+0x1ce>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1c8e:	4b6f      	ldr	r3, [pc, #444]	; (1e4c <usart_init+0x384>)
    1c90:	789b      	ldrb	r3, [r3, #2]
    1c92:	079b      	lsls	r3, r3, #30
    1c94:	d501      	bpl.n	1c9a <usart_init+0x1d2>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    1c96:	2380      	movs	r3, #128	; 0x80
    1c98:	431a      	orrs	r2, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    1c9a:	6829      	ldr	r1, [r5, #0]
    1c9c:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    1c9e:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    1ca0:	2b00      	cmp	r3, #0
    1ca2:	d1fc      	bne.n	1c9e <usart_init+0x1d6>
	usart_hw->CTRLB.reg = ctrlb;
    1ca4:	4663      	mov	r3, ip
    1ca6:	607b      	str	r3, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1ca8:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1caa:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
    1cac:	2b00      	cmp	r3, #0
    1cae:	d1fc      	bne.n	1caa <usart_init+0x1e2>
	usart_hw->CTRLA.reg = ctrla;
    1cb0:	603a      	str	r2, [r7, #0]
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
    1cb2:	683b      	ldr	r3, [r7, #0]
    1cb4:	22f0      	movs	r2, #240	; 0xf0
    1cb6:	0512      	lsls	r2, r2, #20
    1cb8:	4013      	ands	r3, r2
    1cba:	22e0      	movs	r2, #224	; 0xe0
    1cbc:	04d2      	lsls	r2, r2, #19
    1cbe:	4293      	cmp	r3, r2
    1cc0:	d00a      	beq.n	1cd8 <usart_init+0x210>
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
    1cc2:	68bb      	ldr	r3, [r7, #8]
    1cc4:	2207      	movs	r2, #7
    1cc6:	4393      	bics	r3, r2
    1cc8:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
    1cca:	68ba      	ldr	r2, [r7, #8]
    1ccc:	2325      	movs	r3, #37	; 0x25
    1cce:	5cf1      	ldrb	r1, [r6, r3]
    1cd0:	3b1e      	subs	r3, #30
    1cd2:	400b      	ands	r3, r1
    1cd4:	4313      	orrs	r3, r2
    1cd6:	60bb      	str	r3, [r7, #8]
    1cd8:	ab0e      	add	r3, sp, #56	; 0x38
    1cda:	2280      	movs	r2, #128	; 0x80
    1cdc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1cde:	2200      	movs	r2, #0
    1ce0:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    1ce2:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1ce4:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    1ce6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1ce8:	930a      	str	r3, [sp, #40]	; 0x28
    1cea:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    1cec:	930b      	str	r3, [sp, #44]	; 0x2c
    1cee:	6c33      	ldr	r3, [r6, #64]	; 0x40
    1cf0:	930c      	str	r3, [sp, #48]	; 0x30
    1cf2:	6c73      	ldr	r3, [r6, #68]	; 0x44
    1cf4:	9302      	str	r3, [sp, #8]
    1cf6:	930d      	str	r3, [sp, #52]	; 0x34
    1cf8:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1cfa:	ae0a      	add	r6, sp, #40	; 0x28
    1cfc:	e066      	b.n	1dcc <usart_init+0x304>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1cfe:	2308      	movs	r3, #8
    1d00:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1d02:	3b07      	subs	r3, #7
    1d04:	9307      	str	r3, [sp, #28]
    1d06:	e754      	b.n	1bb2 <usart_init+0xea>
	ctrla = (uint32_t)config->data_order |
    1d08:	6833      	ldr	r3, [r6, #0]
    1d0a:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    1d0c:	68f3      	ldr	r3, [r6, #12]
    1d0e:	469b      	mov	fp, r3
		config->sample_adjustment |
    1d10:	6973      	ldr	r3, [r6, #20]
    1d12:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1d14:	7e33      	ldrb	r3, [r6, #24]
    1d16:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    1d18:	232e      	movs	r3, #46	; 0x2e
    1d1a:	5cf3      	ldrb	r3, [r6, r3]
    1d1c:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    1d1e:	6873      	ldr	r3, [r6, #4]
    1d20:	4699      	mov	r9, r3
	switch (transfer_mode)
    1d22:	2b00      	cmp	r3, #0
    1d24:	d019      	beq.n	1d5a <usart_init+0x292>
    1d26:	2380      	movs	r3, #128	; 0x80
    1d28:	055b      	lsls	r3, r3, #21
    1d2a:	4599      	cmp	r9, r3
    1d2c:	d001      	beq.n	1d32 <usart_init+0x26a>
	enum status_code status_code = STATUS_OK;
    1d2e:	2300      	movs	r3, #0
    1d30:	e027      	b.n	1d82 <usart_init+0x2ba>
			if (!config->use_external_clock) {
    1d32:	232f      	movs	r3, #47	; 0x2f
    1d34:	5cf3      	ldrb	r3, [r6, r3]
    1d36:	2b00      	cmp	r3, #0
    1d38:	d000      	beq.n	1d3c <usart_init+0x274>
    1d3a:	e74f      	b.n	1bdc <usart_init+0x114>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    1d3c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1d3e:	001f      	movs	r7, r3
    1d40:	b2c0      	uxtb	r0, r0
    1d42:	4b43      	ldr	r3, [pc, #268]	; (1e50 <usart_init+0x388>)
    1d44:	4798      	blx	r3
    1d46:	0001      	movs	r1, r0
    1d48:	220e      	movs	r2, #14
    1d4a:	ab06      	add	r3, sp, #24
    1d4c:	469c      	mov	ip, r3
    1d4e:	4462      	add	r2, ip
    1d50:	0038      	movs	r0, r7
    1d52:	4b40      	ldr	r3, [pc, #256]	; (1e54 <usart_init+0x38c>)
    1d54:	4798      	blx	r3
    1d56:	0003      	movs	r3, r0
    1d58:	e013      	b.n	1d82 <usart_init+0x2ba>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    1d5a:	2308      	movs	r3, #8
    1d5c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1d5e:	2300      	movs	r3, #0
    1d60:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    1d62:	232f      	movs	r3, #47	; 0x2f
    1d64:	5cf3      	ldrb	r3, [r6, r3]
    1d66:	2b00      	cmp	r3, #0
    1d68:	d00f      	beq.n	1d8a <usart_init+0x2c2>
				status_code =
    1d6a:	9b06      	ldr	r3, [sp, #24]
    1d6c:	9300      	str	r3, [sp, #0]
    1d6e:	9b07      	ldr	r3, [sp, #28]
    1d70:	220e      	movs	r2, #14
    1d72:	a906      	add	r1, sp, #24
    1d74:	468c      	mov	ip, r1
    1d76:	4462      	add	r2, ip
    1d78:	6b31      	ldr	r1, [r6, #48]	; 0x30
    1d7a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    1d7c:	4f36      	ldr	r7, [pc, #216]	; (1e58 <usart_init+0x390>)
    1d7e:	47b8      	blx	r7
    1d80:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
    1d82:	2b00      	cmp	r3, #0
    1d84:	d000      	beq.n	1d88 <usart_init+0x2c0>
    1d86:	e6b5      	b.n	1af4 <usart_init+0x2c>
    1d88:	e728      	b.n	1bdc <usart_init+0x114>
						_sercom_get_async_baud_val(config->baudrate,
    1d8a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1d8c:	001f      	movs	r7, r3
    1d8e:	b2c0      	uxtb	r0, r0
    1d90:	4b2f      	ldr	r3, [pc, #188]	; (1e50 <usart_init+0x388>)
    1d92:	4798      	blx	r3
    1d94:	0001      	movs	r1, r0
				status_code =
    1d96:	9b06      	ldr	r3, [sp, #24]
    1d98:	9300      	str	r3, [sp, #0]
    1d9a:	9b07      	ldr	r3, [sp, #28]
    1d9c:	220e      	movs	r2, #14
    1d9e:	a806      	add	r0, sp, #24
    1da0:	4684      	mov	ip, r0
    1da2:	4462      	add	r2, ip
    1da4:	0038      	movs	r0, r7
    1da6:	4f2c      	ldr	r7, [pc, #176]	; (1e58 <usart_init+0x390>)
    1da8:	47b8      	blx	r7
    1daa:	0003      	movs	r3, r0
    1dac:	e7e9      	b.n	1d82 <usart_init+0x2ba>
		if(config->lin_slave_enable) {
    1dae:	7ef3      	ldrb	r3, [r6, #27]
    1db0:	2b00      	cmp	r3, #0
    1db2:	d100      	bne.n	1db6 <usart_init+0x2ee>
    1db4:	e758      	b.n	1c68 <usart_init+0x1a0>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    1db6:	2380      	movs	r3, #128	; 0x80
    1db8:	04db      	lsls	r3, r3, #19
    1dba:	431a      	orrs	r2, r3
    1dbc:	e754      	b.n	1c68 <usart_init+0x1a0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    1dbe:	0020      	movs	r0, r4
    1dc0:	4b26      	ldr	r3, [pc, #152]	; (1e5c <usart_init+0x394>)
    1dc2:	4798      	blx	r3
    1dc4:	e007      	b.n	1dd6 <usart_init+0x30e>
    1dc6:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    1dc8:	2f04      	cmp	r7, #4
    1dca:	d00d      	beq.n	1de8 <usart_init+0x320>
    1dcc:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1dce:	00bb      	lsls	r3, r7, #2
    1dd0:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    1dd2:	2800      	cmp	r0, #0
    1dd4:	d0f3      	beq.n	1dbe <usart_init+0x2f6>
		if (current_pinmux != PINMUX_UNUSED) {
    1dd6:	1c43      	adds	r3, r0, #1
    1dd8:	d0f5      	beq.n	1dc6 <usart_init+0x2fe>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1dda:	a90e      	add	r1, sp, #56	; 0x38
    1ddc:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1dde:	0c00      	lsrs	r0, r0, #16
    1de0:	b2c0      	uxtb	r0, r0
    1de2:	4b1f      	ldr	r3, [pc, #124]	; (1e60 <usart_init+0x398>)
    1de4:	4798      	blx	r3
    1de6:	e7ee      	b.n	1dc6 <usart_init+0x2fe>
		module->callback[i]            = NULL;
    1de8:	2300      	movs	r3, #0
    1dea:	60eb      	str	r3, [r5, #12]
    1dec:	612b      	str	r3, [r5, #16]
    1dee:	616b      	str	r3, [r5, #20]
    1df0:	61ab      	str	r3, [r5, #24]
    1df2:	61eb      	str	r3, [r5, #28]
    1df4:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    1df6:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1df8:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1dfa:	2200      	movs	r2, #0
    1dfc:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    1dfe:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    1e00:	3330      	adds	r3, #48	; 0x30
    1e02:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1e04:	3301      	adds	r3, #1
    1e06:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1e08:	3301      	adds	r3, #1
    1e0a:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    1e0c:	3301      	adds	r3, #1
    1e0e:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1e10:	6828      	ldr	r0, [r5, #0]
    1e12:	4b08      	ldr	r3, [pc, #32]	; (1e34 <usart_init+0x36c>)
    1e14:	4798      	blx	r3
    1e16:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1e18:	4912      	ldr	r1, [pc, #72]	; (1e64 <usart_init+0x39c>)
    1e1a:	4b13      	ldr	r3, [pc, #76]	; (1e68 <usart_init+0x3a0>)
    1e1c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    1e1e:	00a4      	lsls	r4, r4, #2
    1e20:	4b12      	ldr	r3, [pc, #72]	; (1e6c <usart_init+0x3a4>)
    1e22:	50e5      	str	r5, [r4, r3]
	return status_code;
    1e24:	2300      	movs	r3, #0
    1e26:	e665      	b.n	1af4 <usart_init+0x2c>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1e28:	2310      	movs	r3, #16
    1e2a:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1e2c:	2300      	movs	r3, #0
    1e2e:	9307      	str	r3, [sp, #28]
    1e30:	e6bf      	b.n	1bb2 <usart_init+0xea>
    1e32:	46c0      	nop			; (mov r8, r8)
    1e34:	000019c1 	.word	0x000019c1
    1e38:	40000800 	.word	0x40000800
    1e3c:	0000261d 	.word	0x0000261d
    1e40:	000025ad 	.word	0x000025ad
    1e44:	000017f9 	.word	0x000017f9
    1e48:	f0ffffff 	.word	0xf0ffffff
    1e4c:	41002000 	.word	0x41002000
    1e50:	00002641 	.word	0x00002641
    1e54:	00001601 	.word	0x00001601
    1e58:	00001629 	.word	0x00001629
    1e5c:	00001845 	.word	0x00001845
    1e60:	00002719 	.word	0x00002719
    1e64:	00001f0d 	.word	0x00001f0d
    1e68:	000019fd 	.word	0x000019fd
    1e6c:	20000488 	.word	0x20000488

00001e70 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    1e70:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    1e72:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    1e74:	2a00      	cmp	r2, #0
    1e76:	d101      	bne.n	1e7c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    1e78:	0018      	movs	r0, r3
    1e7a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    1e7c:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    1e7e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1e80:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    1e82:	2a00      	cmp	r2, #0
    1e84:	d1f8      	bne.n	1e78 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1e86:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    1e88:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1e8a:	2a00      	cmp	r2, #0
    1e8c:	d1fc      	bne.n	1e88 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    1e8e:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    1e90:	2102      	movs	r1, #2
    1e92:	7e1a      	ldrb	r2, [r3, #24]
    1e94:	420a      	tst	r2, r1
    1e96:	d0fc      	beq.n	1e92 <usart_write_wait+0x22>
	return STATUS_OK;
    1e98:	2300      	movs	r3, #0
    1e9a:	e7ed      	b.n	1e78 <usart_write_wait+0x8>

00001e9c <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1e9c:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1e9e:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    1ea0:	2a00      	cmp	r2, #0
    1ea2:	d101      	bne.n	1ea8 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    1ea4:	0018      	movs	r0, r3
    1ea6:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    1ea8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    1eaa:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    1eac:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    1eae:	2a00      	cmp	r2, #0
    1eb0:	d1f8      	bne.n	1ea4 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    1eb2:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1eb4:	7e10      	ldrb	r0, [r2, #24]
    1eb6:	0740      	lsls	r0, r0, #29
    1eb8:	d5f4      	bpl.n	1ea4 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    1eba:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1ebc:	2b00      	cmp	r3, #0
    1ebe:	d1fc      	bne.n	1eba <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1ec0:	8b53      	ldrh	r3, [r2, #26]
    1ec2:	b2db      	uxtb	r3, r3
	if (error_code) {
    1ec4:	0658      	lsls	r0, r3, #25
    1ec6:	d01d      	beq.n	1f04 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1ec8:	0798      	lsls	r0, r3, #30
    1eca:	d503      	bpl.n	1ed4 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1ecc:	2302      	movs	r3, #2
    1ece:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    1ed0:	3318      	adds	r3, #24
    1ed2:	e7e7      	b.n	1ea4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1ed4:	0758      	lsls	r0, r3, #29
    1ed6:	d503      	bpl.n	1ee0 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1ed8:	2304      	movs	r3, #4
    1eda:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    1edc:	331a      	adds	r3, #26
    1ede:	e7e1      	b.n	1ea4 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1ee0:	07d8      	lsls	r0, r3, #31
    1ee2:	d503      	bpl.n	1eec <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1ee4:	2301      	movs	r3, #1
    1ee6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    1ee8:	3312      	adds	r3, #18
    1eea:	e7db      	b.n	1ea4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1eec:	06d8      	lsls	r0, r3, #27
    1eee:	d503      	bpl.n	1ef8 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1ef0:	2310      	movs	r3, #16
    1ef2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    1ef4:	3332      	adds	r3, #50	; 0x32
    1ef6:	e7d5      	b.n	1ea4 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1ef8:	069b      	lsls	r3, r3, #26
    1efa:	d503      	bpl.n	1f04 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    1efc:	2320      	movs	r3, #32
    1efe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    1f00:	3321      	adds	r3, #33	; 0x21
    1f02:	e7cf      	b.n	1ea4 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    1f04:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    1f06:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    1f08:	2300      	movs	r3, #0
    1f0a:	e7cb      	b.n	1ea4 <usart_read_wait+0x8>

00001f0c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1f0e:	0080      	lsls	r0, r0, #2
    1f10:	4b64      	ldr	r3, [pc, #400]	; (20a4 <STACK_SIZE+0xa4>)
    1f12:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1f14:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1f16:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    1f18:	2b00      	cmp	r3, #0
    1f1a:	d1fc      	bne.n	1f16 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1f1c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1f1e:	7da6      	ldrb	r6, [r4, #22]
    1f20:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    1f22:	2330      	movs	r3, #48	; 0x30
    1f24:	5ceb      	ldrb	r3, [r5, r3]
    1f26:	2231      	movs	r2, #49	; 0x31
    1f28:	5caf      	ldrb	r7, [r5, r2]
    1f2a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1f2c:	07f3      	lsls	r3, r6, #31
    1f2e:	d522      	bpl.n	1f76 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    1f30:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1f32:	b29b      	uxth	r3, r3
    1f34:	2b00      	cmp	r3, #0
    1f36:	d01c      	beq.n	1f72 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1f38:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1f3a:	7813      	ldrb	r3, [r2, #0]
    1f3c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    1f3e:	1c51      	adds	r1, r2, #1
    1f40:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1f42:	7969      	ldrb	r1, [r5, #5]
    1f44:	2901      	cmp	r1, #1
    1f46:	d00e      	beq.n	1f66 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    1f48:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    1f4a:	05db      	lsls	r3, r3, #23
    1f4c:	0ddb      	lsrs	r3, r3, #23
    1f4e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    1f50:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1f52:	3b01      	subs	r3, #1
    1f54:	b29b      	uxth	r3, r3
    1f56:	85eb      	strh	r3, [r5, #46]	; 0x2e
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d10c      	bne.n	1f76 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1f5c:	3301      	adds	r3, #1
    1f5e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    1f60:	3301      	adds	r3, #1
    1f62:	75a3      	strb	r3, [r4, #22]
    1f64:	e007      	b.n	1f76 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1f66:	7851      	ldrb	r1, [r2, #1]
    1f68:	0209      	lsls	r1, r1, #8
    1f6a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    1f6c:	3202      	adds	r2, #2
    1f6e:	62aa      	str	r2, [r5, #40]	; 0x28
    1f70:	e7eb      	b.n	1f4a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1f72:	2301      	movs	r3, #1
    1f74:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1f76:	07b3      	lsls	r3, r6, #30
    1f78:	d506      	bpl.n	1f88 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1f7a:	2302      	movs	r3, #2
    1f7c:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    1f7e:	2200      	movs	r2, #0
    1f80:	3331      	adds	r3, #49	; 0x31
    1f82:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1f84:	07fb      	lsls	r3, r7, #31
    1f86:	d41e      	bmi.n	1fc6 <_usart_interrupt_handler+0xba>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1f88:	0773      	lsls	r3, r6, #29
    1f8a:	d568      	bpl.n	205e <STACK_SIZE+0x5e>

		if (module->remaining_rx_buffer_length) {
    1f8c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1f8e:	b29b      	uxth	r3, r3
    1f90:	2b00      	cmp	r3, #0
    1f92:	d062      	beq.n	205a <STACK_SIZE+0x5a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1f94:	8b63      	ldrh	r3, [r4, #26]
    1f96:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    1f98:	071a      	lsls	r2, r3, #28
    1f9a:	d418      	bmi.n	1fce <_usart_interrupt_handler+0xc2>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1f9c:	227f      	movs	r2, #127	; 0x7f
    1f9e:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
    1fa0:	065a      	lsls	r2, r3, #25
    1fa2:	d501      	bpl.n	1fa8 <_usart_interrupt_handler+0x9c>
				error_code &= ~SERCOM_USART_STATUS_TXE;
    1fa4:	2240      	movs	r2, #64	; 0x40
    1fa6:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d033      	beq.n	2014 <STACK_SIZE+0x14>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1fac:	079a      	lsls	r2, r3, #30
    1fae:	d511      	bpl.n	1fd4 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1fb0:	221a      	movs	r2, #26
    1fb2:	2332      	movs	r3, #50	; 0x32
    1fb4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1fb6:	3b30      	subs	r3, #48	; 0x30
    1fb8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1fba:	077b      	lsls	r3, r7, #29
    1fbc:	d54f      	bpl.n	205e <STACK_SIZE+0x5e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1fbe:	0028      	movs	r0, r5
    1fc0:	696b      	ldr	r3, [r5, #20]
    1fc2:	4798      	blx	r3
    1fc4:	e04b      	b.n	205e <STACK_SIZE+0x5e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1fc6:	0028      	movs	r0, r5
    1fc8:	68eb      	ldr	r3, [r5, #12]
    1fca:	4798      	blx	r3
    1fcc:	e7dc      	b.n	1f88 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1fce:	2277      	movs	r2, #119	; 0x77
    1fd0:	4013      	ands	r3, r2
    1fd2:	e7e5      	b.n	1fa0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1fd4:	075a      	lsls	r2, r3, #29
    1fd6:	d505      	bpl.n	1fe4 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1fd8:	221e      	movs	r2, #30
    1fda:	2332      	movs	r3, #50	; 0x32
    1fdc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1fde:	3b2e      	subs	r3, #46	; 0x2e
    1fe0:	8363      	strh	r3, [r4, #26]
    1fe2:	e7ea      	b.n	1fba <_usart_interrupt_handler+0xae>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1fe4:	07da      	lsls	r2, r3, #31
    1fe6:	d505      	bpl.n	1ff4 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1fe8:	2213      	movs	r2, #19
    1fea:	2332      	movs	r3, #50	; 0x32
    1fec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1fee:	3b31      	subs	r3, #49	; 0x31
    1ff0:	8363      	strh	r3, [r4, #26]
    1ff2:	e7e2      	b.n	1fba <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    1ff4:	06da      	lsls	r2, r3, #27
    1ff6:	d505      	bpl.n	2004 <STACK_SIZE+0x4>
					module->rx_status = STATUS_ERR_PROTOCOL;
    1ff8:	2242      	movs	r2, #66	; 0x42
    1ffa:	2332      	movs	r3, #50	; 0x32
    1ffc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    1ffe:	3b22      	subs	r3, #34	; 0x22
    2000:	8363      	strh	r3, [r4, #26]
    2002:	e7da      	b.n	1fba <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2004:	069b      	lsls	r3, r3, #26
    2006:	d5d8      	bpl.n	1fba <_usart_interrupt_handler+0xae>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2008:	2241      	movs	r2, #65	; 0x41
    200a:	2332      	movs	r3, #50	; 0x32
    200c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    200e:	3b12      	subs	r3, #18
    2010:	8363      	strh	r3, [r4, #26]
    2012:	e7d2      	b.n	1fba <_usart_interrupt_handler+0xae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2014:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2016:	05db      	lsls	r3, r3, #23
    2018:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    201a:	b2da      	uxtb	r2, r3
    201c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    201e:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2020:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2022:	1c51      	adds	r1, r2, #1
    2024:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2026:	7969      	ldrb	r1, [r5, #5]
    2028:	2901      	cmp	r1, #1
    202a:	d010      	beq.n	204e <STACK_SIZE+0x4e>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    202c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    202e:	3b01      	subs	r3, #1
    2030:	b29b      	uxth	r3, r3
    2032:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2034:	2b00      	cmp	r3, #0
    2036:	d112      	bne.n	205e <STACK_SIZE+0x5e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2038:	3304      	adds	r3, #4
    203a:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    203c:	2200      	movs	r2, #0
    203e:	332e      	adds	r3, #46	; 0x2e
    2040:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2042:	07bb      	lsls	r3, r7, #30
    2044:	d50b      	bpl.n	205e <STACK_SIZE+0x5e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2046:	0028      	movs	r0, r5
    2048:	692b      	ldr	r3, [r5, #16]
    204a:	4798      	blx	r3
    204c:	e007      	b.n	205e <STACK_SIZE+0x5e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    204e:	0a1b      	lsrs	r3, r3, #8
    2050:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2052:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2054:	3301      	adds	r3, #1
    2056:	626b      	str	r3, [r5, #36]	; 0x24
    2058:	e7e8      	b.n	202c <STACK_SIZE+0x2c>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    205a:	2304      	movs	r3, #4
    205c:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    205e:	06f3      	lsls	r3, r6, #27
    2060:	d504      	bpl.n	206c <STACK_SIZE+0x6c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2062:	2310      	movs	r3, #16
    2064:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2066:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2068:	06fb      	lsls	r3, r7, #27
    206a:	d40e      	bmi.n	208a <STACK_SIZE+0x8a>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    206c:	06b3      	lsls	r3, r6, #26
    206e:	d504      	bpl.n	207a <STACK_SIZE+0x7a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2070:	2320      	movs	r3, #32
    2072:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2074:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2076:	073b      	lsls	r3, r7, #28
    2078:	d40b      	bmi.n	2092 <STACK_SIZE+0x92>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    207a:	0733      	lsls	r3, r6, #28
    207c:	d504      	bpl.n	2088 <STACK_SIZE+0x88>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    207e:	2308      	movs	r3, #8
    2080:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2082:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2084:	06bb      	lsls	r3, r7, #26
    2086:	d408      	bmi.n	209a <STACK_SIZE+0x9a>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    208a:	0028      	movs	r0, r5
    208c:	69eb      	ldr	r3, [r5, #28]
    208e:	4798      	blx	r3
    2090:	e7ec      	b.n	206c <STACK_SIZE+0x6c>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2092:	0028      	movs	r0, r5
    2094:	69ab      	ldr	r3, [r5, #24]
    2096:	4798      	blx	r3
    2098:	e7ef      	b.n	207a <STACK_SIZE+0x7a>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    209a:	6a2b      	ldr	r3, [r5, #32]
    209c:	0028      	movs	r0, r5
    209e:	4798      	blx	r3
}
    20a0:	e7f2      	b.n	2088 <STACK_SIZE+0x88>
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	20000488 	.word	0x20000488

000020a8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    20a8:	b510      	push	{r4, lr}
	switch (clock_source) {
    20aa:	2807      	cmp	r0, #7
    20ac:	d803      	bhi.n	20b6 <system_clock_source_get_hz+0xe>
    20ae:	0080      	lsls	r0, r0, #2
    20b0:	4b0f      	ldr	r3, [pc, #60]	; (20f0 <system_clock_source_get_hz+0x48>)
    20b2:	581b      	ldr	r3, [r3, r0]
    20b4:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    20b6:	2000      	movs	r0, #0
    20b8:	e018      	b.n	20ec <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
    20ba:	4b0e      	ldr	r3, [pc, #56]	; (20f4 <system_clock_source_get_hz+0x4c>)
    20bc:	6858      	ldr	r0, [r3, #4]
    20be:	e015      	b.n	20ec <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
    20c0:	4b0d      	ldr	r3, [pc, #52]	; (20f8 <system_clock_source_get_hz+0x50>)
    20c2:	7d59      	ldrb	r1, [r3, #21]
    20c4:	0709      	lsls	r1, r1, #28
    20c6:	0f09      	lsrs	r1, r1, #28
    20c8:	3101      	adds	r1, #1
    20ca:	480c      	ldr	r0, [pc, #48]	; (20fc <system_clock_source_get_hz+0x54>)
    20cc:	4b0c      	ldr	r3, [pc, #48]	; (2100 <system_clock_source_get_hz+0x58>)
    20ce:	4798      	blx	r3
    20d0:	e00c      	b.n	20ec <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
    20d2:	4b08      	ldr	r3, [pc, #32]	; (20f4 <system_clock_source_get_hz+0x4c>)
    20d4:	6898      	ldr	r0, [r3, #8]
    20d6:	e009      	b.n	20ec <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    20d8:	4b07      	ldr	r3, [pc, #28]	; (20f8 <system_clock_source_get_hz+0x50>)
    20da:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    20dc:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    20de:	079b      	lsls	r3, r3, #30
    20e0:	d504      	bpl.n	20ec <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
    20e2:	4b04      	ldr	r3, [pc, #16]	; (20f4 <system_clock_source_get_hz+0x4c>)
    20e4:	6818      	ldr	r0, [r3, #0]
    20e6:	e001      	b.n	20ec <system_clock_source_get_hz+0x44>
		return 32768UL;
    20e8:	2080      	movs	r0, #128	; 0x80
    20ea:	0200      	lsls	r0, r0, #8
	}
}
    20ec:	bd10      	pop	{r4, pc}
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	00005114 	.word	0x00005114
    20f4:	20000358 	.word	0x20000358
    20f8:	40001000 	.word	0x40001000
    20fc:	02dc6c00 	.word	0x02dc6c00
    2100:	00003ac9 	.word	0x00003ac9

00002104 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2104:	b5f0      	push	{r4, r5, r6, r7, lr}
    2106:	46de      	mov	lr, fp
    2108:	4657      	mov	r7, sl
    210a:	464e      	mov	r6, r9
    210c:	4645      	mov	r5, r8
    210e:	b5e0      	push	{r5, r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    2110:	4a25      	ldr	r2, [pc, #148]	; (21a8 <system_clock_source_xosc32k_set_config+0xa4>)
    2112:	8a93      	ldrh	r3, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    2114:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2116:	7801      	ldrb	r1, [r0, #0]
    2118:	424c      	negs	r4, r1
    211a:	414c      	adcs	r4, r1
    211c:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    211e:	7881      	ldrb	r1, [r0, #2]
    2120:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    2122:	78c1      	ldrb	r1, [r0, #3]
    2124:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    2126:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2128:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    212a:	7a81      	ldrb	r1, [r0, #10]
    212c:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    212e:	491f      	ldr	r1, [pc, #124]	; (21ac <system_clock_source_xosc32k_set_config+0xa8>)
    2130:	6844      	ldr	r4, [r0, #4]
    2132:	608c      	str	r4, [r1, #8]

	OSC32KCTRL->CFDCTRL.reg =
		(config->clock_failure_detector_prescaler << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos) |
    2134:	7ac1      	ldrb	r1, [r0, #11]
    2136:	0089      	lsls	r1, r1, #2
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
		(config->enable_clock_switch_back << OSC32KCTRL_CFDCTRL_SWBACK_Pos);
    2138:	7b84      	ldrb	r4, [r0, #14]
    213a:	0064      	lsls	r4, r4, #1
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
    213c:	4321      	orrs	r1, r4
    213e:	7b44      	ldrb	r4, [r0, #13]
    2140:	4321      	orrs	r1, r4
    2142:	b2c9      	uxtb	r1, r1
	OSC32KCTRL->CFDCTRL.reg =
    2144:	7591      	strb	r1, [r2, #22]

	OSC32KCTRL->EVCTRL.reg =
			(config->enable_clock_failure_detector_event_outut << OSC32KCTRL_EVCTRL_CFDEO_Pos);
    2146:	7b01      	ldrb	r1, [r0, #12]
	OSC32KCTRL->EVCTRL.reg =
    2148:	75d1      	strb	r1, [r2, #23]

	OSC32KCTRL->XOSC32K = temp;
    214a:	2101      	movs	r1, #1
    214c:	4648      	mov	r0, r9
    214e:	0080      	lsls	r0, r0, #2
    2150:	2404      	movs	r4, #4
    2152:	43a3      	bics	r3, r4
    2154:	4303      	orrs	r3, r0
    2156:	4640      	mov	r0, r8
    2158:	4008      	ands	r0, r1
    215a:	00c0      	lsls	r0, r0, #3
    215c:	3404      	adds	r4, #4
    215e:	43a3      	bics	r3, r4
    2160:	4303      	orrs	r3, r0
    2162:	4660      	mov	r0, ip
    2164:	4008      	ands	r0, r1
    2166:	0100      	lsls	r0, r0, #4
    2168:	3408      	adds	r4, #8
    216a:	43a3      	bics	r3, r4
    216c:	4303      	orrs	r3, r0
    216e:	400f      	ands	r7, r1
    2170:	01bf      	lsls	r7, r7, #6
    2172:	2040      	movs	r0, #64	; 0x40
    2174:	4383      	bics	r3, r0
    2176:	433b      	orrs	r3, r7
    2178:	400e      	ands	r6, r1
    217a:	01f6      	lsls	r6, r6, #7
    217c:	3040      	adds	r0, #64	; 0x40
    217e:	4383      	bics	r3, r0
    2180:	4333      	orrs	r3, r6
    2182:	3879      	subs	r0, #121	; 0x79
    2184:	4005      	ands	r5, r0
    2186:	022d      	lsls	r5, r5, #8
    2188:	4809      	ldr	r0, [pc, #36]	; (21b0 <system_clock_source_xosc32k_set_config+0xac>)
    218a:	4003      	ands	r3, r0
    218c:	432b      	orrs	r3, r5
    218e:	4658      	mov	r0, fp
    2190:	4001      	ands	r1, r0
    2192:	0309      	lsls	r1, r1, #12
    2194:	4807      	ldr	r0, [pc, #28]	; (21b4 <system_clock_source_xosc32k_set_config+0xb0>)
    2196:	4003      	ands	r3, r0
    2198:	430b      	orrs	r3, r1
    219a:	8293      	strh	r3, [r2, #20]
}
    219c:	bc3c      	pop	{r2, r3, r4, r5}
    219e:	4690      	mov	r8, r2
    21a0:	4699      	mov	r9, r3
    21a2:	46a2      	mov	sl, r4
    21a4:	46ab      	mov	fp, r5
    21a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21a8:	40001400 	.word	0x40001400
    21ac:	20000358 	.word	0x20000358
    21b0:	fffff8ff 	.word	0xfffff8ff
    21b4:	ffffefff 	.word	0xffffefff

000021b8 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    21b8:	b570      	push	{r4, r5, r6, lr}
    21ba:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    21bc:	68c3      	ldr	r3, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    21be:	7d02      	ldrb	r2, [r0, #20]
    21c0:	2a01      	cmp	r2, #1
    21c2:	d04e      	beq.n	2262 <system_clock_source_dpll_set_config+0xaa>
		refclk = refclk / config->reference_divider;
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    21c4:	68a2      	ldr	r2, [r4, #8]
    21c6:	0110      	lsls	r0, r2, #4
    21c8:	0019      	movs	r1, r3
    21ca:	4b29      	ldr	r3, [pc, #164]	; (2270 <system_clock_source_dpll_set_config+0xb8>)
    21cc:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    21ce:	220f      	movs	r2, #15
    21d0:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    21d2:	0903      	lsrs	r3, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    21d4:	7821      	ldrb	r1, [r4, #0]
    21d6:	01c9      	lsls	r1, r1, #7
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    21d8:	7865      	ldrb	r5, [r4, #1]
    21da:	01ad      	lsls	r5, r5, #6
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    21dc:	4329      	orrs	r1, r5
    21de:	b2c9      	uxtb	r1, r1
	OSCCTRL->DPLLCTRLA.reg =
    21e0:	4d24      	ldr	r5, [pc, #144]	; (2274 <system_clock_source_dpll_set_config+0xbc>)
    21e2:	7729      	strb	r1, [r5, #28]

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    21e4:	0411      	lsls	r1, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    21e6:	3b01      	subs	r3, #1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    21e8:	051b      	lsls	r3, r3, #20
    21ea:	0d1b      	lsrs	r3, r3, #20
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    21ec:	430b      	orrs	r3, r1
	OSCCTRL->DPLLRATIO.reg =
    21ee:	622b      	str	r3, [r5, #32]

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    21f0:	002e      	movs	r6, r5
    21f2:	252c      	movs	r5, #44	; 0x2c
    21f4:	2104      	movs	r1, #4
    21f6:	5d73      	ldrb	r3, [r6, r5]
    21f8:	420b      	tst	r3, r1
    21fa:	d1fc      	bne.n	21f6 <system_clock_source_dpll_set_config+0x3e>
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    21fc:	78a3      	ldrb	r3, [r4, #2]
    21fe:	031b      	lsls	r3, r3, #12
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    2200:	78e1      	ldrb	r1, [r4, #3]
    2202:	00c9      	lsls	r1, r1, #3
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    2204:	430b      	orrs	r3, r1
    2206:	7921      	ldrb	r1, [r4, #4]
    2208:	0089      	lsls	r1, r1, #2
    220a:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    220c:	7ca1      	ldrb	r1, [r4, #18]
    220e:	2503      	movs	r5, #3
    2210:	4029      	ands	r1, r5
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    2212:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    2214:	8a21      	ldrh	r1, [r4, #16]
    2216:	0409      	lsls	r1, r1, #16
    2218:	4e17      	ldr	r6, [pc, #92]	; (2278 <system_clock_source_dpll_set_config+0xc0>)
    221a:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    221c:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    221e:	7ce1      	ldrb	r1, [r4, #19]
    2220:	0209      	lsls	r1, r1, #8
    2222:	26e0      	movs	r6, #224	; 0xe0
    2224:	00f6      	lsls	r6, r6, #3
    2226:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    2228:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    222a:	7d26      	ldrb	r6, [r4, #20]
    222c:	0136      	lsls	r6, r6, #4
    222e:	2130      	movs	r1, #48	; 0x30
    2230:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    2232:	430b      	orrs	r3, r1
	OSCCTRL->DPLLCTRLB.reg =
    2234:	490f      	ldr	r1, [pc, #60]	; (2274 <system_clock_source_dpll_set_config+0xbc>)
    2236:	624b      	str	r3, [r1, #36]	; 0x24

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    2238:	7d63      	ldrb	r3, [r4, #21]
    223a:	401d      	ands	r5, r3
    223c:	2328      	movs	r3, #40	; 0x28
    223e:	54cd      	strb	r5, [r1, r3]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    2240:	000e      	movs	r6, r1
    2242:	252c      	movs	r5, #44	; 0x2c
    2244:	2108      	movs	r1, #8
    2246:	5d73      	ldrb	r3, [r6, r5]
    2248:	420b      	tst	r3, r1
    224a:	d1fc      	bne.n	2246 <system_clock_source_dpll_set_config+0x8e>
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(config->reference_frequency *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
    224c:	230f      	movs	r3, #15
    224e:	4398      	bics	r0, r3
    2250:	1882      	adds	r2, r0, r2
			(config->reference_frequency *
    2252:	68e3      	ldr	r3, [r4, #12]
    2254:	435a      	muls	r2, r3
			) >> (4 + config->prescaler);
    2256:	7d63      	ldrb	r3, [r4, #21]
    2258:	3304      	adds	r3, #4
    225a:	40da      	lsrs	r2, r3
	_system_clock_inst.dpll.frequency =
    225c:	4b07      	ldr	r3, [pc, #28]	; (227c <system_clock_source_dpll_set_config+0xc4>)
    225e:	601a      	str	r2, [r3, #0]
}
    2260:	bd70      	pop	{r4, r5, r6, pc}
		refclk = refclk / config->reference_divider;
    2262:	8a01      	ldrh	r1, [r0, #16]
    2264:	0018      	movs	r0, r3
    2266:	4b02      	ldr	r3, [pc, #8]	; (2270 <system_clock_source_dpll_set_config+0xb8>)
    2268:	4798      	blx	r3
    226a:	0003      	movs	r3, r0
    226c:	e7aa      	b.n	21c4 <system_clock_source_dpll_set_config+0xc>
    226e:	46c0      	nop			; (mov r8, r8)
    2270:	00003ac9 	.word	0x00003ac9
    2274:	40001000 	.word	0x40001000
    2278:	07ff0000 	.word	0x07ff0000
    227c:	20000358 	.word	0x20000358

00002280 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2280:	2807      	cmp	r0, #7
    2282:	d803      	bhi.n	228c <system_clock_source_enable+0xc>
    2284:	0080      	lsls	r0, r0, #2
    2286:	4b18      	ldr	r3, [pc, #96]	; (22e8 <system_clock_source_enable+0x68>)
    2288:	581b      	ldr	r3, [r3, r0]
    228a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    228c:	2017      	movs	r0, #23
    228e:	e029      	b.n	22e4 <system_clock_source_enable+0x64>
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
    2290:	4a16      	ldr	r2, [pc, #88]	; (22ec <system_clock_source_enable+0x6c>)
    2292:	7d13      	ldrb	r3, [r2, #20]
    2294:	2102      	movs	r1, #2
    2296:	430b      	orrs	r3, r1
    2298:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    229a:	2000      	movs	r0, #0
    229c:	e022      	b.n	22e4 <system_clock_source_enable+0x64>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    229e:	4a14      	ldr	r2, [pc, #80]	; (22f0 <system_clock_source_enable+0x70>)
    22a0:	6993      	ldr	r3, [r2, #24]
    22a2:	2102      	movs	r1, #2
    22a4:	430b      	orrs	r3, r1
    22a6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    22a8:	2000      	movs	r0, #0
		break;
    22aa:	e01b      	b.n	22e4 <system_clock_source_enable+0x64>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    22ac:	4a0f      	ldr	r2, [pc, #60]	; (22ec <system_clock_source_enable+0x6c>)
    22ae:	8a13      	ldrh	r3, [r2, #16]
    22b0:	2102      	movs	r1, #2
    22b2:	430b      	orrs	r3, r1
    22b4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    22b6:	2000      	movs	r0, #0
		break;
    22b8:	e014      	b.n	22e4 <system_clock_source_enable+0x64>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    22ba:	4a0d      	ldr	r2, [pc, #52]	; (22f0 <system_clock_source_enable+0x70>)
    22bc:	8a93      	ldrh	r3, [r2, #20]
    22be:	2102      	movs	r1, #2
    22c0:	430b      	orrs	r3, r1
    22c2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    22c4:	2000      	movs	r0, #0
		break;
    22c6:	e00d      	b.n	22e4 <system_clock_source_enable+0x64>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    22c8:	4a08      	ldr	r2, [pc, #32]	; (22ec <system_clock_source_enable+0x6c>)
    22ca:	7f13      	ldrb	r3, [r2, #28]
    22cc:	2102      	movs	r1, #2
    22ce:	430b      	orrs	r3, r1
    22d0:	7713      	strb	r3, [r2, #28]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    22d2:	0010      	movs	r0, r2
    22d4:	312a      	adds	r1, #42	; 0x2a
    22d6:	2202      	movs	r2, #2
    22d8:	5c43      	ldrb	r3, [r0, r1]
    22da:	4213      	tst	r3, r2
    22dc:	d1fc      	bne.n	22d8 <system_clock_source_enable+0x58>
	return STATUS_OK;
    22de:	2000      	movs	r0, #0
    22e0:	e000      	b.n	22e4 <system_clock_source_enable+0x64>
		return STATUS_OK;
    22e2:	2000      	movs	r0, #0
}
    22e4:	4770      	bx	lr
    22e6:	46c0      	nop			; (mov r8, r8)
    22e8:	00005134 	.word	0x00005134
    22ec:	40001000 	.word	0x40001000
    22f0:	40001400 	.word	0x40001400

000022f4 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    22f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    22f6:	46c6      	mov	lr, r8
    22f8:	b500      	push	{lr}
    22fa:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    22fc:	2203      	movs	r2, #3
    22fe:	4b3f      	ldr	r3, [pc, #252]	; (23fc <system_clock_init+0x108>)
    2300:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2302:	4a3f      	ldr	r2, [pc, #252]	; (2400 <system_clock_init+0x10c>)
    2304:	6853      	ldr	r3, [r2, #4]
    2306:	211e      	movs	r1, #30
    2308:	438b      	bics	r3, r1
    230a:	3918      	subs	r1, #24
    230c:	430b      	orrs	r3, r1
    230e:	6053      	str	r3, [r2, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2310:	a80a      	add	r0, sp, #40	; 0x28
    2312:	2300      	movs	r3, #0
    2314:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    2316:	2280      	movs	r2, #128	; 0x80
    2318:	0212      	lsls	r2, r2, #8
    231a:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    231c:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    231e:	2201      	movs	r2, #1
    2320:	70c2      	strb	r2, [r0, #3]
	config->write_once          = false;
    2322:	7283      	strb	r3, [r0, #10]
	config->clock_failure_detector_prescaler = SYSTEM_CLOCK_XOSC32K_FAILURE_DETECTOR_PRESCALER_1;
    2324:	72c3      	strb	r3, [r0, #11]
	config->enable_clock_failure_detector_event_outut = false;
    2326:	7303      	strb	r3, [r0, #12]
	config->enable_clock_failure_detector = false;
    2328:	7343      	strb	r3, [r0, #13]
	config->enable_clock_switch_back = false;
    232a:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    232c:	3902      	subs	r1, #2
    232e:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2330:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    2332:	7202      	strb	r2, [r0, #8]
	xosc32k_conf.enable_clock_failure_detector    = CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_ENABLE;
	xosc32k_conf.enable_clock_failure_detector_event_outut =
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2334:	4b33      	ldr	r3, [pc, #204]	; (2404 <system_clock_init+0x110>)
    2336:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2338:	2005      	movs	r0, #5
    233a:	4b33      	ldr	r3, [pc, #204]	; (2408 <system_clock_init+0x114>)
    233c:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    233e:	4933      	ldr	r1, [pc, #204]	; (240c <system_clock_init+0x118>)
    2340:	2201      	movs	r2, #1
    2342:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2344:	421a      	tst	r2, r3
    2346:	d0fc      	beq.n	2342 <system_clock_init+0x4e>
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    2348:	4b31      	ldr	r3, [pc, #196]	; (2410 <system_clock_init+0x11c>)
    234a:	7d1a      	ldrb	r2, [r3, #20]
    234c:	2180      	movs	r1, #128	; 0x80
    234e:	430a      	orrs	r2, r1
    2350:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    2352:	2202      	movs	r2, #2
    2354:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    2356:	001a      	movs	r2, r3
    2358:	6993      	ldr	r3, [r2, #24]
    235a:	2b00      	cmp	r3, #0
    235c:	d1fc      	bne.n	2358 <system_clock_init+0x64>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    235e:	4b2d      	ldr	r3, [pc, #180]	; (2414 <system_clock_init+0x120>)
    2360:	4798      	blx	r3
	config->division_factor    = 1;
    2362:	ad01      	add	r5, sp, #4
    2364:	2601      	movs	r6, #1
    2366:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2368:	2400      	movs	r4, #0
    236a:	706c      	strb	r4, [r5, #1]
	config->output_enable      = false;
    236c:	726c      	strb	r4, [r5, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    236e:	2305      	movs	r3, #5
    2370:	702b      	strb	r3, [r5, #0]
    2372:	722e      	strb	r6, [r5, #8]
    2374:	0029      	movs	r1, r5
    2376:	2001      	movs	r0, #1
    2378:	4b27      	ldr	r3, [pc, #156]	; (2418 <system_clock_init+0x124>)
    237a:	4698      	mov	r8, r3
    237c:	4798      	blx	r3
    237e:	2001      	movs	r0, #1
    2380:	4f26      	ldr	r7, [pc, #152]	; (241c <system_clock_init+0x128>)
    2382:	47b8      	blx	r7
	config->division_factor    = 1;
    2384:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    2386:	706c      	strb	r4, [r5, #1]
	config->run_in_standby     = false;
    2388:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    238a:	726c      	strb	r4, [r5, #9]
    238c:	2307      	movs	r3, #7
    238e:	702b      	strb	r3, [r5, #0]
    2390:	0029      	movs	r1, r5
    2392:	2008      	movs	r0, #8
    2394:	47c0      	blx	r8
    2396:	2008      	movs	r0, #8
    2398:	47b8      	blx	r7
	config->lock_bypass         = false;
    239a:	a804      	add	r0, sp, #16
    239c:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    239e:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    23a0:	7104      	strb	r4, [r0, #4]
	config->output_frequency    = 48000000;
    23a2:	4b1f      	ldr	r3, [pc, #124]	; (2420 <system_clock_init+0x12c>)
    23a4:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    23a6:	8206      	strh	r6, [r0, #16]
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    23a8:	7544      	strb	r4, [r0, #21]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    23aa:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    23ac:	7484      	strb	r4, [r0, #18]
		Assert(false);
	}
	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    23ae:	7004      	strb	r4, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    23b0:	2301      	movs	r3, #1
    23b2:	7043      	strb	r3, [r0, #1]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    23b4:	7504      	strb	r4, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    23b6:	4b1b      	ldr	r3, [pc, #108]	; (2424 <system_clock_init+0x130>)
    23b8:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    23ba:	4b1b      	ldr	r3, [pc, #108]	; (2428 <system_clock_init+0x134>)
    23bc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    23be:	2007      	movs	r0, #7
    23c0:	4b11      	ldr	r3, [pc, #68]	; (2408 <system_clock_init+0x114>)
    23c2:	4798      	blx	r3
		return ((OSCCTRL->DPLLSTATUS.reg &
    23c4:	4812      	ldr	r0, [pc, #72]	; (2410 <system_clock_init+0x11c>)
    23c6:	2130      	movs	r1, #48	; 0x30
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    23c8:	2203      	movs	r2, #3
		return ((OSCCTRL->DPLLSTATUS.reg &
    23ca:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    23cc:	4013      	ands	r3, r2
    23ce:	2b03      	cmp	r3, #3
    23d0:	d1fb      	bne.n	23ca <system_clock_init+0xd6>
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    23d2:	3b02      	subs	r3, #2
    23d4:	4a15      	ldr	r2, [pc, #84]	; (242c <system_clock_init+0x138>)
    23d6:	7113      	strb	r3, [r2, #4]
	config->division_factor    = 1;
    23d8:	a901      	add	r1, sp, #4
    23da:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    23dc:	2200      	movs	r2, #0
    23de:	704a      	strb	r2, [r1, #1]
	config->output_enable      = false;
    23e0:	724a      	strb	r2, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    23e2:	3207      	adds	r2, #7
    23e4:	700a      	strb	r2, [r1, #0]
    23e6:	720b      	strb	r3, [r1, #8]
    23e8:	2000      	movs	r0, #0
    23ea:	4b0b      	ldr	r3, [pc, #44]	; (2418 <system_clock_init+0x124>)
    23ec:	4798      	blx	r3
    23ee:	2000      	movs	r0, #0
    23f0:	4b0a      	ldr	r3, [pc, #40]	; (241c <system_clock_init+0x128>)
    23f2:	4798      	blx	r3
#endif

}
    23f4:	b00e      	add	sp, #56	; 0x38
    23f6:	bc04      	pop	{r2}
    23f8:	4690      	mov	r8, r2
    23fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23fc:	40001800 	.word	0x40001800
    2400:	41004000 	.word	0x41004000
    2404:	00002105 	.word	0x00002105
    2408:	00002281 	.word	0x00002281
    240c:	40001400 	.word	0x40001400
    2410:	40001000 	.word	0x40001000
    2414:	00002431 	.word	0x00002431
    2418:	00002455 	.word	0x00002455
    241c:	00002501 	.word	0x00002501
    2420:	02dc6c00 	.word	0x02dc6c00
    2424:	00007fff 	.word	0x00007fff
    2428:	000021b9 	.word	0x000021b9
    242c:	40000800 	.word	0x40000800

00002430 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    2430:	4a06      	ldr	r2, [pc, #24]	; (244c <system_gclk_init+0x1c>)
    2432:	6953      	ldr	r3, [r2, #20]
    2434:	2180      	movs	r1, #128	; 0x80
    2436:	430b      	orrs	r3, r1
    2438:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    243a:	2201      	movs	r2, #1
    243c:	4b04      	ldr	r3, [pc, #16]	; (2450 <system_gclk_init+0x20>)
    243e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    2440:	0019      	movs	r1, r3
    2442:	780b      	ldrb	r3, [r1, #0]
    2444:	4213      	tst	r3, r2
    2446:	d1fc      	bne.n	2442 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    2448:	4770      	bx	lr
    244a:	46c0      	nop			; (mov r8, r8)
    244c:	40000800 	.word	0x40000800
    2450:	40001c00 	.word	0x40001c00

00002454 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    2454:	b570      	push	{r4, r5, r6, lr}
    2456:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    2458:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    245a:	784b      	ldrb	r3, [r1, #1]
    245c:	2b00      	cmp	r3, #0
    245e:	d002      	beq.n	2466 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    2460:	2380      	movs	r3, #128	; 0x80
    2462:	00db      	lsls	r3, r3, #3
    2464:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    2466:	7a4b      	ldrb	r3, [r1, #9]
    2468:	2b00      	cmp	r3, #0
    246a:	d002      	beq.n	2472 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    246c:	2380      	movs	r3, #128	; 0x80
    246e:	011b      	lsls	r3, r3, #4
    2470:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    2472:	6848      	ldr	r0, [r1, #4]
    2474:	2801      	cmp	r0, #1
    2476:	d90f      	bls.n	2498 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    2478:	1e43      	subs	r3, r0, #1
    247a:	4218      	tst	r0, r3
    247c:	d131      	bne.n	24e2 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    247e:	2802      	cmp	r0, #2
    2480:	d92d      	bls.n	24de <system_gclk_gen_set_config+0x8a>
    2482:	2302      	movs	r3, #2
    2484:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    2486:	3201      	adds	r2, #1
						mask <<= 1) {
    2488:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    248a:	4298      	cmp	r0, r3
    248c:	d8fb      	bhi.n	2486 <system_gclk_gen_set_config+0x32>
    248e:	2380      	movs	r3, #128	; 0x80
    2490:	015b      	lsls	r3, r3, #5
    2492:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    2494:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    2496:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    2498:	7a0b      	ldrb	r3, [r1, #8]
    249a:	2b00      	cmp	r3, #0
    249c:	d002      	beq.n	24a4 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    249e:	2380      	movs	r3, #128	; 0x80
    24a0:	019b      	lsls	r3, r3, #6
    24a2:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    24a4:	2604      	movs	r6, #4
    24a6:	40a6      	lsls	r6, r4
    24a8:	4911      	ldr	r1, [pc, #68]	; (24f0 <system_gclk_gen_set_config+0x9c>)
    24aa:	4a12      	ldr	r2, [pc, #72]	; (24f4 <system_gclk_gen_set_config+0xa0>)
    24ac:	684b      	ldr	r3, [r1, #4]
    24ae:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    24b0:	421e      	tst	r6, r3
    24b2:	d1fb      	bne.n	24ac <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    24b4:	4b10      	ldr	r3, [pc, #64]	; (24f8 <system_gclk_gen_set_config+0xa4>)
    24b6:	4798      	blx	r3
    24b8:	00a4      	lsls	r4, r4, #2
    24ba:	4b0d      	ldr	r3, [pc, #52]	; (24f0 <system_gclk_gen_set_config+0x9c>)
    24bc:	469c      	mov	ip, r3
    24be:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    24c0:	6a22      	ldr	r2, [r4, #32]
    24c2:	2380      	movs	r3, #128	; 0x80
    24c4:	005b      	lsls	r3, r3, #1
    24c6:	401a      	ands	r2, r3
    24c8:	432a      	orrs	r2, r5
    24ca:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    24cc:	4661      	mov	r1, ip
    24ce:	4a09      	ldr	r2, [pc, #36]	; (24f4 <system_gclk_gen_set_config+0xa0>)
    24d0:	684b      	ldr	r3, [r1, #4]
    24d2:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    24d4:	421e      	tst	r6, r3
    24d6:	d1fb      	bne.n	24d0 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    24d8:	4b08      	ldr	r3, [pc, #32]	; (24fc <system_gclk_gen_set_config+0xa8>)
    24da:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    24dc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    24de:	2200      	movs	r2, #0
    24e0:	e7d5      	b.n	248e <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    24e2:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    24e4:	2380      	movs	r3, #128	; 0x80
    24e6:	009b      	lsls	r3, r3, #2
    24e8:	4318      	orrs	r0, r3
    24ea:	4305      	orrs	r5, r0
    24ec:	e7d4      	b.n	2498 <system_gclk_gen_set_config+0x44>
    24ee:	46c0      	nop			; (mov r8, r8)
    24f0:	40001c00 	.word	0x40001c00
    24f4:	000007fc 	.word	0x000007fc
    24f8:	00001055 	.word	0x00001055
    24fc:	00001095 	.word	0x00001095

00002500 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    2500:	b510      	push	{r4, lr}
    2502:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2504:	2204      	movs	r2, #4
    2506:	4082      	lsls	r2, r0
    2508:	4809      	ldr	r0, [pc, #36]	; (2530 <system_gclk_gen_enable+0x30>)
    250a:	490a      	ldr	r1, [pc, #40]	; (2534 <system_gclk_gen_enable+0x34>)
    250c:	6843      	ldr	r3, [r0, #4]
    250e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    2510:	421a      	tst	r2, r3
    2512:	d1fb      	bne.n	250c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    2514:	4b08      	ldr	r3, [pc, #32]	; (2538 <system_gclk_gen_enable+0x38>)
    2516:	4798      	blx	r3
    2518:	00a4      	lsls	r4, r4, #2
    251a:	4b05      	ldr	r3, [pc, #20]	; (2530 <system_gclk_gen_enable+0x30>)
    251c:	469c      	mov	ip, r3
    251e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    2520:	6a22      	ldr	r2, [r4, #32]
    2522:	2380      	movs	r3, #128	; 0x80
    2524:	005b      	lsls	r3, r3, #1
    2526:	4313      	orrs	r3, r2
    2528:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    252a:	4b04      	ldr	r3, [pc, #16]	; (253c <system_gclk_gen_enable+0x3c>)
    252c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    252e:	bd10      	pop	{r4, pc}
    2530:	40001c00 	.word	0x40001c00
    2534:	000007fc 	.word	0x000007fc
    2538:	00001055 	.word	0x00001055
    253c:	00001095 	.word	0x00001095

00002540 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    2540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2542:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    2544:	2204      	movs	r2, #4
    2546:	4082      	lsls	r2, r0
    2548:	4812      	ldr	r0, [pc, #72]	; (2594 <system_gclk_gen_get_hz+0x54>)
    254a:	4913      	ldr	r1, [pc, #76]	; (2598 <system_gclk_gen_get_hz+0x58>)
    254c:	6843      	ldr	r3, [r0, #4]
    254e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    2550:	421a      	tst	r2, r3
    2552:	d1fb      	bne.n	254c <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    2554:	4b11      	ldr	r3, [pc, #68]	; (259c <system_gclk_gen_get_hz+0x5c>)
    2556:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    2558:	4f0e      	ldr	r7, [pc, #56]	; (2594 <system_gclk_gen_get_hz+0x54>)
    255a:	3408      	adds	r4, #8
    255c:	00a4      	lsls	r4, r4, #2
    255e:	59e0      	ldr	r0, [r4, r7]
    2560:	0740      	lsls	r0, r0, #29
    2562:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
    2564:	4b0e      	ldr	r3, [pc, #56]	; (25a0 <system_gclk_gen_get_hz+0x60>)
    2566:	4798      	blx	r3
    2568:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    256a:	59e5      	ldr	r5, [r4, r7]
    256c:	04ed      	lsls	r5, r5, #19
    256e:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    2570:	59e4      	ldr	r4, [r4, r7]
    2572:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    2574:	4b0b      	ldr	r3, [pc, #44]	; (25a4 <system_gclk_gen_get_hz+0x64>)
    2576:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    2578:	2d00      	cmp	r5, #0
    257a:	d107      	bne.n	258c <system_gclk_gen_get_hz+0x4c>
    257c:	2c01      	cmp	r4, #1
    257e:	d907      	bls.n	2590 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    2580:	0021      	movs	r1, r4
    2582:	0030      	movs	r0, r6
    2584:	4b08      	ldr	r3, [pc, #32]	; (25a8 <system_gclk_gen_get_hz+0x68>)
    2586:	4798      	blx	r3
    2588:	0006      	movs	r6, r0
    258a:	e001      	b.n	2590 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    258c:	3401      	adds	r4, #1
    258e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    2590:	0030      	movs	r0, r6
    2592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2594:	40001c00 	.word	0x40001c00
    2598:	000007fc 	.word	0x000007fc
    259c:	00001055 	.word	0x00001055
    25a0:	000020a9 	.word	0x000020a9
    25a4:	00001095 	.word	0x00001095
    25a8:	00003ac9 	.word	0x00003ac9

000025ac <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    25ac:	b510      	push	{r4, lr}
    25ae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    25b0:	4b09      	ldr	r3, [pc, #36]	; (25d8 <system_gclk_chan_enable+0x2c>)
    25b2:	4798      	blx	r3
    25b4:	00a0      	lsls	r0, r4, #2
    25b6:	4b09      	ldr	r3, [pc, #36]	; (25dc <system_gclk_chan_enable+0x30>)
    25b8:	469c      	mov	ip, r3
    25ba:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    25bc:	2280      	movs	r2, #128	; 0x80
    25be:	5883      	ldr	r3, [r0, r2]
    25c0:	2140      	movs	r1, #64	; 0x40
    25c2:	430b      	orrs	r3, r1
    25c4:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    25c6:	3140      	adds	r1, #64	; 0x40
    25c8:	3a40      	subs	r2, #64	; 0x40
    25ca:	5843      	ldr	r3, [r0, r1]
    25cc:	421a      	tst	r2, r3
    25ce:	d0fc      	beq.n	25ca <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    25d0:	4b03      	ldr	r3, [pc, #12]	; (25e0 <system_gclk_chan_enable+0x34>)
    25d2:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    25d4:	bd10      	pop	{r4, pc}
    25d6:	46c0      	nop			; (mov r8, r8)
    25d8:	00001055 	.word	0x00001055
    25dc:	40001c00 	.word	0x40001c00
    25e0:	00001095 	.word	0x00001095

000025e4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    25e4:	b510      	push	{r4, lr}
    25e6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    25e8:	4b09      	ldr	r3, [pc, #36]	; (2610 <system_gclk_chan_disable+0x2c>)
    25ea:	4798      	blx	r3
    25ec:	00a0      	lsls	r0, r4, #2
    25ee:	4b09      	ldr	r3, [pc, #36]	; (2614 <system_gclk_chan_disable+0x30>)
    25f0:	469c      	mov	ip, r3
    25f2:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    25f4:	2280      	movs	r2, #128	; 0x80
    25f6:	5883      	ldr	r3, [r0, r2]
    25f8:	2140      	movs	r1, #64	; 0x40
    25fa:	438b      	bics	r3, r1
    25fc:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    25fe:	3140      	adds	r1, #64	; 0x40
    2600:	3a40      	subs	r2, #64	; 0x40
    2602:	5843      	ldr	r3, [r0, r1]
    2604:	421a      	tst	r2, r3
    2606:	d1fc      	bne.n	2602 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    2608:	4b03      	ldr	r3, [pc, #12]	; (2618 <system_gclk_chan_disable+0x34>)
    260a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    260c:	bd10      	pop	{r4, pc}
    260e:	46c0      	nop			; (mov r8, r8)
    2610:	00001055 	.word	0x00001055
    2614:	40001c00 	.word	0x40001c00
    2618:	00001095 	.word	0x00001095

0000261c <system_gclk_chan_set_config>:
{
    261c:	b570      	push	{r4, r5, r6, lr}
    261e:	0004      	movs	r4, r0
    2620:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    2622:	4b05      	ldr	r3, [pc, #20]	; (2638 <system_gclk_chan_set_config+0x1c>)
    2624:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    2626:	782a      	ldrb	r2, [r5, #0]
    2628:	230f      	movs	r3, #15
    262a:	4013      	ands	r3, r2
    262c:	3420      	adds	r4, #32
    262e:	00a4      	lsls	r4, r4, #2
    2630:	4a02      	ldr	r2, [pc, #8]	; (263c <system_gclk_chan_set_config+0x20>)
    2632:	50a3      	str	r3, [r4, r2]
}
    2634:	bd70      	pop	{r4, r5, r6, pc}
    2636:	46c0      	nop			; (mov r8, r8)
    2638:	000025e5 	.word	0x000025e5
    263c:	40001c00 	.word	0x40001c00

00002640 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    2640:	b510      	push	{r4, lr}
    2642:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    2644:	4b06      	ldr	r3, [pc, #24]	; (2660 <system_gclk_chan_get_hz+0x20>)
    2646:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    2648:	3420      	adds	r4, #32
    264a:	00a4      	lsls	r4, r4, #2
    264c:	4b05      	ldr	r3, [pc, #20]	; (2664 <system_gclk_chan_get_hz+0x24>)
    264e:	58e4      	ldr	r4, [r4, r3]
    2650:	0724      	lsls	r4, r4, #28
    2652:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    2654:	4b04      	ldr	r3, [pc, #16]	; (2668 <system_gclk_chan_get_hz+0x28>)
    2656:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    2658:	0020      	movs	r0, r4
    265a:	4b04      	ldr	r3, [pc, #16]	; (266c <system_gclk_chan_get_hz+0x2c>)
    265c:	4798      	blx	r3
}
    265e:	bd10      	pop	{r4, pc}
    2660:	00001055 	.word	0x00001055
    2664:	40001c00 	.word	0x40001c00
    2668:	00001095 	.word	0x00001095
    266c:	00002541 	.word	0x00002541

00002670 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    2670:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    2672:	78d3      	ldrb	r3, [r2, #3]
    2674:	2b00      	cmp	r3, #0
    2676:	d135      	bne.n	26e4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    2678:	7813      	ldrb	r3, [r2, #0]
    267a:	2b80      	cmp	r3, #128	; 0x80
    267c:	d029      	beq.n	26d2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    267e:	061b      	lsls	r3, r3, #24
    2680:	2480      	movs	r4, #128	; 0x80
    2682:	0264      	lsls	r4, r4, #9
    2684:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    2686:	7854      	ldrb	r4, [r2, #1]
    2688:	2502      	movs	r5, #2
    268a:	43ac      	bics	r4, r5
    268c:	d106      	bne.n	269c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    268e:	7894      	ldrb	r4, [r2, #2]
    2690:	2c00      	cmp	r4, #0
    2692:	d120      	bne.n	26d6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    2694:	2480      	movs	r4, #128	; 0x80
    2696:	02a4      	lsls	r4, r4, #10
    2698:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    269a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    269c:	7854      	ldrb	r4, [r2, #1]
    269e:	3c01      	subs	r4, #1
    26a0:	2c01      	cmp	r4, #1
    26a2:	d91c      	bls.n	26de <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    26a4:	040d      	lsls	r5, r1, #16
    26a6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    26a8:	24a0      	movs	r4, #160	; 0xa0
    26aa:	05e4      	lsls	r4, r4, #23
    26ac:	432c      	orrs	r4, r5
    26ae:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26b0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    26b2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    26b4:	24d0      	movs	r4, #208	; 0xd0
    26b6:	0624      	lsls	r4, r4, #24
    26b8:	432c      	orrs	r4, r5
    26ba:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26bc:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    26be:	78d4      	ldrb	r4, [r2, #3]
    26c0:	2c00      	cmp	r4, #0
    26c2:	d122      	bne.n	270a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    26c4:	035b      	lsls	r3, r3, #13
    26c6:	d51c      	bpl.n	2702 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    26c8:	7893      	ldrb	r3, [r2, #2]
    26ca:	2b01      	cmp	r3, #1
    26cc:	d01e      	beq.n	270c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    26ce:	6141      	str	r1, [r0, #20]
    26d0:	e017      	b.n	2702 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    26d2:	2300      	movs	r3, #0
    26d4:	e7d7      	b.n	2686 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    26d6:	24c0      	movs	r4, #192	; 0xc0
    26d8:	02e4      	lsls	r4, r4, #11
    26da:	4323      	orrs	r3, r4
    26dc:	e7dd      	b.n	269a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    26de:	4c0d      	ldr	r4, [pc, #52]	; (2714 <_system_pinmux_config+0xa4>)
    26e0:	4023      	ands	r3, r4
    26e2:	e7df      	b.n	26a4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    26e4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    26e6:	040c      	lsls	r4, r1, #16
    26e8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    26ea:	23a0      	movs	r3, #160	; 0xa0
    26ec:	05db      	lsls	r3, r3, #23
    26ee:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26f0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    26f2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    26f4:	23d0      	movs	r3, #208	; 0xd0
    26f6:	061b      	lsls	r3, r3, #24
    26f8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    26fa:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    26fc:	78d3      	ldrb	r3, [r2, #3]
    26fe:	2b00      	cmp	r3, #0
    2700:	d103      	bne.n	270a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    2702:	7853      	ldrb	r3, [r2, #1]
    2704:	3b01      	subs	r3, #1
    2706:	2b01      	cmp	r3, #1
    2708:	d902      	bls.n	2710 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    270a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    270c:	6181      	str	r1, [r0, #24]
    270e:	e7f8      	b.n	2702 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    2710:	6081      	str	r1, [r0, #8]
}
    2712:	e7fa      	b.n	270a <_system_pinmux_config+0x9a>
    2714:	fffbffff 	.word	0xfffbffff

00002718 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    2718:	b510      	push	{r4, lr}
    271a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    271c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    271e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    2720:	2900      	cmp	r1, #0
    2722:	d105      	bne.n	2730 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    2724:	0943      	lsrs	r3, r0, #5
    2726:	01db      	lsls	r3, r3, #7
    2728:	2182      	movs	r1, #130	; 0x82
    272a:	05c9      	lsls	r1, r1, #23
    272c:	468c      	mov	ip, r1
    272e:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    2730:	241f      	movs	r4, #31
    2732:	4020      	ands	r0, r4
    2734:	2101      	movs	r1, #1
    2736:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    2738:	0018      	movs	r0, r3
    273a:	4b01      	ldr	r3, [pc, #4]	; (2740 <system_pinmux_pin_set_config+0x28>)
    273c:	4798      	blx	r3
}
    273e:	bd10      	pop	{r4, pc}
    2740:	00002671 	.word	0x00002671

00002744 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    2744:	4770      	bx	lr
	...

00002748 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    2748:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    274a:	4b05      	ldr	r3, [pc, #20]	; (2760 <system_init+0x18>)
    274c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    274e:	4b05      	ldr	r3, [pc, #20]	; (2764 <system_init+0x1c>)
    2750:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    2752:	4b05      	ldr	r3, [pc, #20]	; (2768 <system_init+0x20>)
    2754:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    2756:	4b05      	ldr	r3, [pc, #20]	; (276c <system_init+0x24>)
    2758:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    275a:	4b05      	ldr	r3, [pc, #20]	; (2770 <system_init+0x28>)
    275c:	4798      	blx	r3
}
    275e:	bd10      	pop	{r4, pc}
    2760:	000022f5 	.word	0x000022f5
    2764:	000010c5 	.word	0x000010c5
    2768:	00000f35 	.word	0x00000f35
    276c:	00002745 	.word	0x00002745
    2770:	00002745 	.word	0x00002745

00002774 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2774:	e7fe      	b.n	2774 <Dummy_Handler>
	...

00002778 <Reset_Handler>:
{
    2778:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    277a:	4a17      	ldr	r2, [pc, #92]	; (27d8 <Reset_Handler+0x60>)
    277c:	4b17      	ldr	r3, [pc, #92]	; (27dc <Reset_Handler+0x64>)
    277e:	429a      	cmp	r2, r3
    2780:	d011      	beq.n	27a6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2782:	001a      	movs	r2, r3
    2784:	4b16      	ldr	r3, [pc, #88]	; (27e0 <Reset_Handler+0x68>)
    2786:	429a      	cmp	r2, r3
    2788:	d20d      	bcs.n	27a6 <Reset_Handler+0x2e>
    278a:	4a16      	ldr	r2, [pc, #88]	; (27e4 <Reset_Handler+0x6c>)
    278c:	3303      	adds	r3, #3
    278e:	1a9b      	subs	r3, r3, r2
    2790:	089b      	lsrs	r3, r3, #2
    2792:	3301      	adds	r3, #1
    2794:	009b      	lsls	r3, r3, #2
    2796:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2798:	4810      	ldr	r0, [pc, #64]	; (27dc <Reset_Handler+0x64>)
    279a:	490f      	ldr	r1, [pc, #60]	; (27d8 <Reset_Handler+0x60>)
    279c:	588c      	ldr	r4, [r1, r2]
    279e:	5084      	str	r4, [r0, r2]
    27a0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    27a2:	429a      	cmp	r2, r3
    27a4:	d1fa      	bne.n	279c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    27a6:	4a10      	ldr	r2, [pc, #64]	; (27e8 <Reset_Handler+0x70>)
    27a8:	4b10      	ldr	r3, [pc, #64]	; (27ec <Reset_Handler+0x74>)
    27aa:	429a      	cmp	r2, r3
    27ac:	d20a      	bcs.n	27c4 <Reset_Handler+0x4c>
    27ae:	43d3      	mvns	r3, r2
    27b0:	490e      	ldr	r1, [pc, #56]	; (27ec <Reset_Handler+0x74>)
    27b2:	185b      	adds	r3, r3, r1
    27b4:	2103      	movs	r1, #3
    27b6:	438b      	bics	r3, r1
    27b8:	3304      	adds	r3, #4
    27ba:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    27bc:	2100      	movs	r1, #0
    27be:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    27c0:	4293      	cmp	r3, r2
    27c2:	d1fc      	bne.n	27be <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    27c4:	4a0a      	ldr	r2, [pc, #40]	; (27f0 <Reset_Handler+0x78>)
    27c6:	21ff      	movs	r1, #255	; 0xff
    27c8:	4b0a      	ldr	r3, [pc, #40]	; (27f4 <Reset_Handler+0x7c>)
    27ca:	438b      	bics	r3, r1
    27cc:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    27ce:	4b0a      	ldr	r3, [pc, #40]	; (27f8 <Reset_Handler+0x80>)
    27d0:	4798      	blx	r3
        main();
    27d2:	4b0a      	ldr	r3, [pc, #40]	; (27fc <Reset_Handler+0x84>)
    27d4:	4798      	blx	r3
    27d6:	e7fe      	b.n	27d6 <Reset_Handler+0x5e>
    27d8:	000052fc 	.word	0x000052fc
    27dc:	20000000 	.word	0x20000000
    27e0:	20000094 	.word	0x20000094
    27e4:	20000004 	.word	0x20000004
    27e8:	20000098 	.word	0x20000098
    27ec:	20000538 	.word	0x20000538
    27f0:	e000ed00 	.word	0xe000ed00
    27f4:	00000000 	.word	0x00000000
    27f8:	00003e49 	.word	0x00003e49
    27fc:	000037ad 	.word	0x000037ad

00002800 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    2800:	b5f0      	push	{r4, r5, r6, r7, lr}
    2802:	46c6      	mov	lr, r8
    2804:	b500      	push	{lr}
    2806:	000c      	movs	r4, r1
    2808:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    280a:	2800      	cmp	r0, #0
    280c:	d10f      	bne.n	282e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    280e:	2a00      	cmp	r2, #0
    2810:	dd11      	ble.n	2836 <_read+0x36>
    2812:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    2814:	4e09      	ldr	r6, [pc, #36]	; (283c <_read+0x3c>)
    2816:	4d0a      	ldr	r5, [pc, #40]	; (2840 <_read+0x40>)
    2818:	6830      	ldr	r0, [r6, #0]
    281a:	0021      	movs	r1, r4
    281c:	682b      	ldr	r3, [r5, #0]
    281e:	4798      	blx	r3
		ptr++;
    2820:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    2822:	42bc      	cmp	r4, r7
    2824:	d1f8      	bne.n	2818 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    2826:	4640      	mov	r0, r8
    2828:	bc04      	pop	{r2}
    282a:	4690      	mov	r8, r2
    282c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    282e:	2301      	movs	r3, #1
    2830:	425b      	negs	r3, r3
    2832:	4698      	mov	r8, r3
    2834:	e7f7      	b.n	2826 <_read+0x26>
	for (; len > 0; --len) {
    2836:	4680      	mov	r8, r0
    2838:	e7f5      	b.n	2826 <_read+0x26>
    283a:	46c0      	nop			; (mov r8, r8)
    283c:	200004a8 	.word	0x200004a8
    2840:	200004a0 	.word	0x200004a0

00002844 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    2844:	b5f0      	push	{r4, r5, r6, r7, lr}
    2846:	46c6      	mov	lr, r8
    2848:	b500      	push	{lr}
    284a:	000e      	movs	r6, r1
    284c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    284e:	3801      	subs	r0, #1
    2850:	2802      	cmp	r0, #2
    2852:	d810      	bhi.n	2876 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    2854:	2a00      	cmp	r2, #0
    2856:	d011      	beq.n	287c <_write+0x38>
    2858:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    285a:	4b0c      	ldr	r3, [pc, #48]	; (288c <_write+0x48>)
    285c:	4698      	mov	r8, r3
    285e:	4f0c      	ldr	r7, [pc, #48]	; (2890 <_write+0x4c>)
    2860:	4643      	mov	r3, r8
    2862:	6818      	ldr	r0, [r3, #0]
    2864:	5d31      	ldrb	r1, [r6, r4]
    2866:	683b      	ldr	r3, [r7, #0]
    2868:	4798      	blx	r3
    286a:	2800      	cmp	r0, #0
    286c:	db08      	blt.n	2880 <_write+0x3c>
			return -1;
		}
		++nChars;
    286e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    2870:	42a5      	cmp	r5, r4
    2872:	d1f5      	bne.n	2860 <_write+0x1c>
    2874:	e006      	b.n	2884 <_write+0x40>
		return -1;
    2876:	2401      	movs	r4, #1
    2878:	4264      	negs	r4, r4
    287a:	e003      	b.n	2884 <_write+0x40>
	for (; len != 0; --len) {
    287c:	0014      	movs	r4, r2
    287e:	e001      	b.n	2884 <_write+0x40>
			return -1;
    2880:	2401      	movs	r4, #1
    2882:	4264      	negs	r4, r4
	}
	return nChars;
}
    2884:	0020      	movs	r0, r4
    2886:	bc04      	pop	{r2}
    2888:	4690      	mov	r8, r2
    288a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    288c:	200004a8 	.word	0x200004a8
    2890:	200004a4 	.word	0x200004a4

00002894 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    2894:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2896:	4a06      	ldr	r2, [pc, #24]	; (28b0 <_sbrk+0x1c>)
    2898:	6812      	ldr	r2, [r2, #0]
    289a:	2a00      	cmp	r2, #0
    289c:	d004      	beq.n	28a8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    289e:	4a04      	ldr	r2, [pc, #16]	; (28b0 <_sbrk+0x1c>)
    28a0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    28a2:	18c3      	adds	r3, r0, r3
    28a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    28a6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    28a8:	4902      	ldr	r1, [pc, #8]	; (28b4 <_sbrk+0x20>)
    28aa:	4a01      	ldr	r2, [pc, #4]	; (28b0 <_sbrk+0x1c>)
    28ac:	6011      	str	r1, [r2, #0]
    28ae:	e7f6      	b.n	289e <_sbrk+0xa>
    28b0:	20000364 	.word	0x20000364
    28b4:	20002538 	.word	0x20002538

000028b8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    28b8:	2001      	movs	r0, #1
    28ba:	4240      	negs	r0, r0
    28bc:	4770      	bx	lr

000028be <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    28be:	2380      	movs	r3, #128	; 0x80
    28c0:	019b      	lsls	r3, r3, #6
    28c2:	604b      	str	r3, [r1, #4]

	return 0;
}
    28c4:	2000      	movs	r0, #0
    28c6:	4770      	bx	lr

000028c8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    28c8:	2001      	movs	r0, #1
    28ca:	4770      	bx	lr

000028cc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    28cc:	2000      	movs	r0, #0
    28ce:	4770      	bx	lr

000028d0 <setParameter>:
}

void setParameter(void)
{
	//to be done..
}
    28d0:	4770      	bx	lr
	...

000028d4 <can_send_standard_message>:
}


static void can_send_standard_message(uint32_t id_value, uint8_t *data,
uint32_t data_length)
{
    28d4:	b510      	push	{r4, lr}
    28d6:	b084      	sub	sp, #16
 * \param[out] tx_element  Pointer to transfer element struct to initialize to default values
 */
static inline void can_get_tx_buffer_element_defaults(
		struct can_tx_element *tx_element)
{
	tx_element->T0.reg = 0;
    28d8:	2300      	movs	r3, #0
    28da:	9300      	str	r3, [sp, #0]
	tx_element->T1.reg = CAN_TX_ELEMENT_T1_EFC |
    28dc:	2388      	movs	r3, #136	; 0x88
    28de:	041b      	lsls	r3, r3, #16
    28e0:	9301      	str	r3, [sp, #4]
	uint32_t i;
	struct can_tx_element tx_element;

	can_get_tx_buffer_element_defaults(&tx_element);
	tx_element.T0.reg |= CAN_TX_ELEMENT_T0_STANDARD_ID(id_value);
    28e2:	9b00      	ldr	r3, [sp, #0]
    28e4:	0480      	lsls	r0, r0, #18
    28e6:	4c12      	ldr	r4, [pc, #72]	; (2930 <can_send_standard_message+0x5c>)
    28e8:	4020      	ands	r0, r4
    28ea:	4318      	orrs	r0, r3
    28ec:	9000      	str	r0, [sp, #0]
	tx_element.T1.bit.DLC = data_length;
    28ee:	9b01      	ldr	r3, [sp, #4]
    28f0:	200f      	movs	r0, #15
    28f2:	4010      	ands	r0, r2
    28f4:	0400      	lsls	r0, r0, #16
    28f6:	4c0f      	ldr	r4, [pc, #60]	; (2934 <can_send_standard_message+0x60>)
    28f8:	4023      	ands	r3, r4
    28fa:	4303      	orrs	r3, r0
    28fc:	9301      	str	r3, [sp, #4]
	for (i = 0; i < data_length; i++) {
    28fe:	2a00      	cmp	r2, #0
    2900:	d007      	beq.n	2912 <can_send_standard_message+0x3e>
    2902:	2300      	movs	r3, #0
		tx_element.data[i] = *data;
    2904:	0018      	movs	r0, r3
    2906:	4468      	add	r0, sp
    2908:	5ccc      	ldrb	r4, [r1, r3]
    290a:	7204      	strb	r4, [r0, #8]
	for (i = 0; i < data_length; i++) {
    290c:	3301      	adds	r3, #1
    290e:	429a      	cmp	r2, r3
    2910:	d1f8      	bne.n	2904 <can_send_standard_message+0x30>
		data++;
	}

	can_set_tx_buffer_element(&can_instance, &tx_element,
    2912:	4c09      	ldr	r4, [pc, #36]	; (2938 <can_send_standard_message+0x64>)
    2914:	2200      	movs	r2, #0
    2916:	4669      	mov	r1, sp
    2918:	0020      	movs	r0, r4
    291a:	4b08      	ldr	r3, [pc, #32]	; (293c <can_send_standard_message+0x68>)
    291c:	4798      	blx	r3
	if (module_inst->hw->CCCR.reg & CAN_CCCR_CCE) {
    291e:	6823      	ldr	r3, [r4, #0]
    2920:	699a      	ldr	r2, [r3, #24]
    2922:	0792      	lsls	r2, r2, #30
    2924:	d402      	bmi.n	292c <can_send_standard_message+0x58>
	module_inst->hw->TXBAR.reg = trig_mask;
    2926:	2101      	movs	r1, #1
    2928:	22d0      	movs	r2, #208	; 0xd0
    292a:	5099      	str	r1, [r3, r2]
	CAN_TX_BUFFER_INDEX);
	can_tx_transfer_request(&can_instance, 1 << CAN_TX_BUFFER_INDEX);
}
    292c:	b004      	add	sp, #16
    292e:	bd10      	pop	{r4, pc}
    2930:	1ffc0000 	.word	0x1ffc0000
    2934:	fff0ffff 	.word	0xfff0ffff
    2938:	20000384 	.word	0x20000384
    293c:	00001569 	.word	0x00001569

00002940 <send_battery_data>:
{	
    2940:	b530      	push	{r4, r5, lr}
    2942:	b089      	sub	sp, #36	; 0x24
	rtc_calendar_get_time(&rtc_instance, &current_time);
    2944:	a906      	add	r1, sp, #24
    2946:	481b      	ldr	r0, [pc, #108]	; (29b4 <send_battery_data+0x74>)
    2948:	4b1b      	ldr	r3, [pc, #108]	; (29b8 <send_battery_data+0x78>)
    294a:	4798      	blx	r3
	battery_data[0] = (uint8_t)(0x01);
    294c:	4b1b      	ldr	r3, [pc, #108]	; (29bc <send_battery_data+0x7c>)
    294e:	2201      	movs	r2, #1
    2950:	701a      	strb	r2, [r3, #0]
	battery_data[1] = (uint8_t)((avg_charge_current_reading >> 4) & 0xff );
    2952:	481b      	ldr	r0, [pc, #108]	; (29c0 <send_battery_data+0x80>)
    2954:	8802      	ldrh	r2, [r0, #0]
    2956:	0912      	lsrs	r2, r2, #4
    2958:	705a      	strb	r2, [r3, #1]
 	battery_data[2] = (uint8_t)((avg_discharge_current_reading >> 4) & 0xff);
    295a:	4c1a      	ldr	r4, [pc, #104]	; (29c4 <send_battery_data+0x84>)
    295c:	8822      	ldrh	r2, [r4, #0]
    295e:	0912      	lsrs	r2, r2, #4
    2960:	709a      	strb	r2, [r3, #2]
	battery_data[3] = (uint8_t)((temprerature_value >> 8) & 0xff);
    2962:	4a19      	ldr	r2, [pc, #100]	; (29c8 <send_battery_data+0x88>)
    2964:	8812      	ldrh	r2, [r2, #0]
    2966:	0a12      	lsrs	r2, r2, #8
    2968:	70da      	strb	r2, [r3, #3]
	battery_data[4] = (uint8_t)(charge_remain_percentage);
    296a:	4a18      	ldr	r2, [pc, #96]	; (29cc <send_battery_data+0x8c>)
    296c:	7812      	ldrb	r2, [r2, #0]
    296e:	711a      	strb	r2, [r3, #4]
	battery_data[5] = (uint8_t)((battery_status << 1) | (charger_status & 1));
    2970:	4a17      	ldr	r2, [pc, #92]	; (29d0 <send_battery_data+0x90>)
    2972:	7812      	ldrb	r2, [r2, #0]
    2974:	0052      	lsls	r2, r2, #1
    2976:	4917      	ldr	r1, [pc, #92]	; (29d4 <send_battery_data+0x94>)
    2978:	780d      	ldrb	r5, [r1, #0]
    297a:	2101      	movs	r1, #1
    297c:	4029      	ands	r1, r5
    297e:	430a      	orrs	r2, r1
    2980:	715a      	strb	r2, [r3, #5]
	avg_charge_current_reading = 0;
    2982:	2300      	movs	r3, #0
    2984:	8003      	strh	r3, [r0, #0]
	avg_discharge_current_reading = 0;
    2986:	8023      	strh	r3, [r4, #0]
	tx_data[0] = commandType_report;
    2988:	ab01      	add	r3, sp, #4
    298a:	2204      	movs	r2, #4
    298c:	701a      	strb	r2, [r3, #0]
	tx_data[1] = commandAction_data;
    298e:	3a02      	subs	r2, #2
    2990:	705a      	strb	r2, [r3, #1]
    2992:	2300      	movs	r3, #0
		tx_data[i+2] = battery_data[i];
    2994:	4809      	ldr	r0, [pc, #36]	; (29bc <send_battery_data+0x7c>)
    2996:	aa01      	add	r2, sp, #4
    2998:	18d2      	adds	r2, r2, r3
    299a:	5c19      	ldrb	r1, [r3, r0]
    299c:	7091      	strb	r1, [r2, #2]
    299e:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<6; i++)
    29a0:	2b06      	cmp	r3, #6
    29a2:	d1f8      	bne.n	2996 <send_battery_data+0x56>
	can_send_standard_message(CAN_RX_STANDARD_FILTER_ID_1,tx_data,CONF_CAN_ELEMENT_DATA_SIZE);
    29a4:	2208      	movs	r2, #8
    29a6:	a901      	add	r1, sp, #4
    29a8:	480b      	ldr	r0, [pc, #44]	; (29d8 <send_battery_data+0x98>)
    29aa:	4b0c      	ldr	r3, [pc, #48]	; (29dc <send_battery_data+0x9c>)
    29ac:	4798      	blx	r3
}
    29ae:	b009      	add	sp, #36	; 0x24
    29b0:	bd30      	pop	{r4, r5, pc}
    29b2:	46c0      	nop			; (mov r8, r8)
    29b4:	200004ac 	.word	0x200004ac
    29b8:	000009d5 	.word	0x000009d5
    29bc:	20000370 	.word	0x20000370
    29c0:	20000368 	.word	0x20000368
    29c4:	2000036c 	.word	0x2000036c
    29c8:	20000512 	.word	0x20000512
    29cc:	200003bd 	.word	0x200003bd
    29d0:	20000380 	.word	0x20000380
    29d4:	200003c4 	.word	0x200003c4
    29d8:	00000285 	.word	0x00000285
    29dc:	000028d5 	.word	0x000028d5

000029e0 <send_board_time_data>:
{
    29e0:	b510      	push	{r4, lr}
    29e2:	b088      	sub	sp, #32
	rtc_calendar_get_time(&rtc_instance, &current_time);
    29e4:	ac06      	add	r4, sp, #24
    29e6:	0021      	movs	r1, r4
    29e8:	4813      	ldr	r0, [pc, #76]	; (2a38 <send_board_time_data+0x58>)
    29ea:	4b14      	ldr	r3, [pc, #80]	; (2a3c <send_board_time_data+0x5c>)
    29ec:	4798      	blx	r3
	time_data[0] = (uint8_t)((current_time.year >> 8) & 0xff);
    29ee:	88e2      	ldrh	r2, [r4, #6]
    29f0:	4b13      	ldr	r3, [pc, #76]	; (2a40 <send_board_time_data+0x60>)
    29f2:	0a11      	lsrs	r1, r2, #8
    29f4:	7019      	strb	r1, [r3, #0]
	time_data[1] = (uint8_t)(current_time.year & 0xff);
    29f6:	705a      	strb	r2, [r3, #1]
	time_data[2] = current_time.month;
    29f8:	7962      	ldrb	r2, [r4, #5]
    29fa:	709a      	strb	r2, [r3, #2]
	time_data[3] = current_time.day;
    29fc:	7922      	ldrb	r2, [r4, #4]
    29fe:	70da      	strb	r2, [r3, #3]
	time_data[4] = current_time.hour;
    2a00:	78a2      	ldrb	r2, [r4, #2]
    2a02:	711a      	strb	r2, [r3, #4]
	time_data[5] = current_time.minute;
    2a04:	7862      	ldrb	r2, [r4, #1]
    2a06:	715a      	strb	r2, [r3, #5]
	time_data[6] = current_time.second;
    2a08:	7822      	ldrb	r2, [r4, #0]
    2a0a:	719a      	strb	r2, [r3, #6]
	tx_data[0] = TX_TYPE_TIME_DATA;
    2a0c:	ab01      	add	r3, sp, #4
    2a0e:	2211      	movs	r2, #17
    2a10:	701a      	strb	r2, [r3, #0]
	tx_data[1] = TIME_DATA_LENGTH;
    2a12:	3a0a      	subs	r2, #10
    2a14:	705a      	strb	r2, [r3, #1]
    2a16:	2300      	movs	r3, #0
		tx_data[i+2] = time_data[i];
    2a18:	4809      	ldr	r0, [pc, #36]	; (2a40 <send_board_time_data+0x60>)
    2a1a:	aa01      	add	r2, sp, #4
    2a1c:	18d2      	adds	r2, r2, r3
    2a1e:	5c19      	ldrb	r1, [r3, r0]
    2a20:	7091      	strb	r1, [r2, #2]
    2a22:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<sizeof(battery_data); i++)
    2a24:	2b10      	cmp	r3, #16
    2a26:	d1f8      	bne.n	2a1a <send_board_time_data+0x3a>
	can_send_standard_message(CAN_RX_STANDARD_FILTER_ID_1,tx_data,CONF_CAN_ELEMENT_DATA_SIZE);
    2a28:	2208      	movs	r2, #8
    2a2a:	a901      	add	r1, sp, #4
    2a2c:	4805      	ldr	r0, [pc, #20]	; (2a44 <send_board_time_data+0x64>)
    2a2e:	4b06      	ldr	r3, [pc, #24]	; (2a48 <send_board_time_data+0x68>)
    2a30:	4798      	blx	r3
}
    2a32:	b008      	add	sp, #32
    2a34:	bd10      	pop	{r4, pc}
    2a36:	46c0      	nop			; (mov r8, r8)
    2a38:	200004ac 	.word	0x200004ac
    2a3c:	000009d5 	.word	0x000009d5
    2a40:	20000440 	.word	0x20000440
    2a44:	00000285 	.word	0x00000285
    2a48:	000028d5 	.word	0x000028d5

00002a4c <setTime>:
{
    2a4c:	b500      	push	{lr}
    2a4e:	b083      	sub	sp, #12
		struct rtc_calendar_time *const time)
{
	time->second = 0;
	time->minute = 0;
	time->hour   = 0;
	time->pm     = 0;
    2a50:	2300      	movs	r3, #0
    2a52:	466a      	mov	r2, sp
    2a54:	70d3      	strb	r3, [r2, #3]
	time.year   = (uint16_t)((commandData[0] << 8) + commandData[1]);
    2a56:	4b0b      	ldr	r3, [pc, #44]	; (2a84 <setTime+0x38>)
    2a58:	7819      	ldrb	r1, [r3, #0]
    2a5a:	0209      	lsls	r1, r1, #8
    2a5c:	785a      	ldrb	r2, [r3, #1]
    2a5e:	1852      	adds	r2, r2, r1
    2a60:	4669      	mov	r1, sp
    2a62:	80ca      	strh	r2, [r1, #6]
	time.month  = commandData[2];
    2a64:	789a      	ldrb	r2, [r3, #2]
    2a66:	714a      	strb	r2, [r1, #5]
	time.day    = commandData[3];
    2a68:	78da      	ldrb	r2, [r3, #3]
    2a6a:	710a      	strb	r2, [r1, #4]
	time.hour   = commandData[4];
    2a6c:	791a      	ldrb	r2, [r3, #4]
    2a6e:	708a      	strb	r2, [r1, #2]
	time.minute = commandData[5];
    2a70:	795a      	ldrb	r2, [r3, #5]
    2a72:	704a      	strb	r2, [r1, #1]
	time.second = commandData[6];
    2a74:	799b      	ldrb	r3, [r3, #6]
    2a76:	700b      	strb	r3, [r1, #0]
	rtc_calendar_set_time(&rtc_instance, &time);
    2a78:	4803      	ldr	r0, [pc, #12]	; (2a88 <setTime+0x3c>)
    2a7a:	4b04      	ldr	r3, [pc, #16]	; (2a8c <setTime+0x40>)
    2a7c:	4798      	blx	r3
}
    2a7e:	b003      	add	sp, #12
    2a80:	bd00      	pop	{pc}
    2a82:	46c0      	nop			; (mov r8, r8)
    2a84:	200003c8 	.word	0x200003c8
    2a88:	200004ac 	.word	0x200004ac
    2a8c:	000009b5 	.word	0x000009b5

00002a90 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2a90:	b570      	push	{r4, r5, r6, lr}
    2a92:	b082      	sub	sp, #8
    2a94:	0005      	movs	r5, r0
    2a96:	000e      	movs	r6, r1
	uint16_t temp = 0;
    2a98:	2200      	movs	r2, #0
    2a9a:	466b      	mov	r3, sp
    2a9c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2a9e:	4c06      	ldr	r4, [pc, #24]	; (2ab8 <usart_serial_getchar+0x28>)
    2aa0:	466b      	mov	r3, sp
    2aa2:	1d99      	adds	r1, r3, #6
    2aa4:	0028      	movs	r0, r5
    2aa6:	47a0      	blx	r4
    2aa8:	2800      	cmp	r0, #0
    2aaa:	d1f9      	bne.n	2aa0 <usart_serial_getchar+0x10>

	*c = temp;
    2aac:	466b      	mov	r3, sp
    2aae:	3306      	adds	r3, #6
    2ab0:	881b      	ldrh	r3, [r3, #0]
    2ab2:	7033      	strb	r3, [r6, #0]
}
    2ab4:	b002      	add	sp, #8
    2ab6:	bd70      	pop	{r4, r5, r6, pc}
    2ab8:	00001e9d 	.word	0x00001e9d

00002abc <usart_serial_putchar>:
{
    2abc:	b570      	push	{r4, r5, r6, lr}
    2abe:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    2ac0:	b28c      	uxth	r4, r1
    2ac2:	4e03      	ldr	r6, [pc, #12]	; (2ad0 <usart_serial_putchar+0x14>)
    2ac4:	0021      	movs	r1, r4
    2ac6:	0028      	movs	r0, r5
    2ac8:	47b0      	blx	r6
    2aca:	2800      	cmp	r0, #0
    2acc:	d1fa      	bne.n	2ac4 <usart_serial_putchar+0x8>
}
    2ace:	bd70      	pop	{r4, r5, r6, pc}
    2ad0:	00001e71 	.word	0x00001e71

00002ad4 <configure_port_pins>:
{
    2ad4:	b570      	push	{r4, r5, r6, lr}
	config->powersave  = false;
    2ad6:	4c07      	ldr	r4, [pc, #28]	; (2af4 <configure_port_pins+0x20>)
    2ad8:	2300      	movs	r3, #0
    2ada:	70a3      	strb	r3, [r4, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_NONE;
    2adc:	7063      	strb	r3, [r4, #1]
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    2ade:	3301      	adds	r3, #1
    2ae0:	7023      	strb	r3, [r4, #0]
	port_pin_set_config(EXT1_PIN_5, &config_port_pin);
    2ae2:	0021      	movs	r1, r4
    2ae4:	2014      	movs	r0, #20
    2ae6:	4d04      	ldr	r5, [pc, #16]	; (2af8 <configure_port_pins+0x24>)
    2ae8:	47a8      	blx	r5
	port_pin_set_config(EXT1_PIN_6, &config_port_pin);
    2aea:	0021      	movs	r1, r4
    2aec:	2015      	movs	r0, #21
    2aee:	47a8      	blx	r5
}
    2af0:	bd70      	pop	{r4, r5, r6, pc}
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	200004ec 	.word	0x200004ec
    2af8:	000015dd 	.word	0x000015dd

00002afc <configure_adc>:
{
    2afc:	b530      	push	{r4, r5, lr}
    2afe:	b08d      	sub	sp, #52	; 0x34
	adc_get_config_defaults(&config_adc);
    2b00:	ac01      	add	r4, sp, #4
    2b02:	0020      	movs	r0, r4
    2b04:	4b19      	ldr	r3, [pc, #100]	; (2b6c <configure_adc+0x70>)
    2b06:	4798      	blx	r3
	config_adc.clock_source = GCLK_GENERATOR_0;
    2b08:	2300      	movs	r3, #0
    2b0a:	7023      	strb	r3, [r4, #0]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
    2b0c:	3303      	adds	r3, #3
    2b0e:	70a3      	strb	r3, [r4, #2]
	config_adc.reference =  ADC_REFERENCE_AREFA;
    2b10:	7063      	strb	r3, [r4, #1]
	config_adc.positive_input = ADC_POSITIVE_INPUT_PIN8;
    2b12:	3305      	adds	r3, #5
    2b14:	7123      	strb	r3, [r4, #4]
	config_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    2b16:	23c0      	movs	r3, #192	; 0xc0
    2b18:	015b      	lsls	r3, r3, #5
    2b1a:	80e3      	strh	r3, [r4, #6]
	config_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;
    2b1c:	2304      	movs	r3, #4
    2b1e:	7563      	strb	r3, [r4, #21]
	adc_init(&adc_instance, ADC1, &config_adc);
    2b20:	4d13      	ldr	r5, [pc, #76]	; (2b70 <configure_adc+0x74>)
    2b22:	0022      	movs	r2, r4
    2b24:	4913      	ldr	r1, [pc, #76]	; (2b74 <configure_adc+0x78>)
    2b26:	0028      	movs	r0, r5
    2b28:	4b13      	ldr	r3, [pc, #76]	; (2b78 <configure_adc+0x7c>)
    2b2a:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    2b2c:	682c      	ldr	r4, [r5, #0]
    2b2e:	8c23      	ldrh	r3, [r4, #32]
    2b30:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2b32:	2b00      	cmp	r3, #0
    2b34:	d1fb      	bne.n	2b2e <configure_adc+0x32>
			_adc_get_inst_index(adc_module)));
    2b36:	0020      	movs	r0, r4
    2b38:	4b10      	ldr	r3, [pc, #64]	; (2b7c <configure_adc+0x80>)
    2b3a:	4798      	blx	r3
	return (enum system_interrupt_vector)adc_interrupt_vectors[inst_num];
    2b3c:	4b10      	ldr	r3, [pc, #64]	; (2b80 <configure_adc+0x84>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2b3e:	5c1b      	ldrb	r3, [r3, r0]
    2b40:	221f      	movs	r2, #31
    2b42:	401a      	ands	r2, r3
    2b44:	2301      	movs	r3, #1
    2b46:	4093      	lsls	r3, r2
    2b48:	4a0e      	ldr	r2, [pc, #56]	; (2b84 <configure_adc+0x88>)
    2b4a:	6013      	str	r3, [r2, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    2b4c:	2307      	movs	r3, #7
    2b4e:	7123      	strb	r3, [r4, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    2b50:	71a3      	strb	r3, [r4, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    2b52:	7823      	ldrb	r3, [r4, #0]
    2b54:	2202      	movs	r2, #2
    2b56:	4313      	orrs	r3, r2
    2b58:	7023      	strb	r3, [r4, #0]
	Adc *const adc_module = module_inst->hw;
    2b5a:	4b05      	ldr	r3, [pc, #20]	; (2b70 <configure_adc+0x74>)
    2b5c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    2b5e:	8c13      	ldrh	r3, [r2, #32]
    2b60:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2b62:	2b00      	cmp	r3, #0
    2b64:	d1fb      	bne.n	2b5e <configure_adc+0x62>
}
    2b66:	b00d      	add	sp, #52	; 0x34
    2b68:	bd30      	pop	{r4, r5, pc}
    2b6a:	46c0      	nop			; (mov r8, r8)
    2b6c:	00000141 	.word	0x00000141
    2b70:	20000514 	.word	0x20000514
    2b74:	42004800 	.word	0x42004800
    2b78:	00000185 	.word	0x00000185
    2b7c:	0000011d 	.word	0x0000011d
    2b80:	00005154 	.word	0x00005154
    2b84:	e000e100 	.word	0xe000e100

00002b88 <configure_dac>:
{
    2b88:	b500      	push	{lr}
    2b8a:	b083      	sub	sp, #12
	dac_get_config_defaults(&config_dac);
    2b8c:	4668      	mov	r0, sp
    2b8e:	4b05      	ldr	r3, [pc, #20]	; (2ba4 <configure_dac+0x1c>)
    2b90:	4798      	blx	r3
	config_dac.reference = DAC_REFERENCE_AVCC;
    2b92:	2340      	movs	r3, #64	; 0x40
    2b94:	466a      	mov	r2, sp
    2b96:	7013      	strb	r3, [r2, #0]
	dac_init(&dac_instance, DAC, &config_dac);
    2b98:	4903      	ldr	r1, [pc, #12]	; (2ba8 <configure_dac+0x20>)
    2b9a:	4804      	ldr	r0, [pc, #16]	; (2bac <configure_dac+0x24>)
    2b9c:	4b04      	ldr	r3, [pc, #16]	; (2bb0 <configure_dac+0x28>)
    2b9e:	4798      	blx	r3
}
    2ba0:	b003      	add	sp, #12
    2ba2:	bd00      	pop	{pc}
    2ba4:	0000076d 	.word	0x0000076d
    2ba8:	42005400 	.word	0x42005400
    2bac:	200004fc 	.word	0x200004fc
    2bb0:	00000781 	.word	0x00000781

00002bb4 <configure_dac_channel>:
{
    2bb4:	b510      	push	{r4, lr}
    2bb6:	b082      	sub	sp, #8
	dac_chan_get_config_defaults(&config_dac_chan);
    2bb8:	a801      	add	r0, sp, #4
    2bba:	4b08      	ldr	r3, [pc, #32]	; (2bdc <configure_dac_channel+0x28>)
    2bbc:	4798      	blx	r3
	dac_chan_set_config(&dac_instance, DAC_CHANNEL_0, &config_dac_chan);
    2bbe:	4c08      	ldr	r4, [pc, #32]	; (2be0 <configure_dac_channel+0x2c>)
    2bc0:	aa01      	add	r2, sp, #4
    2bc2:	2100      	movs	r1, #0
    2bc4:	0020      	movs	r0, r4
    2bc6:	4b07      	ldr	r3, [pc, #28]	; (2be4 <configure_dac_channel+0x30>)
    2bc8:	4798      	blx	r3
	dac_chan_enable(&dac_instance, DAC_CHANNEL_0);
    2bca:	2100      	movs	r1, #0
    2bcc:	0020      	movs	r0, r4
    2bce:	4b06      	ldr	r3, [pc, #24]	; (2be8 <configure_dac_channel+0x34>)
    2bd0:	4798      	blx	r3
	dac_enable(&dac_instance);
    2bd2:	0020      	movs	r0, r4
    2bd4:	4b05      	ldr	r3, [pc, #20]	; (2bec <configure_dac_channel+0x38>)
    2bd6:	4798      	blx	r3
}
    2bd8:	b002      	add	sp, #8
    2bda:	bd10      	pop	{r4, pc}
    2bdc:	00000881 	.word	0x00000881
    2be0:	200004fc 	.word	0x200004fc
    2be4:	00000883 	.word	0x00000883
    2be8:	00000885 	.word	0x00000885
    2bec:	00000839 	.word	0x00000839

00002bf0 <adc_detect>:
uint8_t adc_detect(uint16_t value) {
    2bf0:	b570      	push	{r4, r5, r6, lr}
	Adc *const adc_module = module_inst->hw;
    2bf2:	4b24      	ldr	r3, [pc, #144]	; (2c84 <adc_detect+0x94>)
    2bf4:	6819      	ldr	r1, [r3, #0]
    2bf6:	8c0b      	ldrh	r3, [r1, #32]
    2bf8:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2bfa:	2b00      	cmp	r3, #0
    2bfc:	d1fb      	bne.n	2bf6 <adc_detect+0x6>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    2bfe:	890b      	ldrh	r3, [r1, #8]
    2c00:	221f      	movs	r2, #31
    2c02:	4393      	bics	r3, r2
    2c04:	3a14      	subs	r2, #20
    2c06:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    2c08:	810b      	strh	r3, [r1, #8]
    2c0a:	8c0b      	ldrh	r3, [r1, #32]
    2c0c:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2c0e:	2b00      	cmp	r3, #0
    2c10:	d1fb      	bne.n	2c0a <adc_detect+0x1a>
    2c12:	8c0b      	ldrh	r3, [r1, #32]
    2c14:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2c16:	2b00      	cmp	r3, #0
    2c18:	d1fb      	bne.n	2c12 <adc_detect+0x22>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2c1a:	7e0b      	ldrb	r3, [r1, #24]
    2c1c:	2202      	movs	r2, #2
    2c1e:	4313      	orrs	r3, r2
    2c20:	760b      	strb	r3, [r1, #24]
    2c22:	8c0b      	ldrh	r3, [r1, #32]
    2c24:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2c26:	2b00      	cmp	r3, #0
    2c28:	d1fb      	bne.n	2c22 <adc_detect+0x32>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2c2a:	2401      	movs	r4, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2c2c:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    2c2e:	2502      	movs	r5, #2
    2c30:	e001      	b.n	2c36 <adc_detect+0x46>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2c32:	4214      	tst	r4, r2
    2c34:	d10a      	bne.n	2c4c <adc_detect+0x5c>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2c36:	798b      	ldrb	r3, [r1, #6]
    2c38:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2c3a:	0022      	movs	r2, r4
    2c3c:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    2c3e:	421e      	tst	r6, r3
    2c40:	d000      	beq.n	2c44 <adc_detect+0x54>
		status_flags |= ADC_STATUS_WINDOW;
    2c42:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2c44:	421d      	tst	r5, r3
    2c46:	d0f4      	beq.n	2c32 <adc_detect+0x42>
		status_flags |= ADC_STATUS_OVERRUN;
    2c48:	4332      	orrs	r2, r6
    2c4a:	e7f2      	b.n	2c32 <adc_detect+0x42>
	*result = adc_module->RESULT.reg;
    2c4c:	8c8d      	ldrh	r5, [r1, #36]	; 0x24
    2c4e:	b2ad      	uxth	r5, r5
	adc_module->INTFLAG.reg = int_flags;
    2c50:	2201      	movs	r2, #1
    2c52:	718a      	strb	r2, [r1, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2c54:	798c      	ldrb	r4, [r1, #6]
    2c56:	b2e4      	uxtb	r4, r4
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2c58:	4022      	ands	r2, r4
	if (int_flags & ADC_INTFLAG_WINMON) {
    2c5a:	0763      	lsls	r3, r4, #29
    2c5c:	d501      	bpl.n	2c62 <adc_detect+0x72>
		status_flags |= ADC_STATUS_WINDOW;
    2c5e:	2302      	movs	r3, #2
    2c60:	431a      	orrs	r2, r3
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2c62:	07a3      	lsls	r3, r4, #30
    2c64:	d501      	bpl.n	2c6a <adc_detect+0x7a>
		status_flags |= ADC_STATUS_OVERRUN;
    2c66:	2304      	movs	r3, #4
    2c68:	431a      	orrs	r2, r3
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2c6a:	0753      	lsls	r3, r2, #29
    2c6c:	d501      	bpl.n	2c72 <adc_detect+0x82>
	adc_module->INTFLAG.reg = int_flags;
    2c6e:	2302      	movs	r3, #2
    2c70:	718b      	strb	r3, [r1, #6]
	vol = vol * 5000 / 4096;
    2c72:	4b05      	ldr	r3, [pc, #20]	; (2c88 <adc_detect+0x98>)
    2c74:	436b      	muls	r3, r5
    2c76:	131b      	asrs	r3, r3, #12
	return (vol > value)? 1 : 0;
    2c78:	b29b      	uxth	r3, r3
    2c7a:	4298      	cmp	r0, r3
    2c7c:	4180      	sbcs	r0, r0
    2c7e:	4240      	negs	r0, r0
};
    2c80:	bd70      	pop	{r4, r5, r6, pc}
    2c82:	46c0      	nop			; (mov r8, r8)
    2c84:	20000514 	.word	0x20000514
    2c88:	00001388 	.word	0x00001388

00002c8c <adc_sampling>:
{
    2c8c:	b570      	push	{r4, r5, r6, lr}
	Adc *const adc_module = module_inst->hw;
    2c8e:	4b70      	ldr	r3, [pc, #448]	; (2e50 <adc_sampling+0x1c4>)
    2c90:	681b      	ldr	r3, [r3, #0]
    2c92:	8c1a      	ldrh	r2, [r3, #32]
    2c94:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    2c96:	2a00      	cmp	r2, #0
    2c98:	d1fb      	bne.n	2c92 <adc_sampling+0x6>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    2c9a:	891a      	ldrh	r2, [r3, #8]
    2c9c:	211f      	movs	r1, #31
    2c9e:	438a      	bics	r2, r1
    2ca0:	391b      	subs	r1, #27
    2ca2:	430a      	orrs	r2, r1
	adc_module->INPUTCTRL.reg =
    2ca4:	811a      	strh	r2, [r3, #8]
    2ca6:	8c1a      	ldrh	r2, [r3, #32]
    2ca8:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    2caa:	2a00      	cmp	r2, #0
    2cac:	d1fb      	bne.n	2ca6 <adc_sampling+0x1a>
    2cae:	8c1a      	ldrh	r2, [r3, #32]
    2cb0:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    2cb2:	2a00      	cmp	r2, #0
    2cb4:	d1fb      	bne.n	2cae <adc_sampling+0x22>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2cb6:	7e1a      	ldrb	r2, [r3, #24]
    2cb8:	2102      	movs	r1, #2
    2cba:	430a      	orrs	r2, r1
    2cbc:	761a      	strb	r2, [r3, #24]
    2cbe:	8c1a      	ldrh	r2, [r3, #32]
    2cc0:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    2cc2:	2a00      	cmp	r2, #0
    2cc4:	d1fb      	bne.n	2cbe <adc_sampling+0x32>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2cc6:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2cc8:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    2cca:	2402      	movs	r4, #2
    2ccc:	e001      	b.n	2cd2 <adc_sampling+0x46>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2cce:	4208      	tst	r0, r1
    2cd0:	d10a      	bne.n	2ce8 <adc_sampling+0x5c>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2cd2:	799a      	ldrb	r2, [r3, #6]
    2cd4:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2cd6:	0001      	movs	r1, r0
    2cd8:	4011      	ands	r1, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    2cda:	4215      	tst	r5, r2
    2cdc:	d000      	beq.n	2ce0 <adc_sampling+0x54>
		status_flags |= ADC_STATUS_WINDOW;
    2cde:	4321      	orrs	r1, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2ce0:	4214      	tst	r4, r2
    2ce2:	d0f4      	beq.n	2cce <adc_sampling+0x42>
		status_flags |= ADC_STATUS_OVERRUN;
    2ce4:	4329      	orrs	r1, r5
    2ce6:	e7f2      	b.n	2cce <adc_sampling+0x42>
	*result = adc_module->RESULT.reg;
    2ce8:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    2cea:	4a5a      	ldr	r2, [pc, #360]	; (2e54 <adc_sampling+0x1c8>)
    2cec:	8011      	strh	r1, [r2, #0]
	adc_module->INTFLAG.reg = int_flags;
    2cee:	2201      	movs	r2, #1
    2cf0:	719a      	strb	r2, [r3, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2cf2:	7999      	ldrb	r1, [r3, #6]
    2cf4:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2cf6:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2cf8:	0748      	lsls	r0, r1, #29
    2cfa:	d501      	bpl.n	2d00 <adc_sampling+0x74>
		status_flags |= ADC_STATUS_WINDOW;
    2cfc:	2002      	movs	r0, #2
    2cfe:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2d00:	0789      	lsls	r1, r1, #30
    2d02:	d501      	bpl.n	2d08 <adc_sampling+0x7c>
		status_flags |= ADC_STATUS_OVERRUN;
    2d04:	2104      	movs	r1, #4
    2d06:	430a      	orrs	r2, r1
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2d08:	0752      	lsls	r2, r2, #29
    2d0a:	d501      	bpl.n	2d10 <adc_sampling+0x84>
	adc_module->INTFLAG.reg = int_flags;
    2d0c:	2202      	movs	r2, #2
    2d0e:	719a      	strb	r2, [r3, #6]
    2d10:	8c1a      	ldrh	r2, [r3, #32]
    2d12:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    2d14:	2a00      	cmp	r2, #0
    2d16:	d1fb      	bne.n	2d10 <adc_sampling+0x84>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    2d18:	891a      	ldrh	r2, [r3, #8]
    2d1a:	211f      	movs	r1, #31
    2d1c:	438a      	bics	r2, r1
    2d1e:	391a      	subs	r1, #26
    2d20:	430a      	orrs	r2, r1
	adc_module->INPUTCTRL.reg =
    2d22:	811a      	strh	r2, [r3, #8]
    2d24:	8c1a      	ldrh	r2, [r3, #32]
    2d26:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    2d28:	2a00      	cmp	r2, #0
    2d2a:	d1fb      	bne.n	2d24 <adc_sampling+0x98>
    2d2c:	8c1a      	ldrh	r2, [r3, #32]
    2d2e:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    2d30:	2a00      	cmp	r2, #0
    2d32:	d1fb      	bne.n	2d2c <adc_sampling+0xa0>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2d34:	7e1a      	ldrb	r2, [r3, #24]
    2d36:	2102      	movs	r1, #2
    2d38:	430a      	orrs	r2, r1
    2d3a:	761a      	strb	r2, [r3, #24]
    2d3c:	8c1a      	ldrh	r2, [r3, #32]
    2d3e:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    2d40:	2a00      	cmp	r2, #0
    2d42:	d1fb      	bne.n	2d3c <adc_sampling+0xb0>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2d44:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2d46:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    2d48:	2402      	movs	r4, #2
    2d4a:	e001      	b.n	2d50 <adc_sampling+0xc4>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2d4c:	4208      	tst	r0, r1
    2d4e:	d10a      	bne.n	2d66 <adc_sampling+0xda>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2d50:	799a      	ldrb	r2, [r3, #6]
    2d52:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2d54:	0001      	movs	r1, r0
    2d56:	4011      	ands	r1, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    2d58:	4215      	tst	r5, r2
    2d5a:	d000      	beq.n	2d5e <adc_sampling+0xd2>
		status_flags |= ADC_STATUS_WINDOW;
    2d5c:	4321      	orrs	r1, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2d5e:	4214      	tst	r4, r2
    2d60:	d0f4      	beq.n	2d4c <adc_sampling+0xc0>
		status_flags |= ADC_STATUS_OVERRUN;
    2d62:	4329      	orrs	r1, r5
    2d64:	e7f2      	b.n	2d4c <adc_sampling+0xc0>
	*result = adc_module->RESULT.reg;
    2d66:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    2d68:	b280      	uxth	r0, r0
    2d6a:	4a3b      	ldr	r2, [pc, #236]	; (2e58 <adc_sampling+0x1cc>)
    2d6c:	8010      	strh	r0, [r2, #0]
	adc_module->INTFLAG.reg = int_flags;
    2d6e:	2201      	movs	r2, #1
    2d70:	719a      	strb	r2, [r3, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2d72:	7999      	ldrb	r1, [r3, #6]
    2d74:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2d76:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2d78:	074c      	lsls	r4, r1, #29
    2d7a:	d501      	bpl.n	2d80 <adc_sampling+0xf4>
		status_flags |= ADC_STATUS_WINDOW;
    2d7c:	2402      	movs	r4, #2
    2d7e:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2d80:	0789      	lsls	r1, r1, #30
    2d82:	d501      	bpl.n	2d88 <adc_sampling+0xfc>
		status_flags |= ADC_STATUS_OVERRUN;
    2d84:	2104      	movs	r1, #4
    2d86:	430a      	orrs	r2, r1
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2d88:	0752      	lsls	r2, r2, #29
    2d8a:	d501      	bpl.n	2d90 <adc_sampling+0x104>
	adc_module->INTFLAG.reg = int_flags;
    2d8c:	2202      	movs	r2, #2
    2d8e:	719a      	strb	r2, [r3, #6]
		charge_sample_num++;
    2d90:	4932      	ldr	r1, [pc, #200]	; (2e5c <adc_sampling+0x1d0>)
    2d92:	680a      	ldr	r2, [r1, #0]
    2d94:	3201      	adds	r2, #1
    2d96:	600a      	str	r2, [r1, #0]
		total_charge_current += (charge_current_adc_result * 5000) / 4096 / 2;
    2d98:	4c31      	ldr	r4, [pc, #196]	; (2e60 <adc_sampling+0x1d4>)
    2d9a:	4a32      	ldr	r2, [pc, #200]	; (2e64 <adc_sampling+0x1d8>)
    2d9c:	4342      	muls	r2, r0
    2d9e:	1350      	asrs	r0, r2, #13
    2da0:	17d1      	asrs	r1, r2, #31
    2da2:	6825      	ldr	r5, [r4, #0]
    2da4:	6866      	ldr	r6, [r4, #4]
    2da6:	1940      	adds	r0, r0, r5
    2da8:	4171      	adcs	r1, r6
    2daa:	6020      	str	r0, [r4, #0]
    2dac:	6061      	str	r1, [r4, #4]
    2dae:	8c1a      	ldrh	r2, [r3, #32]
    2db0:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    2db2:	2a00      	cmp	r2, #0
    2db4:	d1fb      	bne.n	2dae <adc_sampling+0x122>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    2db6:	891a      	ldrh	r2, [r3, #8]
    2db8:	211f      	movs	r1, #31
    2dba:	438a      	bics	r2, r1
    2dbc:	3915      	subs	r1, #21
    2dbe:	430a      	orrs	r2, r1
	adc_module->INPUTCTRL.reg =
    2dc0:	811a      	strh	r2, [r3, #8]
    2dc2:	8c1a      	ldrh	r2, [r3, #32]
    2dc4:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    2dc6:	2a00      	cmp	r2, #0
    2dc8:	d1fb      	bne.n	2dc2 <adc_sampling+0x136>
    2dca:	8c1a      	ldrh	r2, [r3, #32]
    2dcc:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    2dce:	2a00      	cmp	r2, #0
    2dd0:	d1fb      	bne.n	2dca <adc_sampling+0x13e>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2dd2:	7e1a      	ldrb	r2, [r3, #24]
    2dd4:	2102      	movs	r1, #2
    2dd6:	430a      	orrs	r2, r1
    2dd8:	761a      	strb	r2, [r3, #24]
    2dda:	8c1a      	ldrh	r2, [r3, #32]
    2ddc:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    2dde:	2a00      	cmp	r2, #0
    2de0:	d1fb      	bne.n	2dda <adc_sampling+0x14e>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2de2:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2de4:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    2de6:	2402      	movs	r4, #2
    2de8:	e001      	b.n	2dee <adc_sampling+0x162>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    2dea:	4208      	tst	r0, r1
    2dec:	d10a      	bne.n	2e04 <adc_sampling+0x178>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2dee:	799a      	ldrb	r2, [r3, #6]
    2df0:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2df2:	0001      	movs	r1, r0
    2df4:	4011      	ands	r1, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    2df6:	4215      	tst	r5, r2
    2df8:	d000      	beq.n	2dfc <adc_sampling+0x170>
		status_flags |= ADC_STATUS_WINDOW;
    2dfa:	4321      	orrs	r1, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2dfc:	4214      	tst	r4, r2
    2dfe:	d0f4      	beq.n	2dea <adc_sampling+0x15e>
		status_flags |= ADC_STATUS_OVERRUN;
    2e00:	4329      	orrs	r1, r5
    2e02:	e7f2      	b.n	2dea <adc_sampling+0x15e>
	*result = adc_module->RESULT.reg;
    2e04:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    2e06:	b280      	uxth	r0, r0
    2e08:	4a17      	ldr	r2, [pc, #92]	; (2e68 <adc_sampling+0x1dc>)
    2e0a:	8010      	strh	r0, [r2, #0]
	adc_module->INTFLAG.reg = int_flags;
    2e0c:	2201      	movs	r2, #1
    2e0e:	719a      	strb	r2, [r3, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    2e10:	7999      	ldrb	r1, [r3, #6]
    2e12:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    2e14:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    2e16:	074c      	lsls	r4, r1, #29
    2e18:	d501      	bpl.n	2e1e <adc_sampling+0x192>
		status_flags |= ADC_STATUS_WINDOW;
    2e1a:	2402      	movs	r4, #2
    2e1c:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2e1e:	0789      	lsls	r1, r1, #30
    2e20:	d501      	bpl.n	2e26 <adc_sampling+0x19a>
		status_flags |= ADC_STATUS_OVERRUN;
    2e22:	2104      	movs	r1, #4
    2e24:	430a      	orrs	r2, r1
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2e26:	0752      	lsls	r2, r2, #29
    2e28:	d501      	bpl.n	2e2e <adc_sampling+0x1a2>
	adc_module->INTFLAG.reg = int_flags;
    2e2a:	2202      	movs	r2, #2
    2e2c:	719a      	strb	r2, [r3, #6]
		discharge_sample_num ++;	
    2e2e:	4a0f      	ldr	r2, [pc, #60]	; (2e6c <adc_sampling+0x1e0>)
    2e30:	6813      	ldr	r3, [r2, #0]
    2e32:	3301      	adds	r3, #1
    2e34:	6013      	str	r3, [r2, #0]
		total_discharge_current += (discharge_current_adc_result * 5000) / 4096 / 2;
    2e36:	4c0e      	ldr	r4, [pc, #56]	; (2e70 <adc_sampling+0x1e4>)
    2e38:	490a      	ldr	r1, [pc, #40]	; (2e64 <adc_sampling+0x1d8>)
    2e3a:	4341      	muls	r1, r0
    2e3c:	134a      	asrs	r2, r1, #13
    2e3e:	17cb      	asrs	r3, r1, #31
    2e40:	6820      	ldr	r0, [r4, #0]
    2e42:	6861      	ldr	r1, [r4, #4]
    2e44:	1812      	adds	r2, r2, r0
    2e46:	414b      	adcs	r3, r1
    2e48:	6022      	str	r2, [r4, #0]
    2e4a:	6063      	str	r3, [r4, #4]
}
    2e4c:	bd70      	pop	{r4, r5, r6, pc}
    2e4e:	46c0      	nop			; (mov r8, r8)
    2e50:	20000514 	.word	0x20000514
    2e54:	200004e8 	.word	0x200004e8
    2e58:	20000510 	.word	0x20000510
    2e5c:	200003c0 	.word	0x200003c0
    2e60:	20000450 	.word	0x20000450
    2e64:	00001388 	.word	0x00001388
    2e68:	20000504 	.word	0x20000504
    2e6c:	20000400 	.word	0x20000400
    2e70:	20000458 	.word	0x20000458

00002e74 <battery_status_update>:
	if (charger_status == 1)
    2e74:	4b17      	ldr	r3, [pc, #92]	; (2ed4 <battery_status_update+0x60>)
    2e76:	781b      	ldrb	r3, [r3, #0]
    2e78:	2b01      	cmp	r3, #1
    2e7a:	d00e      	beq.n	2e9a <battery_status_update+0x26>
	else if (charge_voltage_adc_result > 0xff)
    2e7c:	4b16      	ldr	r3, [pc, #88]	; (2ed8 <battery_status_update+0x64>)
    2e7e:	881b      	ldrh	r3, [r3, #0]
    2e80:	2bff      	cmp	r3, #255	; 0xff
    2e82:	d820      	bhi.n	2ec6 <battery_status_update+0x52>
		battery_status = 0;
    2e84:	2300      	movs	r3, #0
    2e86:	4a15      	ldr	r2, [pc, #84]	; (2edc <battery_status_update+0x68>)
    2e88:	7013      	strb	r3, [r2, #0]
		charge_voltage_adc_result = 0;
    2e8a:	4a13      	ldr	r2, [pc, #76]	; (2ed8 <battery_status_update+0x64>)
    2e8c:	8013      	strh	r3, [r2, #0]
		charge_from_empty_flag = 1;	
    2e8e:	2201      	movs	r2, #1
    2e90:	4b13      	ldr	r3, [pc, #76]	; (2ee0 <battery_status_update+0x6c>)
    2e92:	701a      	strb	r2, [r3, #0]
	return battery_status;
    2e94:	4b11      	ldr	r3, [pc, #68]	; (2edc <battery_status_update+0x68>)
    2e96:	7818      	ldrb	r0, [r3, #0]
}
    2e98:	4770      	bx	lr
		if (charge_current_adc_result > 0x00ff)
    2e9a:	4b12      	ldr	r3, [pc, #72]	; (2ee4 <battery_status_update+0x70>)
    2e9c:	881b      	ldrh	r3, [r3, #0]
    2e9e:	2bff      	cmp	r3, #255	; 0xff
    2ea0:	d80a      	bhi.n	2eb8 <battery_status_update+0x44>
		else if (charge_current_adc_result < 0x20)
    2ea2:	2b1f      	cmp	r3, #31
    2ea4:	d8f6      	bhi.n	2e94 <battery_status_update+0x20>
			battery_status = 0;//no current in/out for battery, battery is full
    2ea6:	2300      	movs	r3, #0
    2ea8:	4a0c      	ldr	r2, [pc, #48]	; (2edc <battery_status_update+0x68>)
    2eaa:	7013      	strb	r3, [r2, #0]
			charge_current_adc_result = 0;
    2eac:	4a0d      	ldr	r2, [pc, #52]	; (2ee4 <battery_status_update+0x70>)
    2eae:	8013      	strh	r3, [r2, #0]
			discharge_from_full_flag = 1;
    2eb0:	2201      	movs	r2, #1
    2eb2:	4b0d      	ldr	r3, [pc, #52]	; (2ee8 <battery_status_update+0x74>)
    2eb4:	701a      	strb	r2, [r3, #0]
    2eb6:	e7ed      	b.n	2e94 <battery_status_update+0x20>
			battery_status = 1; //charging, battery is not full
    2eb8:	2201      	movs	r2, #1
    2eba:	4b08      	ldr	r3, [pc, #32]	; (2edc <battery_status_update+0x68>)
    2ebc:	701a      	strb	r2, [r3, #0]
			discharge_from_full_flag = 0;
    2ebe:	2200      	movs	r2, #0
    2ec0:	4b09      	ldr	r3, [pc, #36]	; (2ee8 <battery_status_update+0x74>)
    2ec2:	701a      	strb	r2, [r3, #0]
    2ec4:	e7e6      	b.n	2e94 <battery_status_update+0x20>
		battery_status = 2;    //discharging
    2ec6:	2202      	movs	r2, #2
    2ec8:	4b04      	ldr	r3, [pc, #16]	; (2edc <battery_status_update+0x68>)
    2eca:	701a      	strb	r2, [r3, #0]
		charge_from_empty_flag = 0;
    2ecc:	2200      	movs	r2, #0
    2ece:	4b04      	ldr	r3, [pc, #16]	; (2ee0 <battery_status_update+0x6c>)
    2ed0:	701a      	strb	r2, [r3, #0]
    2ed2:	e7df      	b.n	2e94 <battery_status_update+0x20>
    2ed4:	200003c4 	.word	0x200003c4
    2ed8:	200004e8 	.word	0x200004e8
    2edc:	20000380 	.word	0x20000380
    2ee0:	200003bc 	.word	0x200003bc
    2ee4:	20000510 	.word	0x20000510
    2ee8:	200003fc 	.word	0x200003fc

00002eec <charger_detection>:
{	
    2eec:	b510      	push	{r4, lr}
	charger_status = adc_detect(4200);
    2eee:	4827      	ldr	r0, [pc, #156]	; (2f8c <charger_detection+0xa0>)
    2ef0:	4b27      	ldr	r3, [pc, #156]	; (2f90 <charger_detection+0xa4>)
    2ef2:	4798      	blx	r3
    2ef4:	4c27      	ldr	r4, [pc, #156]	; (2f94 <charger_detection+0xa8>)
    2ef6:	7020      	strb	r0, [r4, #0]
	adc_sampling();
    2ef8:	4b27      	ldr	r3, [pc, #156]	; (2f98 <charger_detection+0xac>)
    2efa:	4798      	blx	r3
	if (charger_status == 1) {
    2efc:	7823      	ldrb	r3, [r4, #0]
    2efe:	2b01      	cmp	r3, #1
    2f00:	d00e      	beq.n	2f20 <charger_detection+0x34>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2f02:	2280      	movs	r2, #128	; 0x80
    2f04:	0392      	lsls	r2, r2, #14
    2f06:	2382      	movs	r3, #130	; 0x82
    2f08:	05db      	lsls	r3, r3, #23
    2f0a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(EXT1_PIN_5,!charger_status);
    2f0c:	4b21      	ldr	r3, [pc, #132]	; (2f94 <charger_detection+0xa8>)
	if (level) {
    2f0e:	781b      	ldrb	r3, [r3, #0]
    2f10:	2b00      	cmp	r3, #0
    2f12:	d02c      	beq.n	2f6e <charger_detection+0x82>
		port_base->OUTCLR.reg = pin_mask;
    2f14:	2280      	movs	r2, #128	; 0x80
    2f16:	0352      	lsls	r2, r2, #13
    2f18:	2382      	movs	r3, #130	; 0x82
    2f1a:	05db      	lsls	r3, r3, #23
    2f1c:	615a      	str	r2, [r3, #20]
}
    2f1e:	bd10      	pop	{r4, pc}
		charge_remain_percentage = delta_charge * 100 / calibrated_battery_capacity;
    2f20:	4b1e      	ldr	r3, [pc, #120]	; (2f9c <charger_detection+0xb0>)
    2f22:	6818      	ldr	r0, [r3, #0]
    2f24:	2364      	movs	r3, #100	; 0x64
    2f26:	4358      	muls	r0, r3
    2f28:	4b1d      	ldr	r3, [pc, #116]	; (2fa0 <charger_detection+0xb4>)
    2f2a:	6819      	ldr	r1, [r3, #0]
    2f2c:	4b1d      	ldr	r3, [pc, #116]	; (2fa4 <charger_detection+0xb8>)
    2f2e:	4798      	blx	r3
    2f30:	b240      	sxtb	r0, r0
    2f32:	4b1d      	ldr	r3, [pc, #116]	; (2fa8 <charger_detection+0xbc>)
    2f34:	7018      	strb	r0, [r3, #0]
		uint32_t voltage = (charge_voltage_adc_result <= charge_current_adc_result) ? 0 : (charge_voltage_adc_result - charge_current_adc_result) * 5000 / 4096;
    2f36:	4b1d      	ldr	r3, [pc, #116]	; (2fac <charger_detection+0xc0>)
    2f38:	881b      	ldrh	r3, [r3, #0]
    2f3a:	4a1d      	ldr	r2, [pc, #116]	; (2fb0 <charger_detection+0xc4>)
    2f3c:	8812      	ldrh	r2, [r2, #0]
    2f3e:	4293      	cmp	r3, r2
    2f40:	d91b      	bls.n	2f7a <charger_detection+0x8e>
		if (charge_remain_percentage > 95 || voltage >= 4200)
    2f42:	285f      	cmp	r0, #95	; 0x5f
    2f44:	dc0a      	bgt.n	2f5c <charger_detection+0x70>
		uint32_t voltage = (charge_voltage_adc_result <= charge_current_adc_result) ? 0 : (charge_voltage_adc_result - charge_current_adc_result) * 5000 / 4096;
    2f46:	1a9b      	subs	r3, r3, r2
    2f48:	4a1a      	ldr	r2, [pc, #104]	; (2fb4 <charger_detection+0xc8>)
    2f4a:	435a      	muls	r2, r3
    2f4c:	17d3      	asrs	r3, r2, #31
    2f4e:	051b      	lsls	r3, r3, #20
    2f50:	0d1b      	lsrs	r3, r3, #20
    2f52:	189b      	adds	r3, r3, r2
    2f54:	131b      	asrs	r3, r3, #12
		if (charge_remain_percentage > 95 || voltage >= 4200)
    2f56:	4a18      	ldr	r2, [pc, #96]	; (2fb8 <charger_detection+0xcc>)
    2f58:	4293      	cmp	r3, r2
    2f5a:	d910      	bls.n	2f7e <charger_detection+0x92>
			printf("\n\r Cutting off the charging circuit \r\n");
    2f5c:	4817      	ldr	r0, [pc, #92]	; (2fbc <charger_detection+0xd0>)
    2f5e:	4b18      	ldr	r3, [pc, #96]	; (2fc0 <charger_detection+0xd4>)
    2f60:	4798      	blx	r3
    2f62:	2280      	movs	r2, #128	; 0x80
    2f64:	0392      	lsls	r2, r2, #14
    2f66:	2382      	movs	r3, #130	; 0x82
    2f68:	05db      	lsls	r3, r3, #23
    2f6a:	615a      	str	r2, [r3, #20]
    2f6c:	e7ce      	b.n	2f0c <charger_detection+0x20>
		port_base->OUTSET.reg = pin_mask;
    2f6e:	2280      	movs	r2, #128	; 0x80
    2f70:	0352      	lsls	r2, r2, #13
    2f72:	2382      	movs	r3, #130	; 0x82
    2f74:	05db      	lsls	r3, r3, #23
    2f76:	619a      	str	r2, [r3, #24]
    2f78:	e7d1      	b.n	2f1e <charger_detection+0x32>
		if (charge_remain_percentage > 95 || voltage >= 4200)
    2f7a:	285f      	cmp	r0, #95	; 0x5f
    2f7c:	dcee      	bgt.n	2f5c <charger_detection+0x70>
    2f7e:	2280      	movs	r2, #128	; 0x80
    2f80:	0392      	lsls	r2, r2, #14
    2f82:	2382      	movs	r3, #130	; 0x82
    2f84:	05db      	lsls	r3, r3, #23
    2f86:	619a      	str	r2, [r3, #24]
    2f88:	e7c4      	b.n	2f14 <charger_detection+0x28>
    2f8a:	46c0      	nop			; (mov r8, r8)
    2f8c:	00001068 	.word	0x00001068
    2f90:	00002bf1 	.word	0x00002bf1
    2f94:	200003c4 	.word	0x200003c4
    2f98:	00002c8d 	.word	0x00002c8d
    2f9c:	200003f8 	.word	0x200003f8
    2fa0:	20000018 	.word	0x20000018
    2fa4:	00003ac9 	.word	0x00003ac9
    2fa8:	200003bd 	.word	0x200003bd
    2fac:	200004e8 	.word	0x200004e8
    2fb0:	20000510 	.word	0x20000510
    2fb4:	00001388 	.word	0x00001388
    2fb8:	00001067 	.word	0x00001067
    2fbc:	000051d4 	.word	0x000051d4
    2fc0:	00003fa9 	.word	0x00003fa9

00002fc4 <ADC_event>:
{
    2fc4:	b510      	push	{r4, lr}
    2fc6:	0004      	movs	r4, r0
	if(events_is_interrupt_set(resource, EVENTS_INTERRUPT_DETECT)) {
    2fc8:	2101      	movs	r1, #1
    2fca:	4b0d      	ldr	r3, [pc, #52]	; (3000 <ADC_event+0x3c>)
    2fcc:	4798      	blx	r3
    2fce:	2800      	cmp	r0, #0
    2fd0:	d100      	bne.n	2fd4 <ADC_event+0x10>
}
    2fd2:	bd10      	pop	{r4, pc}
		charger_detection();
    2fd4:	4b0b      	ldr	r3, [pc, #44]	; (3004 <ADC_event+0x40>)
    2fd6:	4798      	blx	r3
		adc_sampling();
    2fd8:	4b0b      	ldr	r3, [pc, #44]	; (3008 <ADC_event+0x44>)
    2fda:	4798      	blx	r3
		battery_status_new = battery_status_update();
    2fdc:	4b0b      	ldr	r3, [pc, #44]	; (300c <ADC_event+0x48>)
    2fde:	4798      	blx	r3
    2fe0:	4b0b      	ldr	r3, [pc, #44]	; (3010 <ADC_event+0x4c>)
    2fe2:	7018      	strb	r0, [r3, #0]
		if (battery_status_new != battery_status_old) //if battery charging status changes, send data to pc to update
    2fe4:	4b0b      	ldr	r3, [pc, #44]	; (3014 <ADC_event+0x50>)
    2fe6:	781b      	ldrb	r3, [r3, #0]
    2fe8:	4283      	cmp	r3, r0
    2fea:	d004      	beq.n	2ff6 <ADC_event+0x32>
			dateReportFlag = 1;
    2fec:	2201      	movs	r2, #1
    2fee:	4b0a      	ldr	r3, [pc, #40]	; (3018 <ADC_event+0x54>)
    2ff0:	701a      	strb	r2, [r3, #0]
			battery_status_old = battery_status_new;
    2ff2:	4b08      	ldr	r3, [pc, #32]	; (3014 <ADC_event+0x50>)
    2ff4:	7018      	strb	r0, [r3, #0]
		events_ack_interrupt(resource, EVENTS_INTERRUPT_DETECT);
    2ff6:	2101      	movs	r1, #1
    2ff8:	0020      	movs	r0, r4
    2ffa:	4b08      	ldr	r3, [pc, #32]	; (301c <ADC_event+0x58>)
    2ffc:	4798      	blx	r3
}
    2ffe:	e7e8      	b.n	2fd2 <ADC_event+0xe>
    3000:	00000e81 	.word	0x00000e81
    3004:	00002eed 	.word	0x00002eed
    3008:	00002c8d 	.word	0x00002c8d
    300c:	00002e75 	.word	0x00002e75
    3010:	20000381 	.word	0x20000381
    3014:	20000382 	.word	0x20000382
    3018:	200003f6 	.word	0x200003f6
    301c:	00000ebd 	.word	0x00000ebd

00003020 <processCommandMsg>:
	commandType = commandMsg[0]; //get commandType
    3020:	4b12      	ldr	r3, [pc, #72]	; (306c <processCommandMsg+0x4c>)
    3022:	7819      	ldrb	r1, [r3, #0]
    3024:	4a12      	ldr	r2, [pc, #72]	; (3070 <processCommandMsg+0x50>)
    3026:	7011      	strb	r1, [r2, #0]
	commandIndex = commandMsg[1];//get commandIndex
    3028:	7859      	ldrb	r1, [r3, #1]
    302a:	4a12      	ldr	r2, [pc, #72]	; (3074 <processCommandMsg+0x54>)
    302c:	7011      	strb	r1, [r2, #0]
	commandDataLength = commandMsg[2];//get commandDataLength
    302e:	7899      	ldrb	r1, [r3, #2]
    3030:	4b11      	ldr	r3, [pc, #68]	; (3078 <processCommandMsg+0x58>)
    3032:	7019      	strb	r1, [r3, #0]
	if (commandDataLength!= 0 )//if commandDataLength is not 0, get commandData.
    3034:	2900      	cmp	r1, #0
    3036:	d00a      	beq.n	304e <processCommandMsg+0x2e>
    3038:	480c      	ldr	r0, [pc, #48]	; (306c <processCommandMsg+0x4c>)
    303a:	1cc3      	adds	r3, r0, #3
    303c:	4a0f      	ldr	r2, [pc, #60]	; (307c <processCommandMsg+0x5c>)
    303e:	3103      	adds	r1, #3
    3040:	1840      	adds	r0, r0, r1
			commandData[i] = commandMsg[i+3];
    3042:	7819      	ldrb	r1, [r3, #0]
    3044:	7011      	strb	r1, [r2, #0]
    3046:	3301      	adds	r3, #1
    3048:	3201      	adds	r2, #1
		for (int i=0;i<commandDataLength;i++)
    304a:	4283      	cmp	r3, r0
    304c:	d1f9      	bne.n	3042 <processCommandMsg+0x22>
    304e:	4b07      	ldr	r3, [pc, #28]	; (306c <processCommandMsg+0x4c>)
    3050:	0019      	movs	r1, r3
    3052:	3114      	adds	r1, #20
		commandMsg[i] = 0;
    3054:	2200      	movs	r2, #0
    3056:	701a      	strb	r2, [r3, #0]
    3058:	3301      	adds	r3, #1
	for (uint8_t i = 0; i<sizeof(commandMsg); i++)
    305a:	428b      	cmp	r3, r1
    305c:	d1fb      	bne.n	3056 <processCommandMsg+0x36>
	canMsgInFlag = 0; //reset MsgIn flag
    305e:	2200      	movs	r2, #0
    3060:	4b07      	ldr	r3, [pc, #28]	; (3080 <processCommandMsg+0x60>)
    3062:	701a      	strb	r2, [r3, #0]
	commandReady = 1;//set commandReady to be executed
    3064:	3201      	adds	r2, #1
    3066:	4b07      	ldr	r3, [pc, #28]	; (3084 <processCommandMsg+0x64>)
    3068:	701a      	strb	r2, [r3, #0]
}
    306a:	4770      	bx	lr
    306c:	200003e0 	.word	0x200003e0
    3070:	200003f5 	.word	0x200003f5
    3074:	200003dd 	.word	0x200003dd
    3078:	200003dc 	.word	0x200003dc
    307c:	200003c8 	.word	0x200003c8
    3080:	20000383 	.word	0x20000383
    3084:	200003f4 	.word	0x200003f4

00003088 <execute_system_command>:
{	
    3088:	b510      	push	{r4, lr}
	system_busy_flag = 1;
    308a:	2201      	movs	r2, #1
    308c:	4b11      	ldr	r3, [pc, #68]	; (30d4 <execute_system_command+0x4c>)
    308e:	701a      	strb	r2, [r3, #0]
	commandReady = 0;
    3090:	2200      	movs	r2, #0
    3092:	4b11      	ldr	r3, [pc, #68]	; (30d8 <execute_system_command+0x50>)
    3094:	701a      	strb	r2, [r3, #0]
	if(commandType == CMD_TYPE_REQUEST)
    3096:	4b11      	ldr	r3, [pc, #68]	; (30dc <execute_system_command+0x54>)
    3098:	781b      	ldrb	r3, [r3, #0]
    309a:	2b01      	cmp	r3, #1
    309c:	d00b      	beq.n	30b6 <execute_system_command+0x2e>
	}else if (commandType == CMD_TYPE_SET)
    309e:	2b02      	cmp	r3, #2
    30a0:	d010      	beq.n	30c4 <execute_system_command+0x3c>
	commandType = 0; //reset commandType to 0
    30a2:	2300      	movs	r3, #0
    30a4:	4a0d      	ldr	r2, [pc, #52]	; (30dc <execute_system_command+0x54>)
    30a6:	7013      	strb	r3, [r2, #0]
	commandIndex = 0;//reset commandIndex to 0
    30a8:	4a0d      	ldr	r2, [pc, #52]	; (30e0 <execute_system_command+0x58>)
    30aa:	7013      	strb	r3, [r2, #0]
	commandDataLength = 0;//reset commandDataLength to 0
    30ac:	4a0d      	ldr	r2, [pc, #52]	; (30e4 <execute_system_command+0x5c>)
    30ae:	7013      	strb	r3, [r2, #0]
	system_busy_flag = 0;
    30b0:	4a08      	ldr	r2, [pc, #32]	; (30d4 <execute_system_command+0x4c>)
    30b2:	7013      	strb	r3, [r2, #0]
}
    30b4:	bd10      	pop	{r4, pc}
		requestAction[commandIndex]();		
    30b6:	4b0a      	ldr	r3, [pc, #40]	; (30e0 <execute_system_command+0x58>)
    30b8:	781b      	ldrb	r3, [r3, #0]
    30ba:	009b      	lsls	r3, r3, #2
    30bc:	4a0a      	ldr	r2, [pc, #40]	; (30e8 <execute_system_command+0x60>)
    30be:	589b      	ldr	r3, [r3, r2]
    30c0:	4798      	blx	r3
    30c2:	e7ee      	b.n	30a2 <execute_system_command+0x1a>
		setAction[commandIndex]();
    30c4:	4b06      	ldr	r3, [pc, #24]	; (30e0 <execute_system_command+0x58>)
    30c6:	781b      	ldrb	r3, [r3, #0]
    30c8:	009b      	lsls	r3, r3, #2
    30ca:	4a08      	ldr	r2, [pc, #32]	; (30ec <execute_system_command+0x64>)
    30cc:	589b      	ldr	r3, [r3, r2]
    30ce:	4798      	blx	r3
    30d0:	e7e7      	b.n	30a2 <execute_system_command+0x1a>
    30d2:	46c0      	nop			; (mov r8, r8)
    30d4:	2000043c 	.word	0x2000043c
    30d8:	200003f4 	.word	0x200003f4
    30dc:	200003f5 	.word	0x200003f5
    30e0:	200003dd 	.word	0x200003dd
    30e4:	200003dc 	.word	0x200003dc
    30e8:	2000001c 	.word	0x2000001c
    30ec:	20000028 	.word	0x20000028

000030f0 <battery_charge_calculation>:
{
    30f0:	b570      	push	{r4, r5, r6, lr}
    30f2:	0004      	movs	r4, r0
	if (charger_status == 1 && charge_sample_num >0)
    30f4:	4b45      	ldr	r3, [pc, #276]	; (320c <battery_charge_calculation+0x11c>)
    30f6:	781b      	ldrb	r3, [r3, #0]
    30f8:	2b01      	cmp	r3, #1
    30fa:	d056      	beq.n	31aa <battery_charge_calculation+0xba>
	} else if (discharge_sample_num > 0)
    30fc:	4b44      	ldr	r3, [pc, #272]	; (3210 <battery_charge_calculation+0x120>)
    30fe:	681a      	ldr	r2, [r3, #0]
    3100:	2a00      	cmp	r2, #0
    3102:	d01f      	beq.n	3144 <battery_charge_calculation+0x54>
		avg_discharge_current_reading = (uint16_t)(total_discharge_current / discharge_sample_num);
    3104:	4d43      	ldr	r5, [pc, #268]	; (3214 <battery_charge_calculation+0x124>)
    3106:	2300      	movs	r3, #0
    3108:	6828      	ldr	r0, [r5, #0]
    310a:	6869      	ldr	r1, [r5, #4]
    310c:	4e42      	ldr	r6, [pc, #264]	; (3218 <battery_charge_calculation+0x128>)
    310e:	47b0      	blx	r6
    3110:	b280      	uxth	r0, r0
    3112:	4b42      	ldr	r3, [pc, #264]	; (321c <battery_charge_calculation+0x12c>)
    3114:	8018      	strh	r0, [r3, #0]
		total_discharge_current = 0;
    3116:	2200      	movs	r2, #0
    3118:	2300      	movs	r3, #0
    311a:	602a      	str	r2, [r5, #0]
    311c:	606b      	str	r3, [r5, #4]
		discharge_sample_num = 0;
    311e:	4b3c      	ldr	r3, [pc, #240]	; (3210 <battery_charge_calculation+0x120>)
    3120:	601a      	str	r2, [r3, #0]
		if (diff > 20 || diff < -20)//20 ADC reading unit = 0.005v
    3122:	4b3f      	ldr	r3, [pc, #252]	; (3220 <battery_charge_calculation+0x130>)
    3124:	881b      	ldrh	r3, [r3, #0]
    3126:	1ac3      	subs	r3, r0, r3
    3128:	3314      	adds	r3, #20
    312a:	b29b      	uxth	r3, r3
    312c:	2b28      	cmp	r3, #40	; 0x28
    312e:	d904      	bls.n	313a <battery_charge_calculation+0x4a>
			dateReportFlag = 1;
    3130:	3201      	adds	r2, #1
    3132:	4b3c      	ldr	r3, [pc, #240]	; (3224 <battery_charge_calculation+0x134>)
    3134:	701a      	strb	r2, [r3, #0]
			avg_discharge_current_reading_old = avg_discharge_current_reading;
    3136:	4b3a      	ldr	r3, [pc, #232]	; (3220 <battery_charge_calculation+0x130>)
    3138:	8018      	strh	r0, [r3, #0]
		delta_charge -= avg_discharge_current_reading * time;
    313a:	4b3b      	ldr	r3, [pc, #236]	; (3228 <battery_charge_calculation+0x138>)
    313c:	4360      	muls	r0, r4
    313e:	681a      	ldr	r2, [r3, #0]
    3140:	1a10      	subs	r0, r2, r0
    3142:	6018      	str	r0, [r3, #0]
	delta_charge = max(0, delta_charge);
    3144:	4b38      	ldr	r3, [pc, #224]	; (3228 <battery_charge_calculation+0x138>)
    3146:	681c      	ldr	r4, [r3, #0]
    3148:	43e3      	mvns	r3, r4
    314a:	17db      	asrs	r3, r3, #31
    314c:	401c      	ands	r4, r3
    314e:	4b36      	ldr	r3, [pc, #216]	; (3228 <battery_charge_calculation+0x138>)
    3150:	601c      	str	r4, [r3, #0]
		charge_remain_percentage = delta_charge * 100 / calibrated_battery_capacity;
    3152:	2064      	movs	r0, #100	; 0x64
    3154:	4360      	muls	r0, r4
    3156:	4b35      	ldr	r3, [pc, #212]	; (322c <battery_charge_calculation+0x13c>)
    3158:	6819      	ldr	r1, [r3, #0]
    315a:	4b35      	ldr	r3, [pc, #212]	; (3230 <battery_charge_calculation+0x140>)
    315c:	4798      	blx	r3
    315e:	b242      	sxtb	r2, r0
    3160:	4b34      	ldr	r3, [pc, #208]	; (3234 <battery_charge_calculation+0x144>)
    3162:	701a      	strb	r2, [r3, #0]
		printf("#Delta_charge >= 0. It is: %d | per : %d\n", delta_charge, charge_remain_percentage);
    3164:	0021      	movs	r1, r4
    3166:	4834      	ldr	r0, [pc, #208]	; (3238 <battery_charge_calculation+0x148>)
    3168:	4b34      	ldr	r3, [pc, #208]	; (323c <battery_charge_calculation+0x14c>)
    316a:	4798      	blx	r3
		uint32_t voltage = (charge_voltage_adc_result <= charge_current_adc_result) ? 0 : (charge_voltage_adc_result - charge_current_adc_result) * 5000 / 4096;
    316c:	4b34      	ldr	r3, [pc, #208]	; (3240 <battery_charge_calculation+0x150>)
    316e:	881b      	ldrh	r3, [r3, #0]
    3170:	4a34      	ldr	r2, [pc, #208]	; (3244 <battery_charge_calculation+0x154>)
    3172:	8812      	ldrh	r2, [r2, #0]
    3174:	4293      	cmp	r3, r2
    3176:	d93e      	bls.n	31f6 <battery_charge_calculation+0x106>
    3178:	1a9b      	subs	r3, r3, r2
    317a:	4a33      	ldr	r2, [pc, #204]	; (3248 <battery_charge_calculation+0x158>)
    317c:	435a      	muls	r2, r3
    317e:	17d3      	asrs	r3, r2, #31
    3180:	051b      	lsls	r3, r3, #20
    3182:	0d1b      	lsrs	r3, r3, #20
    3184:	189b      	adds	r3, r3, r2
    3186:	131b      	asrs	r3, r3, #12
		if (charge_remain_percentage > 95 || voltage >= 4200)
    3188:	4a2a      	ldr	r2, [pc, #168]	; (3234 <battery_charge_calculation+0x144>)
    318a:	7812      	ldrb	r2, [r2, #0]
    318c:	b252      	sxtb	r2, r2
    318e:	2a5f      	cmp	r2, #95	; 0x5f
    3190:	dc02      	bgt.n	3198 <battery_charge_calculation+0xa8>
    3192:	4a2e      	ldr	r2, [pc, #184]	; (324c <battery_charge_calculation+0x15c>)
    3194:	4293      	cmp	r3, r2
    3196:	d933      	bls.n	3200 <battery_charge_calculation+0x110>
			printf("#Cutting off the charging circuit\n");
    3198:	482d      	ldr	r0, [pc, #180]	; (3250 <battery_charge_calculation+0x160>)
    319a:	4b2e      	ldr	r3, [pc, #184]	; (3254 <battery_charge_calculation+0x164>)
    319c:	4798      	blx	r3
		port_base->OUTCLR.reg = pin_mask;
    319e:	2280      	movs	r2, #128	; 0x80
    31a0:	0392      	lsls	r2, r2, #14
    31a2:	2382      	movs	r3, #130	; 0x82
    31a4:	05db      	lsls	r3, r3, #23
    31a6:	615a      	str	r2, [r3, #20]
}
    31a8:	bd70      	pop	{r4, r5, r6, pc}
	if (charger_status == 1 && charge_sample_num >0)
    31aa:	4b2b      	ldr	r3, [pc, #172]	; (3258 <battery_charge_calculation+0x168>)
    31ac:	681a      	ldr	r2, [r3, #0]
    31ae:	2a00      	cmp	r2, #0
    31b0:	d0a4      	beq.n	30fc <battery_charge_calculation+0xc>
		avg_charge_current_reading = (uint16_t)(total_charge_current / charge_sample_num);
    31b2:	4d2a      	ldr	r5, [pc, #168]	; (325c <battery_charge_calculation+0x16c>)
    31b4:	2300      	movs	r3, #0
    31b6:	6828      	ldr	r0, [r5, #0]
    31b8:	6869      	ldr	r1, [r5, #4]
    31ba:	4e17      	ldr	r6, [pc, #92]	; (3218 <battery_charge_calculation+0x128>)
    31bc:	47b0      	blx	r6
    31be:	b280      	uxth	r0, r0
    31c0:	4b27      	ldr	r3, [pc, #156]	; (3260 <battery_charge_calculation+0x170>)
    31c2:	8018      	strh	r0, [r3, #0]
		total_charge_current = 0;
    31c4:	2200      	movs	r2, #0
    31c6:	2300      	movs	r3, #0
    31c8:	602a      	str	r2, [r5, #0]
    31ca:	606b      	str	r3, [r5, #4]
		charge_sample_num = 0;
    31cc:	4b22      	ldr	r3, [pc, #136]	; (3258 <battery_charge_calculation+0x168>)
    31ce:	601a      	str	r2, [r3, #0]
		if (diff > 20 || diff < -20)//20 ADC reading unit = 0.005v
    31d0:	4b24      	ldr	r3, [pc, #144]	; (3264 <battery_charge_calculation+0x174>)
    31d2:	881b      	ldrh	r3, [r3, #0]
    31d4:	1ac3      	subs	r3, r0, r3
    31d6:	3314      	adds	r3, #20
    31d8:	b29b      	uxth	r3, r3
    31da:	2b28      	cmp	r3, #40	; 0x28
    31dc:	d904      	bls.n	31e8 <battery_charge_calculation+0xf8>
			dateReportFlag = 1;
    31de:	3201      	adds	r2, #1
    31e0:	4b10      	ldr	r3, [pc, #64]	; (3224 <battery_charge_calculation+0x134>)
    31e2:	701a      	strb	r2, [r3, #0]
			avg_charge_current_reading_old = avg_charge_current_reading;
    31e4:	4b1f      	ldr	r3, [pc, #124]	; (3264 <battery_charge_calculation+0x174>)
    31e6:	8018      	strh	r0, [r3, #0]
		delta_charge += avg_charge_current_reading * time;
    31e8:	4b0f      	ldr	r3, [pc, #60]	; (3228 <battery_charge_calculation+0x138>)
    31ea:	4360      	muls	r0, r4
    31ec:	681a      	ldr	r2, [r3, #0]
    31ee:	4694      	mov	ip, r2
    31f0:	4460      	add	r0, ip
    31f2:	6018      	str	r0, [r3, #0]
    31f4:	e7a6      	b.n	3144 <battery_charge_calculation+0x54>
		if (charge_remain_percentage > 95 || voltage >= 4200)
    31f6:	4b0f      	ldr	r3, [pc, #60]	; (3234 <battery_charge_calculation+0x144>)
    31f8:	781b      	ldrb	r3, [r3, #0]
    31fa:	b25b      	sxtb	r3, r3
    31fc:	2b5f      	cmp	r3, #95	; 0x5f
    31fe:	dccb      	bgt.n	3198 <battery_charge_calculation+0xa8>
		port_base->OUTSET.reg = pin_mask;
    3200:	2280      	movs	r2, #128	; 0x80
    3202:	0392      	lsls	r2, r2, #14
    3204:	2382      	movs	r3, #130	; 0x82
    3206:	05db      	lsls	r3, r3, #23
    3208:	619a      	str	r2, [r3, #24]
}
    320a:	e7cd      	b.n	31a8 <battery_charge_calculation+0xb8>
    320c:	200003c4 	.word	0x200003c4
    3210:	20000400 	.word	0x20000400
    3214:	20000458 	.word	0x20000458
    3218:	00003be1 	.word	0x00003be1
    321c:	2000036c 	.word	0x2000036c
    3220:	2000036e 	.word	0x2000036e
    3224:	200003f6 	.word	0x200003f6
    3228:	200003f8 	.word	0x200003f8
    322c:	20000018 	.word	0x20000018
    3230:	00003ac9 	.word	0x00003ac9
    3234:	200003bd 	.word	0x200003bd
    3238:	00005158 	.word	0x00005158
    323c:	00003eb5 	.word	0x00003eb5
    3240:	200004e8 	.word	0x200004e8
    3244:	20000510 	.word	0x20000510
    3248:	00001388 	.word	0x00001388
    324c:	00001067 	.word	0x00001067
    3250:	00005184 	.word	0x00005184
    3254:	00003fa9 	.word	0x00003fa9
    3258:	200003c0 	.word	0x200003c0
    325c:	20000450 	.word	0x20000450
    3260:	20000368 	.word	0x20000368
    3264:	2000036a 	.word	0x2000036a

00003268 <rtc_match_callback>:
	rtc_calendar_enable(&rtc_instance);
}
struct rtc_calendar_alarm_time alarm;

void rtc_match_callback(void)
{
    3268:	b570      	push	{r4, r5, r6, lr}
    326a:	b082      	sub	sp, #8
	/* Do something on RTC alarm match here */
	////printf("###### alarm ######\r\n");
	
	static uint8_t second_count = 1;
	int32_t temp_result = 0;
    326c:	2300      	movs	r3, #0
    326e:	9301      	str	r3, [sp, #4]
 * Start a new TSENS conversion.
 *
 */
static inline void tsens_start_conversion(void)
{
	TSENS->CTRLB.reg |= TSENS_CTRLB_START;
    3270:	4a31      	ldr	r2, [pc, #196]	; (3338 <rtc_match_callback+0xd0>)
    3272:	7853      	ldrb	r3, [r2, #1]
    3274:	2101      	movs	r1, #1
    3276:	430b      	orrs	r3, r1
    3278:	7053      	strb	r3, [r2, #1]
	if (TSENS->SYNCBUSY.reg) {
    327a:	6893      	ldr	r3, [r2, #8]

	while (tsens_is_syncing()) {
    327c:	2b00      	cmp	r3, #0
    327e:	d1fc      	bne.n	327a <rtc_match_callback+0x12>
	tsens_start_conversion();
	do {
		/* Wait for conversion to be done and read out temperature result */
	} while (tsens_read(&temp_result) != STATUS_OK);
    3280:	4c2e      	ldr	r4, [pc, #184]	; (333c <rtc_match_callback+0xd4>)
    3282:	a801      	add	r0, sp, #4
    3284:	47a0      	blx	r4
    3286:	2800      	cmp	r0, #0
    3288:	d1fb      	bne.n	3282 <rtc_match_callback+0x1a>
	//printf("temperature :" );
	//printf("%d \r\n", temp_result);
	
	
	if (dateReportFlag == 1)
    328a:	4b2d      	ldr	r3, [pc, #180]	; (3340 <rtc_match_callback+0xd8>)
    328c:	781b      	ldrb	r3, [r3, #0]
    328e:	2b01      	cmp	r3, #1
    3290:	d01d      	beq.n	32ce <rtc_match_callback+0x66>
		dateReportFlag = 0;
	}
	
	
	/* Set new alarm in 5 seconds */
	alarm.mask = RTC_CALENDAR_ALARM_MASK_SEC;
    3292:	4c2c      	ldr	r4, [pc, #176]	; (3344 <rtc_match_callback+0xdc>)
    3294:	2301      	movs	r3, #1
    3296:	7223      	strb	r3, [r4, #8]
	alarm.time.second += 1;
    3298:	7820      	ldrb	r0, [r4, #0]
    329a:	3001      	adds	r0, #1
	alarm.time.second = alarm.time.second % 60;
    329c:	b2c0      	uxtb	r0, r0
    329e:	4d2a      	ldr	r5, [pc, #168]	; (3348 <rtc_match_callback+0xe0>)
    32a0:	213c      	movs	r1, #60	; 0x3c
    32a2:	47a8      	blx	r5
    32a4:	b2c8      	uxtb	r0, r1
    32a6:	7020      	strb	r0, [r4, #0]
	
	//forced data reporting every 10 seconds
	if ((alarm.time.second % 5) == 0)
    32a8:	2105      	movs	r1, #5
    32aa:	47a8      	blx	r5
    32ac:	b2c9      	uxtb	r1, r1
    32ae:	2900      	cmp	r1, #0
    32b0:	d102      	bne.n	32b8 <rtc_match_callback+0x50>
	{
		dateReportFlag = 1;
    32b2:	2201      	movs	r2, #1
    32b4:	4b22      	ldr	r3, [pc, #136]	; (3340 <rtc_match_callback+0xd8>)
    32b6:	701a      	strb	r2, [r3, #0]
	}
	
	second_count++;
    32b8:	4a24      	ldr	r2, [pc, #144]	; (334c <rtc_match_callback+0xe4>)
    32ba:	7813      	ldrb	r3, [r2, #0]
    32bc:	3301      	adds	r3, #1
    32be:	7013      	strb	r3, [r2, #0]
	
	rtc_calendar_set_alarm(&rtc_instance, &alarm, RTC_CALENDAR_ALARM_0);
    32c0:	2200      	movs	r2, #0
    32c2:	4920      	ldr	r1, [pc, #128]	; (3344 <rtc_match_callback+0xdc>)
    32c4:	4822      	ldr	r0, [pc, #136]	; (3350 <rtc_match_callback+0xe8>)
    32c6:	4b23      	ldr	r3, [pc, #140]	; (3354 <rtc_match_callback+0xec>)
    32c8:	4798      	blx	r3
	
}
    32ca:	b002      	add	sp, #8
    32cc:	bd70      	pop	{r4, r5, r6, pc}
		second_count = 1;
    32ce:	2201      	movs	r2, #1
    32d0:	4b1e      	ldr	r3, [pc, #120]	; (334c <rtc_match_callback+0xe4>)
    32d2:	701a      	strb	r2, [r3, #0]
		send_battery_data();
    32d4:	4b20      	ldr	r3, [pc, #128]	; (3358 <rtc_match_callback+0xf0>)
    32d6:	4798      	blx	r3
		battery_charge_calculation(5);
    32d8:	2005      	movs	r0, #5
    32da:	4b20      	ldr	r3, [pc, #128]	; (335c <rtc_match_callback+0xf4>)
    32dc:	4798      	blx	r3
		if (charger_status == 1) {
    32de:	4b20      	ldr	r3, [pc, #128]	; (3360 <rtc_match_callback+0xf8>)
    32e0:	781b      	ldrb	r3, [r3, #0]
    32e2:	2b01      	cmp	r3, #1
    32e4:	d016      	beq.n	3314 <rtc_match_callback+0xac>
			printf("%d voltage %d \r\n", time_index, charge_voltage_adc_result * 5000 / 4096);
    32e6:	4b1f      	ldr	r3, [pc, #124]	; (3364 <rtc_match_callback+0xfc>)
    32e8:	881a      	ldrh	r2, [r3, #0]
    32ea:	4c1f      	ldr	r4, [pc, #124]	; (3368 <rtc_match_callback+0x100>)
    32ec:	4362      	muls	r2, r4
    32ee:	1312      	asrs	r2, r2, #12
    32f0:	4d1e      	ldr	r5, [pc, #120]	; (336c <rtc_match_callback+0x104>)
    32f2:	6829      	ldr	r1, [r5, #0]
    32f4:	481e      	ldr	r0, [pc, #120]	; (3370 <rtc_match_callback+0x108>)
    32f6:	4e1f      	ldr	r6, [pc, #124]	; (3374 <rtc_match_callback+0x10c>)
    32f8:	47b0      	blx	r6
			printf("%d d_current %d \r\n\r\n", time_index++, discharge_current_adc_result * 5000 / 4096);
    32fa:	6829      	ldr	r1, [r5, #0]
    32fc:	1c4b      	adds	r3, r1, #1
    32fe:	602b      	str	r3, [r5, #0]
    3300:	4b1d      	ldr	r3, [pc, #116]	; (3378 <rtc_match_callback+0x110>)
    3302:	881a      	ldrh	r2, [r3, #0]
    3304:	4362      	muls	r2, r4
    3306:	1312      	asrs	r2, r2, #12
    3308:	481c      	ldr	r0, [pc, #112]	; (337c <rtc_match_callback+0x114>)
    330a:	47b0      	blx	r6
		dateReportFlag = 0;
    330c:	2200      	movs	r2, #0
    330e:	4b0c      	ldr	r3, [pc, #48]	; (3340 <rtc_match_callback+0xd8>)
    3310:	701a      	strb	r2, [r3, #0]
    3312:	e7be      	b.n	3292 <rtc_match_callback+0x2a>
			printf("%d voltage %d \r\n", time_index, charge_voltage_adc_result * 5000 / 4096);
    3314:	4b13      	ldr	r3, [pc, #76]	; (3364 <rtc_match_callback+0xfc>)
    3316:	881a      	ldrh	r2, [r3, #0]
    3318:	4c13      	ldr	r4, [pc, #76]	; (3368 <rtc_match_callback+0x100>)
    331a:	4362      	muls	r2, r4
    331c:	1312      	asrs	r2, r2, #12
    331e:	4e13      	ldr	r6, [pc, #76]	; (336c <rtc_match_callback+0x104>)
    3320:	6831      	ldr	r1, [r6, #0]
    3322:	4813      	ldr	r0, [pc, #76]	; (3370 <rtc_match_callback+0x108>)
    3324:	4d13      	ldr	r5, [pc, #76]	; (3374 <rtc_match_callback+0x10c>)
    3326:	47a8      	blx	r5
			printf("%d c_current %d \r\n", time_index, charge_current_adc_result * 5000 / 4096);
    3328:	4b15      	ldr	r3, [pc, #84]	; (3380 <rtc_match_callback+0x118>)
    332a:	881a      	ldrh	r2, [r3, #0]
    332c:	4362      	muls	r2, r4
    332e:	1312      	asrs	r2, r2, #12
    3330:	6831      	ldr	r1, [r6, #0]
    3332:	4814      	ldr	r0, [pc, #80]	; (3384 <rtc_match_callback+0x11c>)
    3334:	47a8      	blx	r5
    3336:	e7e9      	b.n	330c <rtc_match_callback+0xa4>
    3338:	40003000 	.word	0x40003000
    333c:	00000ca9 	.word	0x00000ca9
    3340:	200003f6 	.word	0x200003f6
    3344:	200004f0 	.word	0x200004f0
    3348:	00003bd5 	.word	0x00003bd5
    334c:	20000024 	.word	0x20000024
    3350:	200004ac 	.word	0x200004ac
    3354:	000009ed 	.word	0x000009ed
    3358:	00002941 	.word	0x00002941
    335c:	000030f1 	.word	0x000030f1
    3360:	200003c4 	.word	0x200003c4
    3364:	200004e8 	.word	0x200004e8
    3368:	00001388 	.word	0x00001388
    336c:	20000448 	.word	0x20000448
    3370:	000051fc 	.word	0x000051fc
    3374:	00003eb5 	.word	0x00003eb5
    3378:	20000504 	.word	0x20000504
    337c:	00005224 	.word	0x00005224
    3380:	20000510 	.word	0x20000510
    3384:	00005210 	.word	0x00005210

00003388 <CAN0_Handler>:
{
    3388:	b570      	push	{r4, r5, r6, lr}
    338a:	b084      	sub	sp, #16
 * \param[in] module_inst  Pointer to the CAN software instance struct
 */
static inline uint32_t can_read_interrupt_status(
		struct can_module *const module_inst)
{
	return module_inst->hw->IR.reg;
    338c:	4b6c      	ldr	r3, [pc, #432]	; (3540 <CAN0_Handler+0x1b8>)
    338e:	681b      	ldr	r3, [r3, #0]
    3390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
	status = can_read_interrupt_status(&can_instance);
    3392:	9203      	str	r2, [sp, #12]
	if (status & CAN_RX_BUFFER_NEW_MESSAGE) {
    3394:	9a03      	ldr	r2, [sp, #12]
    3396:	0312      	lsls	r2, r2, #12
    3398:	d550      	bpl.n	343c <CAN0_Handler+0xb4>
 */
static inline void can_clear_interrupt_status(
		struct can_module *const module_inst,
		const enum can_interrupt_source source)
{
	module_inst->hw->IR.reg = source;
    339a:	2280      	movs	r2, #128	; 0x80
    339c:	0312      	lsls	r2, r2, #12
    339e:	651a      	str	r2, [r3, #80]	; 0x50
		for (i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    33a0:	2300      	movs	r3, #0
    33a2:	9302      	str	r3, [sp, #8]
    33a4:	9b02      	ldr	r3, [sp, #8]
    33a6:	2b03      	cmp	r3, #3
    33a8:	d848      	bhi.n	343c <CAN0_Handler+0xb4>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    33aa:	4e65      	ldr	r6, [pc, #404]	; (3540 <CAN0_Handler+0x1b8>)
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    33ac:	0035      	movs	r5, r6
				can_get_rx_buffer_element(&can_instance, &rx_element_buffer,
    33ae:	4c65      	ldr	r4, [pc, #404]	; (3544 <CAN0_Handler+0x1bc>)
    33b0:	e029      	b.n	3406 <CAN0_Handler+0x7e>
    33b2:	239c      	movs	r3, #156	; 0x9c
    33b4:	6829      	ldr	r1, [r5, #0]
    33b6:	58cb      	ldr	r3, [r1, r3]
		index -= 32;
    33b8:	3a20      	subs	r2, #32
		if (module_inst->hw->NDAT2.reg & (1 << index)) {
    33ba:	2101      	movs	r1, #1
    33bc:	4091      	lsls	r1, r2
    33be:	400b      	ands	r3, r1
    33c0:	1e5a      	subs	r2, r3, #1
    33c2:	4193      	sbcs	r3, r2
    33c4:	b2db      	uxtb	r3, r3
    33c6:	e02a      	b.n	341e <CAN0_Handler+0x96>
		module_inst->hw->NDAT2.reg = (1 << index);
    33c8:	4a5d      	ldr	r2, [pc, #372]	; (3540 <CAN0_Handler+0x1b8>)
    33ca:	6811      	ldr	r1, [r2, #0]
		index -= 32;
    33cc:	3b20      	subs	r3, #32
		module_inst->hw->NDAT2.reg = (1 << index);
    33ce:	2201      	movs	r2, #1
    33d0:	409a      	lsls	r2, r3
    33d2:	0013      	movs	r3, r2
    33d4:	229c      	movs	r2, #156	; 0x9c
    33d6:	508b      	str	r3, [r1, r2]
    33d8:	9a01      	ldr	r2, [sp, #4]
    33da:	0021      	movs	r1, r4
    33dc:	4858      	ldr	r0, [pc, #352]	; (3540 <CAN0_Handler+0x1b8>)
    33de:	4b5a      	ldr	r3, [pc, #360]	; (3548 <CAN0_Handler+0x1c0>)
    33e0:	4798      	blx	r3
				if (rx_element_buffer.R0.bit.XTD) {
    33e2:	6823      	ldr	r3, [r4, #0]
				for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    33e4:	2300      	movs	r3, #0
    33e6:	9302      	str	r3, [sp, #8]
    33e8:	9b02      	ldr	r3, [sp, #8]
    33ea:	2b07      	cmp	r3, #7
    33ec:	d805      	bhi.n	33fa <CAN0_Handler+0x72>
    33ee:	9b02      	ldr	r3, [sp, #8]
    33f0:	3301      	adds	r3, #1
    33f2:	9302      	str	r3, [sp, #8]
    33f4:	9b02      	ldr	r3, [sp, #8]
    33f6:	2b07      	cmp	r3, #7
    33f8:	d9f9      	bls.n	33ee <CAN0_Handler+0x66>
		for (i = 0; i < CONF_CAN0_RX_BUFFER_NUM; i++) {
    33fa:	9b02      	ldr	r3, [sp, #8]
    33fc:	3301      	adds	r3, #1
    33fe:	9302      	str	r3, [sp, #8]
    3400:	9b02      	ldr	r3, [sp, #8]
    3402:	2b03      	cmp	r3, #3
    3404:	d81a      	bhi.n	343c <CAN0_Handler+0xb4>
			if (can_rx_get_buffer_status(&can_instance, i)) {
    3406:	9a02      	ldr	r2, [sp, #8]
	if (index < 32) {
    3408:	2a1f      	cmp	r2, #31
    340a:	d8d2      	bhi.n	33b2 <CAN0_Handler+0x2a>
		if (module_inst->hw->NDAT1.reg & (1 << index)) {
    340c:	2398      	movs	r3, #152	; 0x98
    340e:	6831      	ldr	r1, [r6, #0]
    3410:	58cb      	ldr	r3, [r1, r3]
    3412:	2101      	movs	r1, #1
    3414:	4091      	lsls	r1, r2
    3416:	400b      	ands	r3, r1
    3418:	1e5a      	subs	r2, r3, #1
    341a:	4193      	sbcs	r3, r2
    341c:	b2db      	uxtb	r3, r3
    341e:	2b00      	cmp	r3, #0
    3420:	d0eb      	beq.n	33fa <CAN0_Handler+0x72>
				rx_buffer_index = i;
    3422:	9b02      	ldr	r3, [sp, #8]
    3424:	9301      	str	r3, [sp, #4]
				can_rx_clear_buffer_status(&can_instance, i);
    3426:	9b02      	ldr	r3, [sp, #8]
	if (index < 32) {
    3428:	2b1f      	cmp	r3, #31
    342a:	d8cd      	bhi.n	33c8 <CAN0_Handler+0x40>
		module_inst->hw->NDAT1.reg = (1 << index);
    342c:	4a44      	ldr	r2, [pc, #272]	; (3540 <CAN0_Handler+0x1b8>)
    342e:	6811      	ldr	r1, [r2, #0]
    3430:	2201      	movs	r2, #1
    3432:	409a      	lsls	r2, r3
    3434:	0013      	movs	r3, r2
    3436:	2298      	movs	r2, #152	; 0x98
    3438:	508b      	str	r3, [r1, r2]
    343a:	e7cd      	b.n	33d8 <CAN0_Handler+0x50>
	if (status & CAN_RX_FIFO_0_NEW_MESSAGE) {
    343c:	9b03      	ldr	r3, [sp, #12]
    343e:	07db      	lsls	r3, r3, #31
    3440:	d40f      	bmi.n	3462 <CAN0_Handler+0xda>
	if (status & CAN_RX_FIFO_1_NEW_MESSAGE) {
    3442:	9b03      	ldr	r3, [sp, #12]
    3444:	06db      	lsls	r3, r3, #27
    3446:	d44a      	bmi.n	34de <CAN0_Handler+0x156>
	if ((status & CAN_PROTOCOL_ERROR_ARBITRATION)
    3448:	9b03      	ldr	r3, [sp, #12]
    344a:	011b      	lsls	r3, r3, #4
    344c:	d402      	bmi.n	3454 <CAN0_Handler+0xcc>
	|| (status & CAN_PROTOCOL_ERROR_DATA)) {
    344e:	9b03      	ldr	r3, [sp, #12]
    3450:	00db      	lsls	r3, r3, #3
    3452:	d504      	bpl.n	345e <CAN0_Handler+0xd6>
	module_inst->hw->IR.reg = source;
    3454:	4b3a      	ldr	r3, [pc, #232]	; (3540 <CAN0_Handler+0x1b8>)
    3456:	681b      	ldr	r3, [r3, #0]
    3458:	22c0      	movs	r2, #192	; 0xc0
    345a:	0552      	lsls	r2, r2, #21
    345c:	651a      	str	r2, [r3, #80]	; 0x50
}
    345e:	b004      	add	sp, #16
    3460:	bd70      	pop	{r4, r5, r6, pc}
    3462:	4d37      	ldr	r5, [pc, #220]	; (3540 <CAN0_Handler+0x1b8>)
    3464:	682b      	ldr	r3, [r5, #0]
    3466:	2201      	movs	r2, #1
    3468:	651a      	str	r2, [r3, #80]	; 0x50
		can_get_rx_fifo_0_element(&can_instance, &rx_element_fifo_0,
    346a:	4c38      	ldr	r4, [pc, #224]	; (354c <CAN0_Handler+0x1c4>)
    346c:	6822      	ldr	r2, [r4, #0]
    346e:	4938      	ldr	r1, [pc, #224]	; (3550 <CAN0_Handler+0x1c8>)
    3470:	0028      	movs	r0, r5
    3472:	4b38      	ldr	r3, [pc, #224]	; (3554 <CAN0_Handler+0x1cc>)
    3474:	4798      	blx	r3
		can_rx_fifo_acknowledge(&can_instance, 0,
    3476:	6822      	ldr	r2, [r4, #0]
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
    3478:	6829      	ldr	r1, [r5, #0]
    347a:	233f      	movs	r3, #63	; 0x3f
    347c:	4013      	ands	r3, r2
    347e:	22a8      	movs	r2, #168	; 0xa8
    3480:	508b      	str	r3, [r1, r2]
		standard_receive_index++;
    3482:	6823      	ldr	r3, [r4, #0]
    3484:	3301      	adds	r3, #1
    3486:	6023      	str	r3, [r4, #0]
		if (standard_receive_index == CONF_CAN0_RX_FIFO_0_NUM) {
    3488:	6823      	ldr	r3, [r4, #0]
    348a:	2b04      	cmp	r3, #4
    348c:	d00f      	beq.n	34ae <CAN0_Handler+0x126>
		if (rx_element_fifo_0.R1.bit.FDF) {
    348e:	4b30      	ldr	r3, [pc, #192]	; (3550 <CAN0_Handler+0x1c8>)
    3490:	685b      	ldr	r3, [r3, #4]
    3492:	029b      	lsls	r3, r3, #10
    3494:	d50f      	bpl.n	34b6 <CAN0_Handler+0x12e>
			for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    3496:	2300      	movs	r3, #0
    3498:	9302      	str	r3, [sp, #8]
    349a:	9b02      	ldr	r3, [sp, #8]
    349c:	2b07      	cmp	r3, #7
    349e:	d8d0      	bhi.n	3442 <CAN0_Handler+0xba>
    34a0:	9b02      	ldr	r3, [sp, #8]
    34a2:	3301      	adds	r3, #1
    34a4:	9302      	str	r3, [sp, #8]
    34a6:	9b02      	ldr	r3, [sp, #8]
    34a8:	2b07      	cmp	r3, #7
    34aa:	d9f9      	bls.n	34a0 <CAN0_Handler+0x118>
    34ac:	e7c9      	b.n	3442 <CAN0_Handler+0xba>
			standard_receive_index = 0;
    34ae:	2200      	movs	r2, #0
    34b0:	4b26      	ldr	r3, [pc, #152]	; (354c <CAN0_Handler+0x1c4>)
    34b2:	601a      	str	r2, [r3, #0]
    34b4:	e7eb      	b.n	348e <CAN0_Handler+0x106>
			for (i = 0; i < rx_element_fifo_0.R1.bit.DLC; i++) {
    34b6:	2300      	movs	r3, #0
    34b8:	9302      	str	r3, [sp, #8]
    34ba:	4b25      	ldr	r3, [pc, #148]	; (3550 <CAN0_Handler+0x1c8>)
    34bc:	685b      	ldr	r3, [r3, #4]
    34be:	031b      	lsls	r3, r3, #12
    34c0:	0f1b      	lsrs	r3, r3, #28
    34c2:	9a02      	ldr	r2, [sp, #8]
    34c4:	4293      	cmp	r3, r2
    34c6:	d9bc      	bls.n	3442 <CAN0_Handler+0xba>
    34c8:	4921      	ldr	r1, [pc, #132]	; (3550 <CAN0_Handler+0x1c8>)
    34ca:	9b02      	ldr	r3, [sp, #8]
    34cc:	3301      	adds	r3, #1
    34ce:	9302      	str	r3, [sp, #8]
    34d0:	684b      	ldr	r3, [r1, #4]
    34d2:	031b      	lsls	r3, r3, #12
    34d4:	0f1b      	lsrs	r3, r3, #28
    34d6:	9a02      	ldr	r2, [sp, #8]
    34d8:	4293      	cmp	r3, r2
    34da:	d8f6      	bhi.n	34ca <CAN0_Handler+0x142>
    34dc:	e7b1      	b.n	3442 <CAN0_Handler+0xba>
	module_inst->hw->IR.reg = source;
    34de:	4d18      	ldr	r5, [pc, #96]	; (3540 <CAN0_Handler+0x1b8>)
    34e0:	682b      	ldr	r3, [r5, #0]
    34e2:	2210      	movs	r2, #16
    34e4:	651a      	str	r2, [r3, #80]	; 0x50
		can_get_rx_fifo_1_element(&can_instance, &rx_element_fifo_1,
    34e6:	4c1c      	ldr	r4, [pc, #112]	; (3558 <CAN0_Handler+0x1d0>)
    34e8:	6822      	ldr	r2, [r4, #0]
    34ea:	491c      	ldr	r1, [pc, #112]	; (355c <CAN0_Handler+0x1d4>)
    34ec:	0028      	movs	r0, r5
    34ee:	4b1c      	ldr	r3, [pc, #112]	; (3560 <CAN0_Handler+0x1d8>)
    34f0:	4798      	blx	r3
		can_rx_fifo_acknowledge(&can_instance, 0,
    34f2:	6822      	ldr	r2, [r4, #0]
		module_inst->hw->RXF0A.reg = CAN_RXF0A_F0AI(index);
    34f4:	6829      	ldr	r1, [r5, #0]
    34f6:	233f      	movs	r3, #63	; 0x3f
    34f8:	4013      	ands	r3, r2
    34fa:	22a8      	movs	r2, #168	; 0xa8
    34fc:	508b      	str	r3, [r1, r2]
		extended_receive_index++;
    34fe:	6823      	ldr	r3, [r4, #0]
    3500:	3301      	adds	r3, #1
    3502:	6023      	str	r3, [r4, #0]
		if (extended_receive_index == CONF_CAN0_RX_FIFO_1_NUM) {
    3504:	6823      	ldr	r3, [r4, #0]
    3506:	2b04      	cmp	r3, #4
    3508:	d015      	beq.n	3536 <CAN0_Handler+0x1ae>
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    350a:	2300      	movs	r3, #0
    350c:	9302      	str	r3, [sp, #8]
    350e:	9b02      	ldr	r3, [sp, #8]
    3510:	2b07      	cmp	r3, #7
    3512:	d80c      	bhi.n	352e <CAN0_Handler+0x1a6>
			commandMsg[i] = rx_element_fifo_1.data[i];
    3514:	4813      	ldr	r0, [pc, #76]	; (3564 <CAN0_Handler+0x1dc>)
    3516:	4911      	ldr	r1, [pc, #68]	; (355c <CAN0_Handler+0x1d4>)
    3518:	9a02      	ldr	r2, [sp, #8]
    351a:	9b02      	ldr	r3, [sp, #8]
    351c:	18cb      	adds	r3, r1, r3
    351e:	7a1b      	ldrb	r3, [r3, #8]
    3520:	5483      	strb	r3, [r0, r2]
		for (i = 0; i < CONF_CAN_ELEMENT_DATA_SIZE; i++) {
    3522:	9b02      	ldr	r3, [sp, #8]
    3524:	3301      	adds	r3, #1
    3526:	9302      	str	r3, [sp, #8]
    3528:	9b02      	ldr	r3, [sp, #8]
    352a:	2b07      	cmp	r3, #7
    352c:	d9f4      	bls.n	3518 <CAN0_Handler+0x190>
		canMsgInFlag = 1;
    352e:	2201      	movs	r2, #1
    3530:	4b0d      	ldr	r3, [pc, #52]	; (3568 <CAN0_Handler+0x1e0>)
    3532:	701a      	strb	r2, [r3, #0]
    3534:	e788      	b.n	3448 <CAN0_Handler+0xc0>
			extended_receive_index = 0;
    3536:	2200      	movs	r2, #0
    3538:	4b07      	ldr	r3, [pc, #28]	; (3558 <CAN0_Handler+0x1d0>)
    353a:	601a      	str	r2, [r3, #0]
    353c:	e7e5      	b.n	350a <CAN0_Handler+0x182>
    353e:	46c0      	nop			; (mov r8, r8)
    3540:	20000384 	.word	0x20000384
    3544:	20000408 	.word	0x20000408
    3548:	00001479 	.word	0x00001479
    354c:	20000438 	.word	0x20000438
    3550:	20000418 	.word	0x20000418
    3554:	000014c9 	.word	0x000014c9
    3558:	20000404 	.word	0x20000404
    355c:	20000428 	.word	0x20000428
    3560:	00001519 	.word	0x00001519
    3564:	200003e0 	.word	0x200003e0
    3568:	20000383 	.word	0x20000383

0000356c <configure_rtc_calendar>:
{
    356c:	b530      	push	{r4, r5, lr}
    356e:	b089      	sub	sp, #36	; 0x24
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    3570:	aa03      	add	r2, sp, #12
    3572:	23b0      	movs	r3, #176	; 0xb0
    3574:	011b      	lsls	r3, r3, #4
    3576:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    3578:	2300      	movs	r3, #0
    357a:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    357c:	21fa      	movs	r1, #250	; 0xfa
    357e:	00c9      	lsls	r1, r1, #3
    3580:	8091      	strh	r1, [r2, #4]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
    3582:	2401      	movs	r4, #1
    3584:	7194      	strb	r4, [r2, #6]
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    3586:	72d3      	strb	r3, [r2, #11]
	config_rtc_calendar.clock_24h = true;
    3588:	70d4      	strb	r4, [r2, #3]
	config_rtc_calendar.alarm[0].time = alarm.time;
    358a:	7213      	strb	r3, [r2, #8]
    358c:	7253      	strb	r3, [r2, #9]
    358e:	7293      	strb	r3, [r2, #10]
    3590:	7314      	strb	r4, [r2, #12]
    3592:	7354      	strb	r4, [r2, #13]
    3594:	23fc      	movs	r3, #252	; 0xfc
    3596:	00db      	lsls	r3, r3, #3
    3598:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_SEC;
    359a:	7414      	strb	r4, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    359c:	4d14      	ldr	r5, [pc, #80]	; (35f0 <configure_rtc_calendar+0x84>)
    359e:	4915      	ldr	r1, [pc, #84]	; (35f4 <configure_rtc_calendar+0x88>)
    35a0:	0028      	movs	r0, r5
    35a2:	4b15      	ldr	r3, [pc, #84]	; (35f8 <configure_rtc_calendar+0x8c>)
    35a4:	4798      	blx	r3
	calendar_event.generate_event_on_periodic[7] = true;
    35a6:	466b      	mov	r3, sp
    35a8:	725c      	strb	r4, [r3, #9]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    35aa:	682d      	ldr	r5, [r5, #0]

	uint32_t event_mask = 0;

	/* Check if the user has requested an overflow event */
	if (events->generate_event_on_overflow) {
    35ac:	781a      	ldrb	r2, [r3, #0]
		event_mask |= RTC_MODE2_EVCTRL_OVFEO;
    35ae:	1e53      	subs	r3, r2, #1
    35b0:	419a      	sbcs	r2, r3
    35b2:	03d2      	lsls	r2, r2, #15
	}

	/* Check if the user has requested any alarm events */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		if (events->generate_event_on_alarm[i]) {
    35b4:	466b      	mov	r3, sp
    35b6:	785b      	ldrb	r3, [r3, #1]
    35b8:	2b00      	cmp	r3, #0
    35ba:	d002      	beq.n	35c2 <configure_rtc_calendar+0x56>
			event_mask |= RTC_MODE2_EVCTRL_ALARMEO(1 << i);
    35bc:	2380      	movs	r3, #128	; 0x80
    35be:	005b      	lsls	r3, r3, #1
    35c0:	431a      	orrs	r2, r3
		event_mask |= RTC_MODE2_EVCTRL_OVFEO;
    35c2:	2300      	movs	r3, #0
	}

	/* Check if the user has requested any periodic events */
	for (uint8_t i = 0; i < 8; i++) {
		if (events->generate_event_on_periodic[i]) {
			event_mask |= RTC_MODE2_EVCTRL_PEREO(1 << i);
    35c4:	2401      	movs	r4, #1
    35c6:	20ff      	movs	r0, #255	; 0xff
		if (events->generate_event_on_periodic[i]) {
    35c8:	0019      	movs	r1, r3
    35ca:	4469      	add	r1, sp
    35cc:	7889      	ldrb	r1, [r1, #2]
    35ce:	2900      	cmp	r1, #0
    35d0:	d003      	beq.n	35da <configure_rtc_calendar+0x6e>
			event_mask |= RTC_MODE2_EVCTRL_PEREO(1 << i);
    35d2:	0021      	movs	r1, r4
    35d4:	4099      	lsls	r1, r3
    35d6:	4001      	ands	r1, r0
    35d8:	430a      	orrs	r2, r1
    35da:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 8; i++) {
    35dc:	2b08      	cmp	r3, #8
    35de:	d1f3      	bne.n	35c8 <configure_rtc_calendar+0x5c>
		event_mask |= RTC_MODE2_EVCTRL_TAMPEVEI;
	}
#endif

	/* Enable given event(s) */
	rtc_module->MODE2.EVCTRL.reg |= event_mask;
    35e0:	686b      	ldr	r3, [r5, #4]
    35e2:	431a      	orrs	r2, r3
    35e4:	606a      	str	r2, [r5, #4]
	rtc_calendar_enable(&rtc_instance);
    35e6:	4802      	ldr	r0, [pc, #8]	; (35f0 <configure_rtc_calendar+0x84>)
    35e8:	4b04      	ldr	r3, [pc, #16]	; (35fc <configure_rtc_calendar+0x90>)
    35ea:	4798      	blx	r3
}
    35ec:	b009      	add	sp, #36	; 0x24
    35ee:	bd30      	pop	{r4, r5, pc}
    35f0:	200004ac 	.word	0x200004ac
    35f4:	40002400 	.word	0x40002400
    35f8:	00000a31 	.word	0x00000a31
    35fc:	000008b1 	.word	0x000008b1

00003600 <configure_rtc_callbacks>:

void configure_rtc_callbacks(void)
{
    3600:	b510      	push	{r4, lr}
	rtc_calendar_register_callback(&rtc_instance, rtc_match_callback, RTC_CALENDAR_CALLBACK_ALARM_0);
    3602:	4c05      	ldr	r4, [pc, #20]	; (3618 <configure_rtc_callbacks+0x18>)
    3604:	2208      	movs	r2, #8
    3606:	4905      	ldr	r1, [pc, #20]	; (361c <configure_rtc_callbacks+0x1c>)
    3608:	0020      	movs	r0, r4
    360a:	4b05      	ldr	r3, [pc, #20]	; (3620 <configure_rtc_callbacks+0x20>)
    360c:	4798      	blx	r3
	rtc_calendar_enable_callback(&rtc_instance, RTC_CALENDAR_CALLBACK_ALARM_0);
    360e:	2108      	movs	r1, #8
    3610:	0020      	movs	r0, r4
    3612:	4b04      	ldr	r3, [pc, #16]	; (3624 <configure_rtc_callbacks+0x24>)
    3614:	4798      	blx	r3
}
    3616:	bd10      	pop	{r4, pc}
    3618:	200004ac 	.word	0x200004ac
    361c:	00003269 	.word	0x00003269
    3620:	00000aad 	.word	0x00000aad
    3624:	00000acd 	.word	0x00000acd

00003628 <configure_tsens>:
/************************************************************************/
/* config temperature sensor                                            */
/************************************************************************/

void configure_tsens(void)
{
    3628:	b500      	push	{lr}
    362a:	b089      	sub	sp, #36	; 0x24
	struct tsens_config config_tsens;
	tsens_get_config_defaults(&config_tsens);
    362c:	a801      	add	r0, sp, #4
    362e:	4b07      	ldr	r3, [pc, #28]	; (364c <configure_tsens+0x24>)
    3630:	4798      	blx	r3
	tsens_init(&config_tsens);
    3632:	a801      	add	r0, sp, #4
    3634:	4b06      	ldr	r3, [pc, #24]	; (3650 <configure_tsens+0x28>)
    3636:	4798      	blx	r3
	TSENS->CTRLA.reg |= TSENS_CTRLA_ENABLE;
    3638:	4a06      	ldr	r2, [pc, #24]	; (3654 <configure_tsens+0x2c>)
    363a:	7813      	ldrb	r3, [r2, #0]
    363c:	2102      	movs	r1, #2
    363e:	430b      	orrs	r3, r1
    3640:	7013      	strb	r3, [r2, #0]
	if (TSENS->SYNCBUSY.reg) {
    3642:	6893      	ldr	r3, [r2, #8]
	while (tsens_is_syncing()) {
    3644:	2b00      	cmp	r3, #0
    3646:	d1fc      	bne.n	3642 <configure_tsens+0x1a>
	tsens_enable();
}
    3648:	b009      	add	sp, #36	; 0x24
    364a:	bd00      	pop	{pc}
    364c:	00000c75 	.word	0x00000c75
    3650:	00000bb9 	.word	0x00000bb9
    3654:	40003000 	.word	0x40003000

00003658 <battery_init>:

void battery_init(){
    3658:	b570      	push	{r4, r5, r6, lr}
	Adc *const adc_module = module_inst->hw;
    365a:	4b4c      	ldr	r3, [pc, #304]	; (378c <battery_init+0x134>)
    365c:	681b      	ldr	r3, [r3, #0]
    365e:	8c1a      	ldrh	r2, [r3, #32]
    3660:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    3662:	2a00      	cmp	r2, #0
    3664:	d1fb      	bne.n	365e <battery_init+0x6>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    3666:	891a      	ldrh	r2, [r3, #8]
    3668:	211f      	movs	r1, #31
    366a:	438a      	bics	r2, r1
    366c:	391b      	subs	r1, #27
    366e:	430a      	orrs	r2, r1
	adc_module->INPUTCTRL.reg =
    3670:	811a      	strh	r2, [r3, #8]
    3672:	8c1a      	ldrh	r2, [r3, #32]
    3674:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    3676:	2a00      	cmp	r2, #0
    3678:	d1fb      	bne.n	3672 <battery_init+0x1a>
    367a:	8c1a      	ldrh	r2, [r3, #32]
    367c:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    367e:	2a00      	cmp	r2, #0
    3680:	d1fb      	bne.n	367a <battery_init+0x22>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3682:	7e1a      	ldrb	r2, [r3, #24]
    3684:	2102      	movs	r1, #2
    3686:	430a      	orrs	r2, r1
    3688:	761a      	strb	r2, [r3, #24]
    368a:	8c1a      	ldrh	r2, [r3, #32]
    368c:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    368e:	2a00      	cmp	r2, #0
    3690:	d1fb      	bne.n	368a <battery_init+0x32>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3692:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    3694:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    3696:	2402      	movs	r4, #2
    3698:	e001      	b.n	369e <battery_init+0x46>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    369a:	4208      	tst	r0, r1
    369c:	d10a      	bne.n	36b4 <battery_init+0x5c>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    369e:	799a      	ldrb	r2, [r3, #6]
    36a0:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    36a2:	0001      	movs	r1, r0
    36a4:	4011      	ands	r1, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    36a6:	4215      	tst	r5, r2
    36a8:	d000      	beq.n	36ac <battery_init+0x54>
		status_flags |= ADC_STATUS_WINDOW;
    36aa:	4321      	orrs	r1, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    36ac:	4214      	tst	r4, r2
    36ae:	d0f4      	beq.n	369a <battery_init+0x42>
		status_flags |= ADC_STATUS_OVERRUN;
    36b0:	4329      	orrs	r1, r5
    36b2:	e7f2      	b.n	369a <battery_init+0x42>
	*result = adc_module->RESULT.reg;
    36b4:	8c9c      	ldrh	r4, [r3, #36]	; 0x24
    36b6:	b2a4      	uxth	r4, r4
    36b8:	4a35      	ldr	r2, [pc, #212]	; (3790 <battery_init+0x138>)
    36ba:	8014      	strh	r4, [r2, #0]
	adc_module->INTFLAG.reg = int_flags;
    36bc:	2201      	movs	r2, #1
    36be:	719a      	strb	r2, [r3, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    36c0:	7999      	ldrb	r1, [r3, #6]
    36c2:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    36c4:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    36c6:	0748      	lsls	r0, r1, #29
    36c8:	d501      	bpl.n	36ce <battery_init+0x76>
		status_flags |= ADC_STATUS_WINDOW;
    36ca:	2002      	movs	r0, #2
    36cc:	4302      	orrs	r2, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    36ce:	0789      	lsls	r1, r1, #30
    36d0:	d501      	bpl.n	36d6 <battery_init+0x7e>
		status_flags |= ADC_STATUS_OVERRUN;
    36d2:	2104      	movs	r1, #4
    36d4:	430a      	orrs	r2, r1
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    36d6:	0752      	lsls	r2, r2, #29
    36d8:	d501      	bpl.n	36de <battery_init+0x86>
	adc_module->INTFLAG.reg = int_flags;
    36da:	2202      	movs	r2, #2
    36dc:	719a      	strb	r2, [r3, #6]
    36de:	8c1a      	ldrh	r2, [r3, #32]
    36e0:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    36e2:	2a00      	cmp	r2, #0
    36e4:	d1fb      	bne.n	36de <battery_init+0x86>
			(adc_module->INPUTCTRL.reg & ~ADC_INPUTCTRL_MUXPOS_Msk) |
    36e6:	891a      	ldrh	r2, [r3, #8]
    36e8:	211f      	movs	r1, #31
    36ea:	438a      	bics	r2, r1
    36ec:	391a      	subs	r1, #26
    36ee:	430a      	orrs	r2, r1
	adc_module->INPUTCTRL.reg =
    36f0:	811a      	strh	r2, [r3, #8]
    36f2:	8c1a      	ldrh	r2, [r3, #32]
    36f4:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    36f6:	2a00      	cmp	r2, #0
    36f8:	d1fb      	bne.n	36f2 <battery_init+0x9a>
    36fa:	8c1a      	ldrh	r2, [r3, #32]
    36fc:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    36fe:	2a00      	cmp	r2, #0
    3700:	d1fb      	bne.n	36fa <battery_init+0xa2>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3702:	7e1a      	ldrb	r2, [r3, #24]
    3704:	2102      	movs	r1, #2
    3706:	430a      	orrs	r2, r1
    3708:	761a      	strb	r2, [r3, #24]
    370a:	8c1a      	ldrh	r2, [r3, #32]
    370c:	b292      	uxth	r2, r2
	while (adc_is_syncing(module_inst)) {
    370e:	2a00      	cmp	r2, #0
    3710:	d1fb      	bne.n	370a <battery_init+0xb2>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3712:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    3714:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    3716:	2502      	movs	r5, #2
    3718:	e001      	b.n	371e <battery_init+0xc6>
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    371a:	4208      	tst	r0, r1
    371c:	d10a      	bne.n	3734 <battery_init+0xdc>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    371e:	799a      	ldrb	r2, [r3, #6]
    3720:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3722:	0001      	movs	r1, r0
    3724:	4011      	ands	r1, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    3726:	4216      	tst	r6, r2
    3728:	d000      	beq.n	372c <battery_init+0xd4>
		status_flags |= ADC_STATUS_WINDOW;
    372a:	4329      	orrs	r1, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    372c:	4215      	tst	r5, r2
    372e:	d0f4      	beq.n	371a <battery_init+0xc2>
		status_flags |= ADC_STATUS_OVERRUN;
    3730:	4331      	orrs	r1, r6
    3732:	e7f2      	b.n	371a <battery_init+0xc2>
	*result = adc_module->RESULT.reg;
    3734:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    3736:	b280      	uxth	r0, r0
    3738:	4a16      	ldr	r2, [pc, #88]	; (3794 <battery_init+0x13c>)
    373a:	8010      	strh	r0, [r2, #0]
	adc_module->INTFLAG.reg = int_flags;
    373c:	2201      	movs	r2, #1
    373e:	719a      	strb	r2, [r3, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    3740:	7999      	ldrb	r1, [r3, #6]
    3742:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    3744:	400a      	ands	r2, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    3746:	074d      	lsls	r5, r1, #29
    3748:	d501      	bpl.n	374e <battery_init+0xf6>
		status_flags |= ADC_STATUS_WINDOW;
    374a:	2502      	movs	r5, #2
    374c:	432a      	orrs	r2, r5
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    374e:	0789      	lsls	r1, r1, #30
    3750:	d501      	bpl.n	3756 <battery_init+0xfe>
		status_flags |= ADC_STATUS_OVERRUN;
    3752:	2104      	movs	r1, #4
    3754:	430a      	orrs	r2, r1
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    3756:	0752      	lsls	r2, r2, #29
    3758:	d501      	bpl.n	375e <battery_init+0x106>
	adc_module->INTFLAG.reg = int_flags;
    375a:	2202      	movs	r2, #2
    375c:	719a      	strb	r2, [r3, #6]
	adc_start_conversion(&adc_instance);
	do {
		// Wait for conversion to be done and read out result
	} while (adc_read(&adc_instance, &charge_current_adc_result) == STATUS_BUSY);
	//printf("%d current %d \r\n", time_index, adc_current * 5000 / 4096);
	delta_charge = 0;
    375e:	2200      	movs	r2, #0
    3760:	4b0d      	ldr	r3, [pc, #52]	; (3798 <battery_init+0x140>)
    3762:	601a      	str	r2, [r3, #0]
    3764:	2100      	movs	r1, #0
	uint32_t voltage = (charge_voltage_adc_result <= charge_current_adc_result) ? 0 : (charge_voltage_adc_result - charge_current_adc_result) * 5000 / 4096;
    3766:	4284      	cmp	r4, r0
    3768:	d907      	bls.n	377a <battery_init+0x122>
    376a:	1a24      	subs	r4, r4, r0
    376c:	490b      	ldr	r1, [pc, #44]	; (379c <battery_init+0x144>)
    376e:	434c      	muls	r4, r1
    3770:	17e1      	asrs	r1, r4, #31
    3772:	0509      	lsls	r1, r1, #20
    3774:	0d09      	lsrs	r1, r1, #20
    3776:	1909      	adds	r1, r1, r4
    3778:	1309      	asrs	r1, r1, #12
	printf("Voltage %d \r\n", voltage);
    377a:	4809      	ldr	r0, [pc, #36]	; (37a0 <battery_init+0x148>)
    377c:	4c09      	ldr	r4, [pc, #36]	; (37a4 <battery_init+0x14c>)
    377e:	47a0      	blx	r4
	//delta_charge  = (voltage > 3000) ?  (voltage - 3000)  * calibrated_battery_capacity / 1200  : 0;
	printf("Initial delta_charge %d \r\n", delta_charge);
    3780:	4b05      	ldr	r3, [pc, #20]	; (3798 <battery_init+0x140>)
    3782:	6819      	ldr	r1, [r3, #0]
    3784:	4808      	ldr	r0, [pc, #32]	; (37a8 <battery_init+0x150>)
    3786:	47a0      	blx	r4
}
    3788:	bd70      	pop	{r4, r5, r6, pc}
    378a:	46c0      	nop			; (mov r8, r8)
    378c:	20000514 	.word	0x20000514
    3790:	200004e8 	.word	0x200004e8
    3794:	20000510 	.word	0x20000510
    3798:	200003f8 	.word	0x200003f8
    379c:	00001388 	.word	0x00001388
    37a0:	000051a8 	.word	0x000051a8
    37a4:	00003eb5 	.word	0x00003eb5
    37a8:	000051b8 	.word	0x000051b8

000037ac <main>:


//! [setup]

int main(void)
{
    37ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    37ae:	46ce      	mov	lr, r9
    37b0:	4647      	mov	r7, r8
    37b2:	b580      	push	{r7, lr}
    37b4:	b099      	sub	sp, #100	; 0x64
	
	uint8_t key;

//! [setup_init]
	system_init();
    37b6:	4b90      	ldr	r3, [pc, #576]	; (39f8 <main+0x24c>)
    37b8:	4798      	blx	r3
	cpu_irq_enable();
    37ba:	2401      	movs	r4, #1
    37bc:	4b8f      	ldr	r3, [pc, #572]	; (39fc <main+0x250>)
    37be:	701c      	strb	r4, [r3, #0]
    37c0:	f3bf 8f5f 	dmb	sy
    37c4:	b662      	cpsie	i
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    37c6:	aa01      	add	r2, sp, #4
    37c8:	2380      	movs	r3, #128	; 0x80
    37ca:	05db      	lsls	r3, r3, #23
    37cc:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    37ce:	2300      	movs	r3, #0
    37d0:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    37d2:	21ff      	movs	r1, #255	; 0xff
    37d4:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    37d6:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    37d8:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
    37da:	2196      	movs	r1, #150	; 0x96
    37dc:	0189      	lsls	r1, r1, #6
    37de:	6291      	str	r1, [r2, #40]	; 0x28
	config->receiver_enable  = true;
    37e0:	212c      	movs	r1, #44	; 0x2c
    37e2:	5454      	strb	r4, [r2, r1]
	config->transmitter_enable = true;
    37e4:	3101      	adds	r1, #1
    37e6:	5454      	strb	r4, [r2, r1]
	config->clock_polarity_inverted = false;
    37e8:	3101      	adds	r1, #1
    37ea:	5453      	strb	r3, [r2, r1]
	config->use_external_clock = false;
    37ec:	3101      	adds	r1, #1
    37ee:	5453      	strb	r3, [r2, r1]
	config->ext_clock_freq   = 0;
    37f0:	6313      	str	r3, [r2, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    37f2:	3105      	adds	r1, #5
    37f4:	5453      	strb	r3, [r2, r1]
	config->generator_source = GCLK_GENERATOR_0;
    37f6:	3101      	adds	r1, #1
    37f8:	5453      	strb	r3, [r2, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    37fa:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    37fc:	2100      	movs	r1, #0
    37fe:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3800:	76d1      	strb	r1, [r2, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    3802:	61d3      	str	r3, [r2, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    3804:	8413      	strh	r3, [r2, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    3806:	8453      	strh	r3, [r2, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3808:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    380a:	3324      	adds	r3, #36	; 0x24
    380c:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    380e:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    3810:	3b11      	subs	r3, #17
    3812:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3814:	3313      	adds	r3, #19
    3816:	54d1      	strb	r1, [r2, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    3818:	3b01      	subs	r3, #1
    381a:	54d1      	strb	r1, [r2, r3]
	config_cdc.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    381c:	23c4      	movs	r3, #196	; 0xc4
    381e:	039b      	lsls	r3, r3, #14
    3820:	60d3      	str	r3, [r2, #12]
	config_cdc.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    3822:	2301      	movs	r3, #1
    3824:	425b      	negs	r3, r3
    3826:	6393      	str	r3, [r2, #56]	; 0x38
	config_cdc.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    3828:	63d3      	str	r3, [r2, #60]	; 0x3c
	config_cdc.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    382a:	4b75      	ldr	r3, [pc, #468]	; (3a00 <main+0x254>)
    382c:	6413      	str	r3, [r2, #64]	; 0x40
	config_cdc.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    382e:	4b75      	ldr	r3, [pc, #468]	; (3a04 <main+0x258>)
    3830:	6453      	str	r3, [r2, #68]	; 0x44
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3832:	4d75      	ldr	r5, [pc, #468]	; (3a08 <main+0x25c>)
    3834:	4b75      	ldr	r3, [pc, #468]	; (3a0c <main+0x260>)
    3836:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3838:	4975      	ldr	r1, [pc, #468]	; (3a10 <main+0x264>)
    383a:	4b76      	ldr	r3, [pc, #472]	; (3a14 <main+0x268>)
    383c:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    383e:	4976      	ldr	r1, [pc, #472]	; (3a18 <main+0x26c>)
    3840:	4b76      	ldr	r3, [pc, #472]	; (3a1c <main+0x270>)
    3842:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3844:	4976      	ldr	r1, [pc, #472]	; (3a20 <main+0x274>)
    3846:	0028      	movs	r0, r5
    3848:	4b76      	ldr	r3, [pc, #472]	; (3a24 <main+0x278>)
    384a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    384c:	4f76      	ldr	r7, [pc, #472]	; (3a28 <main+0x27c>)
    384e:	683b      	ldr	r3, [r7, #0]
    3850:	6898      	ldr	r0, [r3, #8]
    3852:	2100      	movs	r1, #0
    3854:	4e75      	ldr	r6, [pc, #468]	; (3a2c <main+0x280>)
    3856:	47b0      	blx	r6
	setbuf(stdin, NULL);
    3858:	683b      	ldr	r3, [r7, #0]
    385a:	6858      	ldr	r0, [r3, #4]
    385c:	2100      	movs	r1, #0
    385e:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3860:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3862:	0030      	movs	r0, r6
    3864:	4b72      	ldr	r3, [pc, #456]	; (3a30 <main+0x284>)
    3866:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3868:	231f      	movs	r3, #31
    386a:	4018      	ands	r0, r3
    386c:	4084      	lsls	r4, r0
    386e:	4b71      	ldr	r3, [pc, #452]	; (3a34 <main+0x288>)
    3870:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3872:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3874:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3876:	2a00      	cmp	r2, #0
    3878:	d1fc      	bne.n	3874 <main+0xc8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    387a:	6833      	ldr	r3, [r6, #0]
    387c:	2702      	movs	r7, #2
    387e:	433b      	orrs	r3, r7
    3880:	6033      	str	r3, [r6, #0]

	struct events_resource example_event;
	struct events_hook hook;

//!	setup GPIO
	configure_port_pins();
    3882:	4b6d      	ldr	r3, [pc, #436]	; (3a38 <main+0x28c>)
    3884:	4798      	blx	r3
	events_get_config_defaults(&config);
    3886:	ac01      	add	r4, sp, #4
    3888:	0020      	movs	r0, r4
    388a:	4b6c      	ldr	r3, [pc, #432]	; (3a3c <main+0x290>)
    388c:	4798      	blx	r3
	config.generator = CONF_EVENT_GENERATOR;
    388e:	230d      	movs	r3, #13
    3890:	70a3      	strb	r3, [r4, #2]
	config.edge_detect = EVENTS_EDGE_DETECT_RISING;
    3892:	2601      	movs	r6, #1
    3894:	7026      	strb	r6, [r4, #0]
	config.path = EVENTS_PATH_SYNCHRONOUS;
    3896:	2500      	movs	r5, #0
    3898:	7065      	strb	r5, [r4, #1]
	config.clock_source = GCLK_GENERATOR_0;
    389a:	70e5      	strb	r5, [r4, #3]
	events_allocate(resource, &config);
    389c:	0021      	movs	r1, r4
    389e:	a816      	add	r0, sp, #88	; 0x58
    38a0:	4b67      	ldr	r3, [pc, #412]	; (3a40 <main+0x294>)
    38a2:	4798      	blx	r3
	events_attach_user(resource, CONF_EVENT_USER);
    38a4:	2105      	movs	r1, #5
    38a6:	a816      	add	r0, sp, #88	; 0x58
    38a8:	4b66      	ldr	r3, [pc, #408]	; (3a44 <main+0x298>)
    38aa:	4798      	blx	r3
	events_create_hook(hook, ADC_event);
    38ac:	4966      	ldr	r1, [pc, #408]	; (3a48 <main+0x29c>)
    38ae:	a813      	add	r0, sp, #76	; 0x4c
    38b0:	4b66      	ldr	r3, [pc, #408]	; (3a4c <main+0x2a0>)
    38b2:	4798      	blx	r3
	events_add_hook(resource, hook);
    38b4:	a913      	add	r1, sp, #76	; 0x4c
    38b6:	a816      	add	r0, sp, #88	; 0x58
    38b8:	4b65      	ldr	r3, [pc, #404]	; (3a50 <main+0x2a4>)
    38ba:	4798      	blx	r3
	events_enable_interrupt_source(resource, EVENTS_INTERRUPT_DETECT);
    38bc:	2101      	movs	r1, #1
    38be:	a816      	add	r0, sp, #88	; 0x58
    38c0:	4b64      	ldr	r3, [pc, #400]	; (3a54 <main+0x2a8>)
    38c2:	4798      	blx	r3
	configure_event_channel(&example_event);
	configure_event_user(&example_event);
	configure_event_interrupt(&example_event, &hook);
	
	//setup RTC
	configure_rtc_calendar();
    38c4:	4b64      	ldr	r3, [pc, #400]	; (3a58 <main+0x2ac>)
    38c6:	4798      	blx	r3
	configure_rtc_callbacks();
    38c8:	4b64      	ldr	r3, [pc, #400]	; (3a5c <main+0x2b0>)
    38ca:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    38cc:	4864      	ldr	r0, [pc, #400]	; (3a60 <main+0x2b4>)
    38ce:	4b65      	ldr	r3, [pc, #404]	; (3a64 <main+0x2b8>)
    38d0:	4798      	blx	r3

//!config temperature sensor
	configure_tsens();
    38d2:	4b65      	ldr	r3, [pc, #404]	; (3a68 <main+0x2bc>)
    38d4:	4798      	blx	r3
	
//! [configure_adc]
	configure_adc();
    38d6:	4b65      	ldr	r3, [pc, #404]	; (3a6c <main+0x2c0>)
    38d8:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    38da:	466b      	mov	r3, sp
    38dc:	705d      	strb	r5, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    38de:	709e      	strb	r6, [r3, #2]
	config->powersave    = false;
    38e0:	70dd      	strb	r5, [r3, #3]
	pin_config.mux_position = CAN_TX_MUX_SETTING;
    38e2:	2306      	movs	r3, #6
    38e4:	4699      	mov	r9, r3
    38e6:	466b      	mov	r3, sp
    38e8:	464a      	mov	r2, r9
    38ea:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(CAN_TX_PIN, &pin_config);
    38ec:	4669      	mov	r1, sp
    38ee:	2018      	movs	r0, #24
    38f0:	4b5f      	ldr	r3, [pc, #380]	; (3a70 <main+0x2c4>)
    38f2:	4698      	mov	r8, r3
    38f4:	4798      	blx	r3
	pin_config.mux_position = CAN_RX_MUX_SETTING;
    38f6:	466b      	mov	r3, sp
    38f8:	464a      	mov	r2, r9
    38fa:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(CAN_RX_PIN, &pin_config);
    38fc:	4669      	mov	r1, sp
    38fe:	2019      	movs	r0, #25
    3900:	47c0      	blx	r8
	config->clock_source = GCLK_GENERATOR_8;
    3902:	2308      	movs	r3, #8
    3904:	7023      	strb	r3, [r4, #0]
	config->run_in_standby = false;
    3906:	7065      	strb	r5, [r4, #1]
	config->watchdog_configuration = 0x00;
    3908:	70a5      	strb	r5, [r4, #2]
	config->transmit_pause = true;
    390a:	70e6      	strb	r6, [r4, #3]
	config->edge_filtering = true;
    390c:	7126      	strb	r6, [r4, #4]
	config->protocol_exception_handling = true;
    390e:	7166      	strb	r6, [r4, #5]
	config->automatic_retransmission = true;
    3910:	71a6      	strb	r6, [r4, #6]
	config->clock_stop_request = false;
    3912:	71e5      	strb	r5, [r4, #7]
	config->clock_stop_acknowledge = false;
    3914:	7225      	strb	r5, [r4, #8]
	config->timestamp_prescaler = 0;
    3916:	7265      	strb	r5, [r4, #9]
	config->timeout_period = 0xFFFF;
    3918:	3b09      	subs	r3, #9
    391a:	8163      	strh	r3, [r4, #10]
	config->timeout_mode = CAN_TIMEOUT_CONTINUES;
    391c:	7325      	strb	r5, [r4, #12]
	config->timeout_enable = false;
    391e:	7365      	strb	r5, [r4, #13]
	config->tdc_enable = false;
    3920:	73a5      	strb	r5, [r4, #14]
	config->delay_compensation_offset = 0;
    3922:	73e5      	strb	r5, [r4, #15]
	config->delay_compensation_filter_window_length = 0;
    3924:	7425      	strb	r5, [r4, #16]
	config->nonmatching_frames_action_standard = CAN_NONMATCHING_FRAMES_REJECT;
    3926:	7467      	strb	r7, [r4, #17]
	config->nonmatching_frames_action_extended = CAN_NONMATCHING_FRAMES_REJECT;
    3928:	74a7      	strb	r7, [r4, #18]
	config->remote_frames_standard_reject = true;
    392a:	74e6      	strb	r6, [r4, #19]
	config->remote_frames_extended_reject = true;
    392c:	7526      	strb	r6, [r4, #20]
	config->extended_id_mask = 0x1FFFFFFF;
    392e:	4b51      	ldr	r3, [pc, #324]	; (3a74 <main+0x2c8>)
    3930:	61a3      	str	r3, [r4, #24]
	config->rx_fifo_0_overwrite = true;
    3932:	7726      	strb	r6, [r4, #28]
	config->rx_fifo_0_watermark = 0;
    3934:	7765      	strb	r5, [r4, #29]
	config->rx_fifo_1_overwrite = true;
    3936:	77a6      	strb	r6, [r4, #30]
	config->rx_fifo_1_watermark = 0;
    3938:	77e5      	strb	r5, [r4, #31]
	config->tx_queue_mode = false;
    393a:	2320      	movs	r3, #32
    393c:	54e5      	strb	r5, [r4, r3]
	config->tx_event_fifo_watermark = 0;
    393e:	3301      	adds	r3, #1
    3940:	54e5      	strb	r5, [r4, r3]
	can_init(&can_instance, CAN_MODULE, &config_can);
    3942:	4d4d      	ldr	r5, [pc, #308]	; (3a78 <main+0x2cc>)
    3944:	0022      	movs	r2, r4
    3946:	494d      	ldr	r1, [pc, #308]	; (3a7c <main+0x2d0>)
    3948:	0028      	movs	r0, r5
    394a:	4b4d      	ldr	r3, [pc, #308]	; (3a80 <main+0x2d4>)
    394c:	4798      	blx	r3
	can_start(&can_instance);
    394e:	0028      	movs	r0, r5
    3950:	4b4c      	ldr	r3, [pc, #304]	; (3a84 <main+0x2d8>)
    3952:	4798      	blx	r3
    3954:	2280      	movs	r2, #128	; 0x80
    3956:	0212      	lsls	r2, r2, #8
    3958:	4b36      	ldr	r3, [pc, #216]	; (3a34 <main+0x288>)
    395a:	601a      	str	r2, [r3, #0]
	module_inst->hw->IE.reg |= source;
    395c:	682a      	ldr	r2, [r5, #0]
    395e:	6d51      	ldr	r1, [r2, #84]	; 0x54
    3960:	23c0      	movs	r3, #192	; 0xc0
    3962:	055b      	lsls	r3, r3, #21
    3964:	430b      	orrs	r3, r1
    3966:	6553      	str	r3, [r2, #84]	; 0x54
//! [display_user_menu]
	//display_menu();
//! [display_user_menu]


	configure_dac();
    3968:	4b47      	ldr	r3, [pc, #284]	; (3a88 <main+0x2dc>)
    396a:	4798      	blx	r3
	configure_dac_channel();
    396c:	4b47      	ldr	r3, [pc, #284]	; (3a8c <main+0x2e0>)
    396e:	4798      	blx	r3
	
	

while (events_is_busy(&example_event)) {
    3970:	4c47      	ldr	r4, [pc, #284]	; (3a90 <main+0x2e4>)
    3972:	a816      	add	r0, sp, #88	; 0x58
    3974:	47a0      	blx	r4
    3976:	2800      	cmp	r0, #0
    3978:	d1fb      	bne.n	3972 <main+0x1c6>
	sd_filter->S0.reg = CAN_STANDARD_MESSAGE_FILTER_ELEMENT_S0_SFID2_Msk |
    397a:	4b46      	ldr	r3, [pc, #280]	; (3a94 <main+0x2e8>)
    397c:	9301      	str	r3, [sp, #4]
	sd_filter.S0.bit.SFID2 = CAN_RX_STANDARD_FILTER_ID_0_BUFFER_INDEX;
    397e:	9b01      	ldr	r3, [sp, #4]
    3980:	0adb      	lsrs	r3, r3, #11
    3982:	02db      	lsls	r3, r3, #11
    3984:	2202      	movs	r2, #2
    3986:	4313      	orrs	r3, r2
    3988:	9301      	str	r3, [sp, #4]
	sd_filter.S0.bit.SFID1 = CAN_RX_STANDARD_FILTER_ID_0;
    398a:	9b01      	ldr	r3, [sp, #4]
    398c:	4a42      	ldr	r2, [pc, #264]	; (3a98 <main+0x2ec>)
    398e:	401a      	ands	r2, r3
    3990:	4b42      	ldr	r3, [pc, #264]	; (3a9c <main+0x2f0>)
    3992:	4313      	orrs	r3, r2
    3994:	9301      	str	r3, [sp, #4]
	sd_filter.S0.bit.SFEC =
    3996:	9a01      	ldr	r2, [sp, #4]
    3998:	23e0      	movs	r3, #224	; 0xe0
    399a:	059b      	lsls	r3, r3, #22
    399c:	4313      	orrs	r3, r2
    399e:	9301      	str	r3, [sp, #4]
	can_set_rx_standard_filter(&can_instance, &sd_filter,
    39a0:	4c35      	ldr	r4, [pc, #212]	; (3a78 <main+0x2cc>)
    39a2:	2200      	movs	r2, #0
    39a4:	a901      	add	r1, sp, #4
    39a6:	0020      	movs	r0, r4
    39a8:	4b3d      	ldr	r3, [pc, #244]	; (3aa0 <main+0x2f4>)
    39aa:	4798      	blx	r3
	module_inst->hw->IE.reg |= source;
    39ac:	6822      	ldr	r2, [r4, #0]
    39ae:	6d51      	ldr	r1, [r2, #84]	; 0x54
    39b0:	2380      	movs	r3, #128	; 0x80
    39b2:	031b      	lsls	r3, r3, #12
    39b4:	430b      	orrs	r3, r1
    39b6:	6553      	str	r3, [r2, #84]	; 0x54
	/* Wait for channel */
};

	can_set_standard_filter_0();
	
	battery_init();
    39b8:	4b3a      	ldr	r3, [pc, #232]	; (3aa4 <main+0x2f8>)
    39ba:	4798      	blx	r3
    39bc:	2280      	movs	r2, #128	; 0x80
    39be:	0392      	lsls	r2, r2, #14
    39c0:	2382      	movs	r3, #130	; 0x82
    39c2:	05db      	lsls	r3, r3, #23
    39c4:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(EXT1_PIN_6, 1);
	uint16_t i = 0x3ff;
	
//! [main_loop]
	while(1) {
		dac_chan_write(&dac_instance, DAC_CHANNEL_0, i/2);
    39c6:	4c38      	ldr	r4, [pc, #224]	; (3aa8 <main+0x2fc>)
    39c8:	4e38      	ldr	r6, [pc, #224]	; (3aac <main+0x300>)
		//if (++i == 0x3ff) {
			//i = 0;
		//}

		
		if (1==canMsgInFlag){
    39ca:	4d39      	ldr	r5, [pc, #228]	; (3ab0 <main+0x304>)
		dac_chan_write(&dac_instance, DAC_CHANNEL_0, i/2);
    39cc:	4a39      	ldr	r2, [pc, #228]	; (3ab4 <main+0x308>)
    39ce:	2100      	movs	r1, #0
    39d0:	0020      	movs	r0, r4
    39d2:	47b0      	blx	r6
		if (1==canMsgInFlag){
    39d4:	782b      	ldrb	r3, [r5, #0]
    39d6:	2b01      	cmp	r3, #1
    39d8:	d00a      	beq.n	39f0 <main+0x244>
			//printf("Command Received!\r\n");
			processCommandMsg();
		}
		if ((0 == system_busy_flag) && (1 == commandReady))
    39da:	4b37      	ldr	r3, [pc, #220]	; (3ab8 <main+0x30c>)
    39dc:	781b      	ldrb	r3, [r3, #0]
    39de:	2b00      	cmp	r3, #0
    39e0:	d1f4      	bne.n	39cc <main+0x220>
    39e2:	4b36      	ldr	r3, [pc, #216]	; (3abc <main+0x310>)
    39e4:	781b      	ldrb	r3, [r3, #0]
    39e6:	2b01      	cmp	r3, #1
    39e8:	d1f0      	bne.n	39cc <main+0x220>
		{
			execute_system_command();
    39ea:	4b35      	ldr	r3, [pc, #212]	; (3ac0 <main+0x314>)
    39ec:	4798      	blx	r3
    39ee:	e7ed      	b.n	39cc <main+0x220>
			processCommandMsg();
    39f0:	4b34      	ldr	r3, [pc, #208]	; (3ac4 <main+0x318>)
    39f2:	4798      	blx	r3
    39f4:	e7f1      	b.n	39da <main+0x22e>
    39f6:	46c0      	nop			; (mov r8, r8)
    39f8:	00002749 	.word	0x00002749
    39fc:	20000014 	.word	0x20000014
    3a00:	002a0003 	.word	0x002a0003
    3a04:	002b0003 	.word	0x002b0003
    3a08:	20000388 	.word	0x20000388
    3a0c:	200004a8 	.word	0x200004a8
    3a10:	00002abd 	.word	0x00002abd
    3a14:	200004a4 	.word	0x200004a4
    3a18:	00002a91 	.word	0x00002a91
    3a1c:	200004a0 	.word	0x200004a0
    3a20:	42001400 	.word	0x42001400
    3a24:	00001ac9 	.word	0x00001ac9
    3a28:	20000030 	.word	0x20000030
    3a2c:	00003fbd 	.word	0x00003fbd
    3a30:	00001a39 	.word	0x00001a39
    3a34:	e000e100 	.word	0xe000e100
    3a38:	00002ad5 	.word	0x00002ad5
    3a3c:	00000f55 	.word	0x00000f55
    3a40:	00000f69 	.word	0x00000f69
    3a44:	00001035 	.word	0x00001035
    3a48:	00002fc5 	.word	0x00002fc5
    3a4c:	00000e09 	.word	0x00000e09
    3a50:	00000e15 	.word	0x00000e15
    3a54:	00000e49 	.word	0x00000e49
    3a58:	0000356d 	.word	0x0000356d
    3a5c:	00003601 	.word	0x00003601
    3a60:	200004ac 	.word	0x200004ac
    3a64:	000008b1 	.word	0x000008b1
    3a68:	00003629 	.word	0x00003629
    3a6c:	00002afd 	.word	0x00002afd
    3a70:	00002719 	.word	0x00002719
    3a74:	1fffffff 	.word	0x1fffffff
    3a78:	20000384 	.word	0x20000384
    3a7c:	42001c00 	.word	0x42001c00
    3a80:	00001131 	.word	0x00001131
    3a84:	00001425 	.word	0x00001425
    3a88:	00002b89 	.word	0x00002b89
    3a8c:	00002bb5 	.word	0x00002bb5
    3a90:	0000101d 	.word	0x0000101d
    3a94:	880007ff 	.word	0x880007ff
    3a98:	f800ffff 	.word	0xf800ffff
    3a9c:	045a0000 	.word	0x045a0000
    3aa0:	0000143d 	.word	0x0000143d
    3aa4:	00003659 	.word	0x00003659
    3aa8:	200004fc 	.word	0x200004fc
    3aac:	00000889 	.word	0x00000889
    3ab0:	20000383 	.word	0x20000383
    3ab4:	000001ff 	.word	0x000001ff
    3ab8:	2000043c 	.word	0x2000043c
    3abc:	200003f4 	.word	0x200003f4
    3ac0:	00003089 	.word	0x00003089
    3ac4:	00003021 	.word	0x00003021

00003ac8 <__udivsi3>:
    3ac8:	2200      	movs	r2, #0
    3aca:	0843      	lsrs	r3, r0, #1
    3acc:	428b      	cmp	r3, r1
    3ace:	d374      	bcc.n	3bba <__udivsi3+0xf2>
    3ad0:	0903      	lsrs	r3, r0, #4
    3ad2:	428b      	cmp	r3, r1
    3ad4:	d35f      	bcc.n	3b96 <__udivsi3+0xce>
    3ad6:	0a03      	lsrs	r3, r0, #8
    3ad8:	428b      	cmp	r3, r1
    3ada:	d344      	bcc.n	3b66 <__udivsi3+0x9e>
    3adc:	0b03      	lsrs	r3, r0, #12
    3ade:	428b      	cmp	r3, r1
    3ae0:	d328      	bcc.n	3b34 <__udivsi3+0x6c>
    3ae2:	0c03      	lsrs	r3, r0, #16
    3ae4:	428b      	cmp	r3, r1
    3ae6:	d30d      	bcc.n	3b04 <__udivsi3+0x3c>
    3ae8:	22ff      	movs	r2, #255	; 0xff
    3aea:	0209      	lsls	r1, r1, #8
    3aec:	ba12      	rev	r2, r2
    3aee:	0c03      	lsrs	r3, r0, #16
    3af0:	428b      	cmp	r3, r1
    3af2:	d302      	bcc.n	3afa <__udivsi3+0x32>
    3af4:	1212      	asrs	r2, r2, #8
    3af6:	0209      	lsls	r1, r1, #8
    3af8:	d065      	beq.n	3bc6 <__udivsi3+0xfe>
    3afa:	0b03      	lsrs	r3, r0, #12
    3afc:	428b      	cmp	r3, r1
    3afe:	d319      	bcc.n	3b34 <__udivsi3+0x6c>
    3b00:	e000      	b.n	3b04 <__udivsi3+0x3c>
    3b02:	0a09      	lsrs	r1, r1, #8
    3b04:	0bc3      	lsrs	r3, r0, #15
    3b06:	428b      	cmp	r3, r1
    3b08:	d301      	bcc.n	3b0e <__udivsi3+0x46>
    3b0a:	03cb      	lsls	r3, r1, #15
    3b0c:	1ac0      	subs	r0, r0, r3
    3b0e:	4152      	adcs	r2, r2
    3b10:	0b83      	lsrs	r3, r0, #14
    3b12:	428b      	cmp	r3, r1
    3b14:	d301      	bcc.n	3b1a <__udivsi3+0x52>
    3b16:	038b      	lsls	r3, r1, #14
    3b18:	1ac0      	subs	r0, r0, r3
    3b1a:	4152      	adcs	r2, r2
    3b1c:	0b43      	lsrs	r3, r0, #13
    3b1e:	428b      	cmp	r3, r1
    3b20:	d301      	bcc.n	3b26 <__udivsi3+0x5e>
    3b22:	034b      	lsls	r3, r1, #13
    3b24:	1ac0      	subs	r0, r0, r3
    3b26:	4152      	adcs	r2, r2
    3b28:	0b03      	lsrs	r3, r0, #12
    3b2a:	428b      	cmp	r3, r1
    3b2c:	d301      	bcc.n	3b32 <__udivsi3+0x6a>
    3b2e:	030b      	lsls	r3, r1, #12
    3b30:	1ac0      	subs	r0, r0, r3
    3b32:	4152      	adcs	r2, r2
    3b34:	0ac3      	lsrs	r3, r0, #11
    3b36:	428b      	cmp	r3, r1
    3b38:	d301      	bcc.n	3b3e <__udivsi3+0x76>
    3b3a:	02cb      	lsls	r3, r1, #11
    3b3c:	1ac0      	subs	r0, r0, r3
    3b3e:	4152      	adcs	r2, r2
    3b40:	0a83      	lsrs	r3, r0, #10
    3b42:	428b      	cmp	r3, r1
    3b44:	d301      	bcc.n	3b4a <__udivsi3+0x82>
    3b46:	028b      	lsls	r3, r1, #10
    3b48:	1ac0      	subs	r0, r0, r3
    3b4a:	4152      	adcs	r2, r2
    3b4c:	0a43      	lsrs	r3, r0, #9
    3b4e:	428b      	cmp	r3, r1
    3b50:	d301      	bcc.n	3b56 <__udivsi3+0x8e>
    3b52:	024b      	lsls	r3, r1, #9
    3b54:	1ac0      	subs	r0, r0, r3
    3b56:	4152      	adcs	r2, r2
    3b58:	0a03      	lsrs	r3, r0, #8
    3b5a:	428b      	cmp	r3, r1
    3b5c:	d301      	bcc.n	3b62 <__udivsi3+0x9a>
    3b5e:	020b      	lsls	r3, r1, #8
    3b60:	1ac0      	subs	r0, r0, r3
    3b62:	4152      	adcs	r2, r2
    3b64:	d2cd      	bcs.n	3b02 <__udivsi3+0x3a>
    3b66:	09c3      	lsrs	r3, r0, #7
    3b68:	428b      	cmp	r3, r1
    3b6a:	d301      	bcc.n	3b70 <__udivsi3+0xa8>
    3b6c:	01cb      	lsls	r3, r1, #7
    3b6e:	1ac0      	subs	r0, r0, r3
    3b70:	4152      	adcs	r2, r2
    3b72:	0983      	lsrs	r3, r0, #6
    3b74:	428b      	cmp	r3, r1
    3b76:	d301      	bcc.n	3b7c <__udivsi3+0xb4>
    3b78:	018b      	lsls	r3, r1, #6
    3b7a:	1ac0      	subs	r0, r0, r3
    3b7c:	4152      	adcs	r2, r2
    3b7e:	0943      	lsrs	r3, r0, #5
    3b80:	428b      	cmp	r3, r1
    3b82:	d301      	bcc.n	3b88 <__udivsi3+0xc0>
    3b84:	014b      	lsls	r3, r1, #5
    3b86:	1ac0      	subs	r0, r0, r3
    3b88:	4152      	adcs	r2, r2
    3b8a:	0903      	lsrs	r3, r0, #4
    3b8c:	428b      	cmp	r3, r1
    3b8e:	d301      	bcc.n	3b94 <__udivsi3+0xcc>
    3b90:	010b      	lsls	r3, r1, #4
    3b92:	1ac0      	subs	r0, r0, r3
    3b94:	4152      	adcs	r2, r2
    3b96:	08c3      	lsrs	r3, r0, #3
    3b98:	428b      	cmp	r3, r1
    3b9a:	d301      	bcc.n	3ba0 <__udivsi3+0xd8>
    3b9c:	00cb      	lsls	r3, r1, #3
    3b9e:	1ac0      	subs	r0, r0, r3
    3ba0:	4152      	adcs	r2, r2
    3ba2:	0883      	lsrs	r3, r0, #2
    3ba4:	428b      	cmp	r3, r1
    3ba6:	d301      	bcc.n	3bac <__udivsi3+0xe4>
    3ba8:	008b      	lsls	r3, r1, #2
    3baa:	1ac0      	subs	r0, r0, r3
    3bac:	4152      	adcs	r2, r2
    3bae:	0843      	lsrs	r3, r0, #1
    3bb0:	428b      	cmp	r3, r1
    3bb2:	d301      	bcc.n	3bb8 <__udivsi3+0xf0>
    3bb4:	004b      	lsls	r3, r1, #1
    3bb6:	1ac0      	subs	r0, r0, r3
    3bb8:	4152      	adcs	r2, r2
    3bba:	1a41      	subs	r1, r0, r1
    3bbc:	d200      	bcs.n	3bc0 <__udivsi3+0xf8>
    3bbe:	4601      	mov	r1, r0
    3bc0:	4152      	adcs	r2, r2
    3bc2:	4610      	mov	r0, r2
    3bc4:	4770      	bx	lr
    3bc6:	e7ff      	b.n	3bc8 <__udivsi3+0x100>
    3bc8:	b501      	push	{r0, lr}
    3bca:	2000      	movs	r0, #0
    3bcc:	f000 f806 	bl	3bdc <__aeabi_idiv0>
    3bd0:	bd02      	pop	{r1, pc}
    3bd2:	46c0      	nop			; (mov r8, r8)

00003bd4 <__aeabi_uidivmod>:
    3bd4:	2900      	cmp	r1, #0
    3bd6:	d0f7      	beq.n	3bc8 <__udivsi3+0x100>
    3bd8:	e776      	b.n	3ac8 <__udivsi3>
    3bda:	4770      	bx	lr

00003bdc <__aeabi_idiv0>:
    3bdc:	4770      	bx	lr
    3bde:	46c0      	nop			; (mov r8, r8)

00003be0 <__aeabi_uldivmod>:
    3be0:	2b00      	cmp	r3, #0
    3be2:	d111      	bne.n	3c08 <__aeabi_uldivmod+0x28>
    3be4:	2a00      	cmp	r2, #0
    3be6:	d10f      	bne.n	3c08 <__aeabi_uldivmod+0x28>
    3be8:	2900      	cmp	r1, #0
    3bea:	d100      	bne.n	3bee <__aeabi_uldivmod+0xe>
    3bec:	2800      	cmp	r0, #0
    3bee:	d002      	beq.n	3bf6 <__aeabi_uldivmod+0x16>
    3bf0:	2100      	movs	r1, #0
    3bf2:	43c9      	mvns	r1, r1
    3bf4:	1c08      	adds	r0, r1, #0
    3bf6:	b407      	push	{r0, r1, r2}
    3bf8:	4802      	ldr	r0, [pc, #8]	; (3c04 <__aeabi_uldivmod+0x24>)
    3bfa:	a102      	add	r1, pc, #8	; (adr r1, 3c04 <__aeabi_uldivmod+0x24>)
    3bfc:	1840      	adds	r0, r0, r1
    3bfe:	9002      	str	r0, [sp, #8]
    3c00:	bd03      	pop	{r0, r1, pc}
    3c02:	46c0      	nop			; (mov r8, r8)
    3c04:	ffffffd9 	.word	0xffffffd9
    3c08:	b403      	push	{r0, r1}
    3c0a:	4668      	mov	r0, sp
    3c0c:	b501      	push	{r0, lr}
    3c0e:	9802      	ldr	r0, [sp, #8]
    3c10:	f000 f830 	bl	3c74 <__udivmoddi4>
    3c14:	9b01      	ldr	r3, [sp, #4]
    3c16:	469e      	mov	lr, r3
    3c18:	b002      	add	sp, #8
    3c1a:	bc0c      	pop	{r2, r3}
    3c1c:	4770      	bx	lr
    3c1e:	46c0      	nop			; (mov r8, r8)

00003c20 <__aeabi_lmul>:
    3c20:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c22:	46ce      	mov	lr, r9
    3c24:	4647      	mov	r7, r8
    3c26:	0415      	lsls	r5, r2, #16
    3c28:	0c2d      	lsrs	r5, r5, #16
    3c2a:	002e      	movs	r6, r5
    3c2c:	b580      	push	{r7, lr}
    3c2e:	0407      	lsls	r7, r0, #16
    3c30:	0c14      	lsrs	r4, r2, #16
    3c32:	0c3f      	lsrs	r7, r7, #16
    3c34:	4699      	mov	r9, r3
    3c36:	0c03      	lsrs	r3, r0, #16
    3c38:	437e      	muls	r6, r7
    3c3a:	435d      	muls	r5, r3
    3c3c:	4367      	muls	r7, r4
    3c3e:	4363      	muls	r3, r4
    3c40:	197f      	adds	r7, r7, r5
    3c42:	0c34      	lsrs	r4, r6, #16
    3c44:	19e4      	adds	r4, r4, r7
    3c46:	469c      	mov	ip, r3
    3c48:	42a5      	cmp	r5, r4
    3c4a:	d903      	bls.n	3c54 <__aeabi_lmul+0x34>
    3c4c:	2380      	movs	r3, #128	; 0x80
    3c4e:	025b      	lsls	r3, r3, #9
    3c50:	4698      	mov	r8, r3
    3c52:	44c4      	add	ip, r8
    3c54:	464b      	mov	r3, r9
    3c56:	4351      	muls	r1, r2
    3c58:	4343      	muls	r3, r0
    3c5a:	0436      	lsls	r6, r6, #16
    3c5c:	0c36      	lsrs	r6, r6, #16
    3c5e:	0c25      	lsrs	r5, r4, #16
    3c60:	0424      	lsls	r4, r4, #16
    3c62:	4465      	add	r5, ip
    3c64:	19a4      	adds	r4, r4, r6
    3c66:	1859      	adds	r1, r3, r1
    3c68:	1949      	adds	r1, r1, r5
    3c6a:	0020      	movs	r0, r4
    3c6c:	bc0c      	pop	{r2, r3}
    3c6e:	4690      	mov	r8, r2
    3c70:	4699      	mov	r9, r3
    3c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003c74 <__udivmoddi4>:
    3c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c76:	4657      	mov	r7, sl
    3c78:	464e      	mov	r6, r9
    3c7a:	4645      	mov	r5, r8
    3c7c:	46de      	mov	lr, fp
    3c7e:	b5e0      	push	{r5, r6, r7, lr}
    3c80:	0004      	movs	r4, r0
    3c82:	b083      	sub	sp, #12
    3c84:	000d      	movs	r5, r1
    3c86:	4692      	mov	sl, r2
    3c88:	4699      	mov	r9, r3
    3c8a:	428b      	cmp	r3, r1
    3c8c:	d82f      	bhi.n	3cee <__udivmoddi4+0x7a>
    3c8e:	d02c      	beq.n	3cea <__udivmoddi4+0x76>
    3c90:	4649      	mov	r1, r9
    3c92:	4650      	mov	r0, sl
    3c94:	f000 f8ae 	bl	3df4 <__clzdi2>
    3c98:	0029      	movs	r1, r5
    3c9a:	0006      	movs	r6, r0
    3c9c:	0020      	movs	r0, r4
    3c9e:	f000 f8a9 	bl	3df4 <__clzdi2>
    3ca2:	1a33      	subs	r3, r6, r0
    3ca4:	4698      	mov	r8, r3
    3ca6:	3b20      	subs	r3, #32
    3ca8:	469b      	mov	fp, r3
    3caa:	d500      	bpl.n	3cae <__udivmoddi4+0x3a>
    3cac:	e074      	b.n	3d98 <__udivmoddi4+0x124>
    3cae:	4653      	mov	r3, sl
    3cb0:	465a      	mov	r2, fp
    3cb2:	4093      	lsls	r3, r2
    3cb4:	001f      	movs	r7, r3
    3cb6:	4653      	mov	r3, sl
    3cb8:	4642      	mov	r2, r8
    3cba:	4093      	lsls	r3, r2
    3cbc:	001e      	movs	r6, r3
    3cbe:	42af      	cmp	r7, r5
    3cc0:	d829      	bhi.n	3d16 <__udivmoddi4+0xa2>
    3cc2:	d026      	beq.n	3d12 <__udivmoddi4+0x9e>
    3cc4:	465b      	mov	r3, fp
    3cc6:	1ba4      	subs	r4, r4, r6
    3cc8:	41bd      	sbcs	r5, r7
    3cca:	2b00      	cmp	r3, #0
    3ccc:	da00      	bge.n	3cd0 <__udivmoddi4+0x5c>
    3cce:	e079      	b.n	3dc4 <__udivmoddi4+0x150>
    3cd0:	2200      	movs	r2, #0
    3cd2:	2300      	movs	r3, #0
    3cd4:	9200      	str	r2, [sp, #0]
    3cd6:	9301      	str	r3, [sp, #4]
    3cd8:	2301      	movs	r3, #1
    3cda:	465a      	mov	r2, fp
    3cdc:	4093      	lsls	r3, r2
    3cde:	9301      	str	r3, [sp, #4]
    3ce0:	2301      	movs	r3, #1
    3ce2:	4642      	mov	r2, r8
    3ce4:	4093      	lsls	r3, r2
    3ce6:	9300      	str	r3, [sp, #0]
    3ce8:	e019      	b.n	3d1e <__udivmoddi4+0xaa>
    3cea:	4282      	cmp	r2, r0
    3cec:	d9d0      	bls.n	3c90 <__udivmoddi4+0x1c>
    3cee:	2200      	movs	r2, #0
    3cf0:	2300      	movs	r3, #0
    3cf2:	9200      	str	r2, [sp, #0]
    3cf4:	9301      	str	r3, [sp, #4]
    3cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3cf8:	2b00      	cmp	r3, #0
    3cfa:	d001      	beq.n	3d00 <__udivmoddi4+0x8c>
    3cfc:	601c      	str	r4, [r3, #0]
    3cfe:	605d      	str	r5, [r3, #4]
    3d00:	9800      	ldr	r0, [sp, #0]
    3d02:	9901      	ldr	r1, [sp, #4]
    3d04:	b003      	add	sp, #12
    3d06:	bc3c      	pop	{r2, r3, r4, r5}
    3d08:	4690      	mov	r8, r2
    3d0a:	4699      	mov	r9, r3
    3d0c:	46a2      	mov	sl, r4
    3d0e:	46ab      	mov	fp, r5
    3d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d12:	42a3      	cmp	r3, r4
    3d14:	d9d6      	bls.n	3cc4 <__udivmoddi4+0x50>
    3d16:	2200      	movs	r2, #0
    3d18:	2300      	movs	r3, #0
    3d1a:	9200      	str	r2, [sp, #0]
    3d1c:	9301      	str	r3, [sp, #4]
    3d1e:	4643      	mov	r3, r8
    3d20:	2b00      	cmp	r3, #0
    3d22:	d0e8      	beq.n	3cf6 <__udivmoddi4+0x82>
    3d24:	07fb      	lsls	r3, r7, #31
    3d26:	0872      	lsrs	r2, r6, #1
    3d28:	431a      	orrs	r2, r3
    3d2a:	4646      	mov	r6, r8
    3d2c:	087b      	lsrs	r3, r7, #1
    3d2e:	e00e      	b.n	3d4e <__udivmoddi4+0xda>
    3d30:	42ab      	cmp	r3, r5
    3d32:	d101      	bne.n	3d38 <__udivmoddi4+0xc4>
    3d34:	42a2      	cmp	r2, r4
    3d36:	d80c      	bhi.n	3d52 <__udivmoddi4+0xde>
    3d38:	1aa4      	subs	r4, r4, r2
    3d3a:	419d      	sbcs	r5, r3
    3d3c:	2001      	movs	r0, #1
    3d3e:	1924      	adds	r4, r4, r4
    3d40:	416d      	adcs	r5, r5
    3d42:	2100      	movs	r1, #0
    3d44:	3e01      	subs	r6, #1
    3d46:	1824      	adds	r4, r4, r0
    3d48:	414d      	adcs	r5, r1
    3d4a:	2e00      	cmp	r6, #0
    3d4c:	d006      	beq.n	3d5c <__udivmoddi4+0xe8>
    3d4e:	42ab      	cmp	r3, r5
    3d50:	d9ee      	bls.n	3d30 <__udivmoddi4+0xbc>
    3d52:	3e01      	subs	r6, #1
    3d54:	1924      	adds	r4, r4, r4
    3d56:	416d      	adcs	r5, r5
    3d58:	2e00      	cmp	r6, #0
    3d5a:	d1f8      	bne.n	3d4e <__udivmoddi4+0xda>
    3d5c:	465b      	mov	r3, fp
    3d5e:	9800      	ldr	r0, [sp, #0]
    3d60:	9901      	ldr	r1, [sp, #4]
    3d62:	1900      	adds	r0, r0, r4
    3d64:	4169      	adcs	r1, r5
    3d66:	2b00      	cmp	r3, #0
    3d68:	db22      	blt.n	3db0 <__udivmoddi4+0x13c>
    3d6a:	002b      	movs	r3, r5
    3d6c:	465a      	mov	r2, fp
    3d6e:	40d3      	lsrs	r3, r2
    3d70:	002a      	movs	r2, r5
    3d72:	4644      	mov	r4, r8
    3d74:	40e2      	lsrs	r2, r4
    3d76:	001c      	movs	r4, r3
    3d78:	465b      	mov	r3, fp
    3d7a:	0015      	movs	r5, r2
    3d7c:	2b00      	cmp	r3, #0
    3d7e:	db2c      	blt.n	3dda <__udivmoddi4+0x166>
    3d80:	0026      	movs	r6, r4
    3d82:	409e      	lsls	r6, r3
    3d84:	0033      	movs	r3, r6
    3d86:	0026      	movs	r6, r4
    3d88:	4647      	mov	r7, r8
    3d8a:	40be      	lsls	r6, r7
    3d8c:	0032      	movs	r2, r6
    3d8e:	1a80      	subs	r0, r0, r2
    3d90:	4199      	sbcs	r1, r3
    3d92:	9000      	str	r0, [sp, #0]
    3d94:	9101      	str	r1, [sp, #4]
    3d96:	e7ae      	b.n	3cf6 <__udivmoddi4+0x82>
    3d98:	4642      	mov	r2, r8
    3d9a:	2320      	movs	r3, #32
    3d9c:	1a9b      	subs	r3, r3, r2
    3d9e:	4652      	mov	r2, sl
    3da0:	40da      	lsrs	r2, r3
    3da2:	4641      	mov	r1, r8
    3da4:	0013      	movs	r3, r2
    3da6:	464a      	mov	r2, r9
    3da8:	408a      	lsls	r2, r1
    3daa:	0017      	movs	r7, r2
    3dac:	431f      	orrs	r7, r3
    3dae:	e782      	b.n	3cb6 <__udivmoddi4+0x42>
    3db0:	4642      	mov	r2, r8
    3db2:	2320      	movs	r3, #32
    3db4:	1a9b      	subs	r3, r3, r2
    3db6:	002a      	movs	r2, r5
    3db8:	4646      	mov	r6, r8
    3dba:	409a      	lsls	r2, r3
    3dbc:	0023      	movs	r3, r4
    3dbe:	40f3      	lsrs	r3, r6
    3dc0:	4313      	orrs	r3, r2
    3dc2:	e7d5      	b.n	3d70 <__udivmoddi4+0xfc>
    3dc4:	4642      	mov	r2, r8
    3dc6:	2320      	movs	r3, #32
    3dc8:	2100      	movs	r1, #0
    3dca:	1a9b      	subs	r3, r3, r2
    3dcc:	2200      	movs	r2, #0
    3dce:	9100      	str	r1, [sp, #0]
    3dd0:	9201      	str	r2, [sp, #4]
    3dd2:	2201      	movs	r2, #1
    3dd4:	40da      	lsrs	r2, r3
    3dd6:	9201      	str	r2, [sp, #4]
    3dd8:	e782      	b.n	3ce0 <__udivmoddi4+0x6c>
    3dda:	4642      	mov	r2, r8
    3ddc:	2320      	movs	r3, #32
    3dde:	0026      	movs	r6, r4
    3de0:	1a9b      	subs	r3, r3, r2
    3de2:	40de      	lsrs	r6, r3
    3de4:	002f      	movs	r7, r5
    3de6:	46b4      	mov	ip, r6
    3de8:	4097      	lsls	r7, r2
    3dea:	4666      	mov	r6, ip
    3dec:	003b      	movs	r3, r7
    3dee:	4333      	orrs	r3, r6
    3df0:	e7c9      	b.n	3d86 <__udivmoddi4+0x112>
    3df2:	46c0      	nop			; (mov r8, r8)

00003df4 <__clzdi2>:
    3df4:	b510      	push	{r4, lr}
    3df6:	2900      	cmp	r1, #0
    3df8:	d103      	bne.n	3e02 <__clzdi2+0xe>
    3dfa:	f000 f807 	bl	3e0c <__clzsi2>
    3dfe:	3020      	adds	r0, #32
    3e00:	e002      	b.n	3e08 <__clzdi2+0x14>
    3e02:	1c08      	adds	r0, r1, #0
    3e04:	f000 f802 	bl	3e0c <__clzsi2>
    3e08:	bd10      	pop	{r4, pc}
    3e0a:	46c0      	nop			; (mov r8, r8)

00003e0c <__clzsi2>:
    3e0c:	211c      	movs	r1, #28
    3e0e:	2301      	movs	r3, #1
    3e10:	041b      	lsls	r3, r3, #16
    3e12:	4298      	cmp	r0, r3
    3e14:	d301      	bcc.n	3e1a <__clzsi2+0xe>
    3e16:	0c00      	lsrs	r0, r0, #16
    3e18:	3910      	subs	r1, #16
    3e1a:	0a1b      	lsrs	r3, r3, #8
    3e1c:	4298      	cmp	r0, r3
    3e1e:	d301      	bcc.n	3e24 <__clzsi2+0x18>
    3e20:	0a00      	lsrs	r0, r0, #8
    3e22:	3908      	subs	r1, #8
    3e24:	091b      	lsrs	r3, r3, #4
    3e26:	4298      	cmp	r0, r3
    3e28:	d301      	bcc.n	3e2e <__clzsi2+0x22>
    3e2a:	0900      	lsrs	r0, r0, #4
    3e2c:	3904      	subs	r1, #4
    3e2e:	a202      	add	r2, pc, #8	; (adr r2, 3e38 <__clzsi2+0x2c>)
    3e30:	5c10      	ldrb	r0, [r2, r0]
    3e32:	1840      	adds	r0, r0, r1
    3e34:	4770      	bx	lr
    3e36:	46c0      	nop			; (mov r8, r8)
    3e38:	02020304 	.word	0x02020304
    3e3c:	01010101 	.word	0x01010101
	...

00003e48 <__libc_init_array>:
    3e48:	b570      	push	{r4, r5, r6, lr}
    3e4a:	2600      	movs	r6, #0
    3e4c:	4d0c      	ldr	r5, [pc, #48]	; (3e80 <__libc_init_array+0x38>)
    3e4e:	4c0d      	ldr	r4, [pc, #52]	; (3e84 <__libc_init_array+0x3c>)
    3e50:	1b64      	subs	r4, r4, r5
    3e52:	10a4      	asrs	r4, r4, #2
    3e54:	42a6      	cmp	r6, r4
    3e56:	d109      	bne.n	3e6c <__libc_init_array+0x24>
    3e58:	2600      	movs	r6, #0
    3e5a:	f001 fa3b 	bl	52d4 <_init>
    3e5e:	4d0a      	ldr	r5, [pc, #40]	; (3e88 <__libc_init_array+0x40>)
    3e60:	4c0a      	ldr	r4, [pc, #40]	; (3e8c <__libc_init_array+0x44>)
    3e62:	1b64      	subs	r4, r4, r5
    3e64:	10a4      	asrs	r4, r4, #2
    3e66:	42a6      	cmp	r6, r4
    3e68:	d105      	bne.n	3e76 <__libc_init_array+0x2e>
    3e6a:	bd70      	pop	{r4, r5, r6, pc}
    3e6c:	00b3      	lsls	r3, r6, #2
    3e6e:	58eb      	ldr	r3, [r5, r3]
    3e70:	4798      	blx	r3
    3e72:	3601      	adds	r6, #1
    3e74:	e7ee      	b.n	3e54 <__libc_init_array+0xc>
    3e76:	00b3      	lsls	r3, r6, #2
    3e78:	58eb      	ldr	r3, [r5, r3]
    3e7a:	4798      	blx	r3
    3e7c:	3601      	adds	r6, #1
    3e7e:	e7f2      	b.n	3e66 <__libc_init_array+0x1e>
    3e80:	000052e0 	.word	0x000052e0
    3e84:	000052e0 	.word	0x000052e0
    3e88:	000052e0 	.word	0x000052e0
    3e8c:	000052e4 	.word	0x000052e4

00003e90 <memcpy>:
    3e90:	2300      	movs	r3, #0
    3e92:	b510      	push	{r4, lr}
    3e94:	429a      	cmp	r2, r3
    3e96:	d100      	bne.n	3e9a <memcpy+0xa>
    3e98:	bd10      	pop	{r4, pc}
    3e9a:	5ccc      	ldrb	r4, [r1, r3]
    3e9c:	54c4      	strb	r4, [r0, r3]
    3e9e:	3301      	adds	r3, #1
    3ea0:	e7f8      	b.n	3e94 <memcpy+0x4>

00003ea2 <memset>:
    3ea2:	0003      	movs	r3, r0
    3ea4:	1882      	adds	r2, r0, r2
    3ea6:	4293      	cmp	r3, r2
    3ea8:	d100      	bne.n	3eac <memset+0xa>
    3eaa:	4770      	bx	lr
    3eac:	7019      	strb	r1, [r3, #0]
    3eae:	3301      	adds	r3, #1
    3eb0:	e7f9      	b.n	3ea6 <memset+0x4>
	...

00003eb4 <iprintf>:
    3eb4:	b40f      	push	{r0, r1, r2, r3}
    3eb6:	4b0b      	ldr	r3, [pc, #44]	; (3ee4 <iprintf+0x30>)
    3eb8:	b513      	push	{r0, r1, r4, lr}
    3eba:	681c      	ldr	r4, [r3, #0]
    3ebc:	2c00      	cmp	r4, #0
    3ebe:	d005      	beq.n	3ecc <iprintf+0x18>
    3ec0:	69a3      	ldr	r3, [r4, #24]
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d102      	bne.n	3ecc <iprintf+0x18>
    3ec6:	0020      	movs	r0, r4
    3ec8:	f000 faf2 	bl	44b0 <__sinit>
    3ecc:	ab05      	add	r3, sp, #20
    3ece:	9a04      	ldr	r2, [sp, #16]
    3ed0:	68a1      	ldr	r1, [r4, #8]
    3ed2:	0020      	movs	r0, r4
    3ed4:	9301      	str	r3, [sp, #4]
    3ed6:	f000 fcc7 	bl	4868 <_vfiprintf_r>
    3eda:	bc16      	pop	{r1, r2, r4}
    3edc:	bc08      	pop	{r3}
    3ede:	b004      	add	sp, #16
    3ee0:	4718      	bx	r3
    3ee2:	46c0      	nop			; (mov r8, r8)
    3ee4:	20000030 	.word	0x20000030

00003ee8 <_puts_r>:
    3ee8:	b570      	push	{r4, r5, r6, lr}
    3eea:	0005      	movs	r5, r0
    3eec:	000e      	movs	r6, r1
    3eee:	2800      	cmp	r0, #0
    3ef0:	d004      	beq.n	3efc <_puts_r+0x14>
    3ef2:	6983      	ldr	r3, [r0, #24]
    3ef4:	2b00      	cmp	r3, #0
    3ef6:	d101      	bne.n	3efc <_puts_r+0x14>
    3ef8:	f000 fada 	bl	44b0 <__sinit>
    3efc:	69ab      	ldr	r3, [r5, #24]
    3efe:	68ac      	ldr	r4, [r5, #8]
    3f00:	2b00      	cmp	r3, #0
    3f02:	d102      	bne.n	3f0a <_puts_r+0x22>
    3f04:	0028      	movs	r0, r5
    3f06:	f000 fad3 	bl	44b0 <__sinit>
    3f0a:	4b24      	ldr	r3, [pc, #144]	; (3f9c <_puts_r+0xb4>)
    3f0c:	429c      	cmp	r4, r3
    3f0e:	d10f      	bne.n	3f30 <_puts_r+0x48>
    3f10:	686c      	ldr	r4, [r5, #4]
    3f12:	89a3      	ldrh	r3, [r4, #12]
    3f14:	071b      	lsls	r3, r3, #28
    3f16:	d502      	bpl.n	3f1e <_puts_r+0x36>
    3f18:	6923      	ldr	r3, [r4, #16]
    3f1a:	2b00      	cmp	r3, #0
    3f1c:	d120      	bne.n	3f60 <_puts_r+0x78>
    3f1e:	0021      	movs	r1, r4
    3f20:	0028      	movs	r0, r5
    3f22:	f000 f957 	bl	41d4 <__swsetup_r>
    3f26:	2800      	cmp	r0, #0
    3f28:	d01a      	beq.n	3f60 <_puts_r+0x78>
    3f2a:	2001      	movs	r0, #1
    3f2c:	4240      	negs	r0, r0
    3f2e:	bd70      	pop	{r4, r5, r6, pc}
    3f30:	4b1b      	ldr	r3, [pc, #108]	; (3fa0 <_puts_r+0xb8>)
    3f32:	429c      	cmp	r4, r3
    3f34:	d101      	bne.n	3f3a <_puts_r+0x52>
    3f36:	68ac      	ldr	r4, [r5, #8]
    3f38:	e7eb      	b.n	3f12 <_puts_r+0x2a>
    3f3a:	4b1a      	ldr	r3, [pc, #104]	; (3fa4 <_puts_r+0xbc>)
    3f3c:	429c      	cmp	r4, r3
    3f3e:	d1e8      	bne.n	3f12 <_puts_r+0x2a>
    3f40:	68ec      	ldr	r4, [r5, #12]
    3f42:	e7e6      	b.n	3f12 <_puts_r+0x2a>
    3f44:	3b01      	subs	r3, #1
    3f46:	3601      	adds	r6, #1
    3f48:	60a3      	str	r3, [r4, #8]
    3f4a:	2b00      	cmp	r3, #0
    3f4c:	da04      	bge.n	3f58 <_puts_r+0x70>
    3f4e:	69a2      	ldr	r2, [r4, #24]
    3f50:	4293      	cmp	r3, r2
    3f52:	db16      	blt.n	3f82 <_puts_r+0x9a>
    3f54:	290a      	cmp	r1, #10
    3f56:	d014      	beq.n	3f82 <_puts_r+0x9a>
    3f58:	6823      	ldr	r3, [r4, #0]
    3f5a:	1c5a      	adds	r2, r3, #1
    3f5c:	6022      	str	r2, [r4, #0]
    3f5e:	7019      	strb	r1, [r3, #0]
    3f60:	7831      	ldrb	r1, [r6, #0]
    3f62:	68a3      	ldr	r3, [r4, #8]
    3f64:	2900      	cmp	r1, #0
    3f66:	d1ed      	bne.n	3f44 <_puts_r+0x5c>
    3f68:	3b01      	subs	r3, #1
    3f6a:	60a3      	str	r3, [r4, #8]
    3f6c:	2b00      	cmp	r3, #0
    3f6e:	da0f      	bge.n	3f90 <_puts_r+0xa8>
    3f70:	0022      	movs	r2, r4
    3f72:	310a      	adds	r1, #10
    3f74:	0028      	movs	r0, r5
    3f76:	f000 f8d7 	bl	4128 <__swbuf_r>
    3f7a:	1c43      	adds	r3, r0, #1
    3f7c:	d0d5      	beq.n	3f2a <_puts_r+0x42>
    3f7e:	200a      	movs	r0, #10
    3f80:	e7d5      	b.n	3f2e <_puts_r+0x46>
    3f82:	0022      	movs	r2, r4
    3f84:	0028      	movs	r0, r5
    3f86:	f000 f8cf 	bl	4128 <__swbuf_r>
    3f8a:	1c43      	adds	r3, r0, #1
    3f8c:	d1e8      	bne.n	3f60 <_puts_r+0x78>
    3f8e:	e7cc      	b.n	3f2a <_puts_r+0x42>
    3f90:	200a      	movs	r0, #10
    3f92:	6823      	ldr	r3, [r4, #0]
    3f94:	1c5a      	adds	r2, r3, #1
    3f96:	6022      	str	r2, [r4, #0]
    3f98:	7018      	strb	r0, [r3, #0]
    3f9a:	e7c8      	b.n	3f2e <_puts_r+0x46>
    3f9c:	00005260 	.word	0x00005260
    3fa0:	00005280 	.word	0x00005280
    3fa4:	00005240 	.word	0x00005240

00003fa8 <puts>:
    3fa8:	b510      	push	{r4, lr}
    3faa:	4b03      	ldr	r3, [pc, #12]	; (3fb8 <puts+0x10>)
    3fac:	0001      	movs	r1, r0
    3fae:	6818      	ldr	r0, [r3, #0]
    3fb0:	f7ff ff9a 	bl	3ee8 <_puts_r>
    3fb4:	bd10      	pop	{r4, pc}
    3fb6:	46c0      	nop			; (mov r8, r8)
    3fb8:	20000030 	.word	0x20000030

00003fbc <setbuf>:
    3fbc:	424a      	negs	r2, r1
    3fbe:	414a      	adcs	r2, r1
    3fc0:	2380      	movs	r3, #128	; 0x80
    3fc2:	b510      	push	{r4, lr}
    3fc4:	0052      	lsls	r2, r2, #1
    3fc6:	00db      	lsls	r3, r3, #3
    3fc8:	f000 f802 	bl	3fd0 <setvbuf>
    3fcc:	bd10      	pop	{r4, pc}
	...

00003fd0 <setvbuf>:
    3fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fd2:	001d      	movs	r5, r3
    3fd4:	4b4f      	ldr	r3, [pc, #316]	; (4114 <setvbuf+0x144>)
    3fd6:	b085      	sub	sp, #20
    3fd8:	681e      	ldr	r6, [r3, #0]
    3fda:	0004      	movs	r4, r0
    3fdc:	000f      	movs	r7, r1
    3fde:	9200      	str	r2, [sp, #0]
    3fe0:	2e00      	cmp	r6, #0
    3fe2:	d005      	beq.n	3ff0 <setvbuf+0x20>
    3fe4:	69b3      	ldr	r3, [r6, #24]
    3fe6:	2b00      	cmp	r3, #0
    3fe8:	d102      	bne.n	3ff0 <setvbuf+0x20>
    3fea:	0030      	movs	r0, r6
    3fec:	f000 fa60 	bl	44b0 <__sinit>
    3ff0:	4b49      	ldr	r3, [pc, #292]	; (4118 <setvbuf+0x148>)
    3ff2:	429c      	cmp	r4, r3
    3ff4:	d150      	bne.n	4098 <setvbuf+0xc8>
    3ff6:	6874      	ldr	r4, [r6, #4]
    3ff8:	9b00      	ldr	r3, [sp, #0]
    3ffa:	2b02      	cmp	r3, #2
    3ffc:	d005      	beq.n	400a <setvbuf+0x3a>
    3ffe:	2b01      	cmp	r3, #1
    4000:	d900      	bls.n	4004 <setvbuf+0x34>
    4002:	e084      	b.n	410e <setvbuf+0x13e>
    4004:	2d00      	cmp	r5, #0
    4006:	da00      	bge.n	400a <setvbuf+0x3a>
    4008:	e081      	b.n	410e <setvbuf+0x13e>
    400a:	0021      	movs	r1, r4
    400c:	0030      	movs	r0, r6
    400e:	f000 f9e1 	bl	43d4 <_fflush_r>
    4012:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4014:	2900      	cmp	r1, #0
    4016:	d008      	beq.n	402a <setvbuf+0x5a>
    4018:	0023      	movs	r3, r4
    401a:	3344      	adds	r3, #68	; 0x44
    401c:	4299      	cmp	r1, r3
    401e:	d002      	beq.n	4026 <setvbuf+0x56>
    4020:	0030      	movs	r0, r6
    4022:	f000 fb51 	bl	46c8 <_free_r>
    4026:	2300      	movs	r3, #0
    4028:	6363      	str	r3, [r4, #52]	; 0x34
    402a:	2300      	movs	r3, #0
    402c:	61a3      	str	r3, [r4, #24]
    402e:	6063      	str	r3, [r4, #4]
    4030:	89a3      	ldrh	r3, [r4, #12]
    4032:	061b      	lsls	r3, r3, #24
    4034:	d503      	bpl.n	403e <setvbuf+0x6e>
    4036:	6921      	ldr	r1, [r4, #16]
    4038:	0030      	movs	r0, r6
    403a:	f000 fb45 	bl	46c8 <_free_r>
    403e:	89a3      	ldrh	r3, [r4, #12]
    4040:	4a36      	ldr	r2, [pc, #216]	; (411c <setvbuf+0x14c>)
    4042:	4013      	ands	r3, r2
    4044:	81a3      	strh	r3, [r4, #12]
    4046:	9b00      	ldr	r3, [sp, #0]
    4048:	2b02      	cmp	r3, #2
    404a:	d05a      	beq.n	4102 <setvbuf+0x132>
    404c:	ab03      	add	r3, sp, #12
    404e:	aa02      	add	r2, sp, #8
    4050:	0021      	movs	r1, r4
    4052:	0030      	movs	r0, r6
    4054:	f000 fac2 	bl	45dc <__swhatbuf_r>
    4058:	89a3      	ldrh	r3, [r4, #12]
    405a:	4318      	orrs	r0, r3
    405c:	81a0      	strh	r0, [r4, #12]
    405e:	2d00      	cmp	r5, #0
    4060:	d124      	bne.n	40ac <setvbuf+0xdc>
    4062:	9d02      	ldr	r5, [sp, #8]
    4064:	0028      	movs	r0, r5
    4066:	f000 fb25 	bl	46b4 <malloc>
    406a:	9501      	str	r5, [sp, #4]
    406c:	1e07      	subs	r7, r0, #0
    406e:	d142      	bne.n	40f6 <setvbuf+0x126>
    4070:	9b02      	ldr	r3, [sp, #8]
    4072:	9301      	str	r3, [sp, #4]
    4074:	42ab      	cmp	r3, r5
    4076:	d139      	bne.n	40ec <setvbuf+0x11c>
    4078:	2001      	movs	r0, #1
    407a:	4240      	negs	r0, r0
    407c:	2302      	movs	r3, #2
    407e:	89a2      	ldrh	r2, [r4, #12]
    4080:	4313      	orrs	r3, r2
    4082:	81a3      	strh	r3, [r4, #12]
    4084:	2300      	movs	r3, #0
    4086:	60a3      	str	r3, [r4, #8]
    4088:	0023      	movs	r3, r4
    408a:	3347      	adds	r3, #71	; 0x47
    408c:	6023      	str	r3, [r4, #0]
    408e:	6123      	str	r3, [r4, #16]
    4090:	2301      	movs	r3, #1
    4092:	6163      	str	r3, [r4, #20]
    4094:	b005      	add	sp, #20
    4096:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4098:	4b21      	ldr	r3, [pc, #132]	; (4120 <setvbuf+0x150>)
    409a:	429c      	cmp	r4, r3
    409c:	d101      	bne.n	40a2 <setvbuf+0xd2>
    409e:	68b4      	ldr	r4, [r6, #8]
    40a0:	e7aa      	b.n	3ff8 <setvbuf+0x28>
    40a2:	4b20      	ldr	r3, [pc, #128]	; (4124 <setvbuf+0x154>)
    40a4:	429c      	cmp	r4, r3
    40a6:	d1a7      	bne.n	3ff8 <setvbuf+0x28>
    40a8:	68f4      	ldr	r4, [r6, #12]
    40aa:	e7a5      	b.n	3ff8 <setvbuf+0x28>
    40ac:	2f00      	cmp	r7, #0
    40ae:	d0d9      	beq.n	4064 <setvbuf+0x94>
    40b0:	69b3      	ldr	r3, [r6, #24]
    40b2:	2b00      	cmp	r3, #0
    40b4:	d102      	bne.n	40bc <setvbuf+0xec>
    40b6:	0030      	movs	r0, r6
    40b8:	f000 f9fa 	bl	44b0 <__sinit>
    40bc:	9b00      	ldr	r3, [sp, #0]
    40be:	2b01      	cmp	r3, #1
    40c0:	d103      	bne.n	40ca <setvbuf+0xfa>
    40c2:	89a3      	ldrh	r3, [r4, #12]
    40c4:	9a00      	ldr	r2, [sp, #0]
    40c6:	431a      	orrs	r2, r3
    40c8:	81a2      	strh	r2, [r4, #12]
    40ca:	2008      	movs	r0, #8
    40cc:	89a3      	ldrh	r3, [r4, #12]
    40ce:	6027      	str	r7, [r4, #0]
    40d0:	6127      	str	r7, [r4, #16]
    40d2:	6165      	str	r5, [r4, #20]
    40d4:	4018      	ands	r0, r3
    40d6:	d018      	beq.n	410a <setvbuf+0x13a>
    40d8:	2001      	movs	r0, #1
    40da:	4018      	ands	r0, r3
    40dc:	2300      	movs	r3, #0
    40de:	4298      	cmp	r0, r3
    40e0:	d011      	beq.n	4106 <setvbuf+0x136>
    40e2:	426d      	negs	r5, r5
    40e4:	60a3      	str	r3, [r4, #8]
    40e6:	61a5      	str	r5, [r4, #24]
    40e8:	0018      	movs	r0, r3
    40ea:	e7d3      	b.n	4094 <setvbuf+0xc4>
    40ec:	9801      	ldr	r0, [sp, #4]
    40ee:	f000 fae1 	bl	46b4 <malloc>
    40f2:	1e07      	subs	r7, r0, #0
    40f4:	d0c0      	beq.n	4078 <setvbuf+0xa8>
    40f6:	2380      	movs	r3, #128	; 0x80
    40f8:	89a2      	ldrh	r2, [r4, #12]
    40fa:	9d01      	ldr	r5, [sp, #4]
    40fc:	4313      	orrs	r3, r2
    40fe:	81a3      	strh	r3, [r4, #12]
    4100:	e7d6      	b.n	40b0 <setvbuf+0xe0>
    4102:	2000      	movs	r0, #0
    4104:	e7ba      	b.n	407c <setvbuf+0xac>
    4106:	60a5      	str	r5, [r4, #8]
    4108:	e7c4      	b.n	4094 <setvbuf+0xc4>
    410a:	60a0      	str	r0, [r4, #8]
    410c:	e7c2      	b.n	4094 <setvbuf+0xc4>
    410e:	2001      	movs	r0, #1
    4110:	4240      	negs	r0, r0
    4112:	e7bf      	b.n	4094 <setvbuf+0xc4>
    4114:	20000030 	.word	0x20000030
    4118:	00005260 	.word	0x00005260
    411c:	fffff35c 	.word	0xfffff35c
    4120:	00005280 	.word	0x00005280
    4124:	00005240 	.word	0x00005240

00004128 <__swbuf_r>:
    4128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    412a:	0005      	movs	r5, r0
    412c:	000e      	movs	r6, r1
    412e:	0014      	movs	r4, r2
    4130:	2800      	cmp	r0, #0
    4132:	d004      	beq.n	413e <__swbuf_r+0x16>
    4134:	6983      	ldr	r3, [r0, #24]
    4136:	2b00      	cmp	r3, #0
    4138:	d101      	bne.n	413e <__swbuf_r+0x16>
    413a:	f000 f9b9 	bl	44b0 <__sinit>
    413e:	4b22      	ldr	r3, [pc, #136]	; (41c8 <__swbuf_r+0xa0>)
    4140:	429c      	cmp	r4, r3
    4142:	d12d      	bne.n	41a0 <__swbuf_r+0x78>
    4144:	686c      	ldr	r4, [r5, #4]
    4146:	69a3      	ldr	r3, [r4, #24]
    4148:	60a3      	str	r3, [r4, #8]
    414a:	89a3      	ldrh	r3, [r4, #12]
    414c:	071b      	lsls	r3, r3, #28
    414e:	d531      	bpl.n	41b4 <__swbuf_r+0x8c>
    4150:	6923      	ldr	r3, [r4, #16]
    4152:	2b00      	cmp	r3, #0
    4154:	d02e      	beq.n	41b4 <__swbuf_r+0x8c>
    4156:	6823      	ldr	r3, [r4, #0]
    4158:	6922      	ldr	r2, [r4, #16]
    415a:	b2f7      	uxtb	r7, r6
    415c:	1a98      	subs	r0, r3, r2
    415e:	6963      	ldr	r3, [r4, #20]
    4160:	b2f6      	uxtb	r6, r6
    4162:	4298      	cmp	r0, r3
    4164:	db05      	blt.n	4172 <__swbuf_r+0x4a>
    4166:	0021      	movs	r1, r4
    4168:	0028      	movs	r0, r5
    416a:	f000 f933 	bl	43d4 <_fflush_r>
    416e:	2800      	cmp	r0, #0
    4170:	d126      	bne.n	41c0 <__swbuf_r+0x98>
    4172:	68a3      	ldr	r3, [r4, #8]
    4174:	3001      	adds	r0, #1
    4176:	3b01      	subs	r3, #1
    4178:	60a3      	str	r3, [r4, #8]
    417a:	6823      	ldr	r3, [r4, #0]
    417c:	1c5a      	adds	r2, r3, #1
    417e:	6022      	str	r2, [r4, #0]
    4180:	701f      	strb	r7, [r3, #0]
    4182:	6963      	ldr	r3, [r4, #20]
    4184:	4298      	cmp	r0, r3
    4186:	d004      	beq.n	4192 <__swbuf_r+0x6a>
    4188:	89a3      	ldrh	r3, [r4, #12]
    418a:	07db      	lsls	r3, r3, #31
    418c:	d51a      	bpl.n	41c4 <__swbuf_r+0x9c>
    418e:	2e0a      	cmp	r6, #10
    4190:	d118      	bne.n	41c4 <__swbuf_r+0x9c>
    4192:	0021      	movs	r1, r4
    4194:	0028      	movs	r0, r5
    4196:	f000 f91d 	bl	43d4 <_fflush_r>
    419a:	2800      	cmp	r0, #0
    419c:	d012      	beq.n	41c4 <__swbuf_r+0x9c>
    419e:	e00f      	b.n	41c0 <__swbuf_r+0x98>
    41a0:	4b0a      	ldr	r3, [pc, #40]	; (41cc <__swbuf_r+0xa4>)
    41a2:	429c      	cmp	r4, r3
    41a4:	d101      	bne.n	41aa <__swbuf_r+0x82>
    41a6:	68ac      	ldr	r4, [r5, #8]
    41a8:	e7cd      	b.n	4146 <__swbuf_r+0x1e>
    41aa:	4b09      	ldr	r3, [pc, #36]	; (41d0 <__swbuf_r+0xa8>)
    41ac:	429c      	cmp	r4, r3
    41ae:	d1ca      	bne.n	4146 <__swbuf_r+0x1e>
    41b0:	68ec      	ldr	r4, [r5, #12]
    41b2:	e7c8      	b.n	4146 <__swbuf_r+0x1e>
    41b4:	0021      	movs	r1, r4
    41b6:	0028      	movs	r0, r5
    41b8:	f000 f80c 	bl	41d4 <__swsetup_r>
    41bc:	2800      	cmp	r0, #0
    41be:	d0ca      	beq.n	4156 <__swbuf_r+0x2e>
    41c0:	2601      	movs	r6, #1
    41c2:	4276      	negs	r6, r6
    41c4:	0030      	movs	r0, r6
    41c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41c8:	00005260 	.word	0x00005260
    41cc:	00005280 	.word	0x00005280
    41d0:	00005240 	.word	0x00005240

000041d4 <__swsetup_r>:
    41d4:	4b36      	ldr	r3, [pc, #216]	; (42b0 <__swsetup_r+0xdc>)
    41d6:	b570      	push	{r4, r5, r6, lr}
    41d8:	681d      	ldr	r5, [r3, #0]
    41da:	0006      	movs	r6, r0
    41dc:	000c      	movs	r4, r1
    41de:	2d00      	cmp	r5, #0
    41e0:	d005      	beq.n	41ee <__swsetup_r+0x1a>
    41e2:	69ab      	ldr	r3, [r5, #24]
    41e4:	2b00      	cmp	r3, #0
    41e6:	d102      	bne.n	41ee <__swsetup_r+0x1a>
    41e8:	0028      	movs	r0, r5
    41ea:	f000 f961 	bl	44b0 <__sinit>
    41ee:	4b31      	ldr	r3, [pc, #196]	; (42b4 <__swsetup_r+0xe0>)
    41f0:	429c      	cmp	r4, r3
    41f2:	d10f      	bne.n	4214 <__swsetup_r+0x40>
    41f4:	686c      	ldr	r4, [r5, #4]
    41f6:	230c      	movs	r3, #12
    41f8:	5ee2      	ldrsh	r2, [r4, r3]
    41fa:	b293      	uxth	r3, r2
    41fc:	0719      	lsls	r1, r3, #28
    41fe:	d42d      	bmi.n	425c <__swsetup_r+0x88>
    4200:	06d9      	lsls	r1, r3, #27
    4202:	d411      	bmi.n	4228 <__swsetup_r+0x54>
    4204:	2309      	movs	r3, #9
    4206:	2001      	movs	r0, #1
    4208:	6033      	str	r3, [r6, #0]
    420a:	3337      	adds	r3, #55	; 0x37
    420c:	4313      	orrs	r3, r2
    420e:	81a3      	strh	r3, [r4, #12]
    4210:	4240      	negs	r0, r0
    4212:	bd70      	pop	{r4, r5, r6, pc}
    4214:	4b28      	ldr	r3, [pc, #160]	; (42b8 <__swsetup_r+0xe4>)
    4216:	429c      	cmp	r4, r3
    4218:	d101      	bne.n	421e <__swsetup_r+0x4a>
    421a:	68ac      	ldr	r4, [r5, #8]
    421c:	e7eb      	b.n	41f6 <__swsetup_r+0x22>
    421e:	4b27      	ldr	r3, [pc, #156]	; (42bc <__swsetup_r+0xe8>)
    4220:	429c      	cmp	r4, r3
    4222:	d1e8      	bne.n	41f6 <__swsetup_r+0x22>
    4224:	68ec      	ldr	r4, [r5, #12]
    4226:	e7e6      	b.n	41f6 <__swsetup_r+0x22>
    4228:	075b      	lsls	r3, r3, #29
    422a:	d513      	bpl.n	4254 <__swsetup_r+0x80>
    422c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    422e:	2900      	cmp	r1, #0
    4230:	d008      	beq.n	4244 <__swsetup_r+0x70>
    4232:	0023      	movs	r3, r4
    4234:	3344      	adds	r3, #68	; 0x44
    4236:	4299      	cmp	r1, r3
    4238:	d002      	beq.n	4240 <__swsetup_r+0x6c>
    423a:	0030      	movs	r0, r6
    423c:	f000 fa44 	bl	46c8 <_free_r>
    4240:	2300      	movs	r3, #0
    4242:	6363      	str	r3, [r4, #52]	; 0x34
    4244:	2224      	movs	r2, #36	; 0x24
    4246:	89a3      	ldrh	r3, [r4, #12]
    4248:	4393      	bics	r3, r2
    424a:	81a3      	strh	r3, [r4, #12]
    424c:	2300      	movs	r3, #0
    424e:	6063      	str	r3, [r4, #4]
    4250:	6923      	ldr	r3, [r4, #16]
    4252:	6023      	str	r3, [r4, #0]
    4254:	2308      	movs	r3, #8
    4256:	89a2      	ldrh	r2, [r4, #12]
    4258:	4313      	orrs	r3, r2
    425a:	81a3      	strh	r3, [r4, #12]
    425c:	6923      	ldr	r3, [r4, #16]
    425e:	2b00      	cmp	r3, #0
    4260:	d10b      	bne.n	427a <__swsetup_r+0xa6>
    4262:	21a0      	movs	r1, #160	; 0xa0
    4264:	2280      	movs	r2, #128	; 0x80
    4266:	89a3      	ldrh	r3, [r4, #12]
    4268:	0089      	lsls	r1, r1, #2
    426a:	0092      	lsls	r2, r2, #2
    426c:	400b      	ands	r3, r1
    426e:	4293      	cmp	r3, r2
    4270:	d003      	beq.n	427a <__swsetup_r+0xa6>
    4272:	0021      	movs	r1, r4
    4274:	0030      	movs	r0, r6
    4276:	f000 f9d9 	bl	462c <__smakebuf_r>
    427a:	2301      	movs	r3, #1
    427c:	89a2      	ldrh	r2, [r4, #12]
    427e:	4013      	ands	r3, r2
    4280:	d011      	beq.n	42a6 <__swsetup_r+0xd2>
    4282:	2300      	movs	r3, #0
    4284:	60a3      	str	r3, [r4, #8]
    4286:	6963      	ldr	r3, [r4, #20]
    4288:	425b      	negs	r3, r3
    428a:	61a3      	str	r3, [r4, #24]
    428c:	2000      	movs	r0, #0
    428e:	6923      	ldr	r3, [r4, #16]
    4290:	4283      	cmp	r3, r0
    4292:	d1be      	bne.n	4212 <__swsetup_r+0x3e>
    4294:	230c      	movs	r3, #12
    4296:	5ee2      	ldrsh	r2, [r4, r3]
    4298:	0613      	lsls	r3, r2, #24
    429a:	d5ba      	bpl.n	4212 <__swsetup_r+0x3e>
    429c:	2340      	movs	r3, #64	; 0x40
    429e:	4313      	orrs	r3, r2
    42a0:	81a3      	strh	r3, [r4, #12]
    42a2:	3801      	subs	r0, #1
    42a4:	e7b5      	b.n	4212 <__swsetup_r+0x3e>
    42a6:	0792      	lsls	r2, r2, #30
    42a8:	d400      	bmi.n	42ac <__swsetup_r+0xd8>
    42aa:	6963      	ldr	r3, [r4, #20]
    42ac:	60a3      	str	r3, [r4, #8]
    42ae:	e7ed      	b.n	428c <__swsetup_r+0xb8>
    42b0:	20000030 	.word	0x20000030
    42b4:	00005260 	.word	0x00005260
    42b8:	00005280 	.word	0x00005280
    42bc:	00005240 	.word	0x00005240

000042c0 <__sflush_r>:
    42c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    42c2:	898a      	ldrh	r2, [r1, #12]
    42c4:	0005      	movs	r5, r0
    42c6:	000c      	movs	r4, r1
    42c8:	0713      	lsls	r3, r2, #28
    42ca:	d460      	bmi.n	438e <__sflush_r+0xce>
    42cc:	684b      	ldr	r3, [r1, #4]
    42ce:	2b00      	cmp	r3, #0
    42d0:	dc04      	bgt.n	42dc <__sflush_r+0x1c>
    42d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    42d4:	2b00      	cmp	r3, #0
    42d6:	dc01      	bgt.n	42dc <__sflush_r+0x1c>
    42d8:	2000      	movs	r0, #0
    42da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    42dc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    42de:	2f00      	cmp	r7, #0
    42e0:	d0fa      	beq.n	42d8 <__sflush_r+0x18>
    42e2:	2300      	movs	r3, #0
    42e4:	682e      	ldr	r6, [r5, #0]
    42e6:	602b      	str	r3, [r5, #0]
    42e8:	2380      	movs	r3, #128	; 0x80
    42ea:	015b      	lsls	r3, r3, #5
    42ec:	401a      	ands	r2, r3
    42ee:	d034      	beq.n	435a <__sflush_r+0x9a>
    42f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
    42f2:	89a3      	ldrh	r3, [r4, #12]
    42f4:	075b      	lsls	r3, r3, #29
    42f6:	d506      	bpl.n	4306 <__sflush_r+0x46>
    42f8:	6863      	ldr	r3, [r4, #4]
    42fa:	1ac0      	subs	r0, r0, r3
    42fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    42fe:	2b00      	cmp	r3, #0
    4300:	d001      	beq.n	4306 <__sflush_r+0x46>
    4302:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4304:	1ac0      	subs	r0, r0, r3
    4306:	0002      	movs	r2, r0
    4308:	6a21      	ldr	r1, [r4, #32]
    430a:	2300      	movs	r3, #0
    430c:	0028      	movs	r0, r5
    430e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    4310:	47b8      	blx	r7
    4312:	89a1      	ldrh	r1, [r4, #12]
    4314:	1c43      	adds	r3, r0, #1
    4316:	d106      	bne.n	4326 <__sflush_r+0x66>
    4318:	682b      	ldr	r3, [r5, #0]
    431a:	2b1d      	cmp	r3, #29
    431c:	d831      	bhi.n	4382 <__sflush_r+0xc2>
    431e:	4a2c      	ldr	r2, [pc, #176]	; (43d0 <__sflush_r+0x110>)
    4320:	40da      	lsrs	r2, r3
    4322:	07d3      	lsls	r3, r2, #31
    4324:	d52d      	bpl.n	4382 <__sflush_r+0xc2>
    4326:	2300      	movs	r3, #0
    4328:	6063      	str	r3, [r4, #4]
    432a:	6923      	ldr	r3, [r4, #16]
    432c:	6023      	str	r3, [r4, #0]
    432e:	04cb      	lsls	r3, r1, #19
    4330:	d505      	bpl.n	433e <__sflush_r+0x7e>
    4332:	1c43      	adds	r3, r0, #1
    4334:	d102      	bne.n	433c <__sflush_r+0x7c>
    4336:	682b      	ldr	r3, [r5, #0]
    4338:	2b00      	cmp	r3, #0
    433a:	d100      	bne.n	433e <__sflush_r+0x7e>
    433c:	6560      	str	r0, [r4, #84]	; 0x54
    433e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    4340:	602e      	str	r6, [r5, #0]
    4342:	2900      	cmp	r1, #0
    4344:	d0c8      	beq.n	42d8 <__sflush_r+0x18>
    4346:	0023      	movs	r3, r4
    4348:	3344      	adds	r3, #68	; 0x44
    434a:	4299      	cmp	r1, r3
    434c:	d002      	beq.n	4354 <__sflush_r+0x94>
    434e:	0028      	movs	r0, r5
    4350:	f000 f9ba 	bl	46c8 <_free_r>
    4354:	2000      	movs	r0, #0
    4356:	6360      	str	r0, [r4, #52]	; 0x34
    4358:	e7bf      	b.n	42da <__sflush_r+0x1a>
    435a:	2301      	movs	r3, #1
    435c:	6a21      	ldr	r1, [r4, #32]
    435e:	0028      	movs	r0, r5
    4360:	47b8      	blx	r7
    4362:	1c43      	adds	r3, r0, #1
    4364:	d1c5      	bne.n	42f2 <__sflush_r+0x32>
    4366:	682b      	ldr	r3, [r5, #0]
    4368:	2b00      	cmp	r3, #0
    436a:	d0c2      	beq.n	42f2 <__sflush_r+0x32>
    436c:	2b1d      	cmp	r3, #29
    436e:	d001      	beq.n	4374 <__sflush_r+0xb4>
    4370:	2b16      	cmp	r3, #22
    4372:	d101      	bne.n	4378 <__sflush_r+0xb8>
    4374:	602e      	str	r6, [r5, #0]
    4376:	e7af      	b.n	42d8 <__sflush_r+0x18>
    4378:	2340      	movs	r3, #64	; 0x40
    437a:	89a2      	ldrh	r2, [r4, #12]
    437c:	4313      	orrs	r3, r2
    437e:	81a3      	strh	r3, [r4, #12]
    4380:	e7ab      	b.n	42da <__sflush_r+0x1a>
    4382:	2340      	movs	r3, #64	; 0x40
    4384:	430b      	orrs	r3, r1
    4386:	2001      	movs	r0, #1
    4388:	81a3      	strh	r3, [r4, #12]
    438a:	4240      	negs	r0, r0
    438c:	e7a5      	b.n	42da <__sflush_r+0x1a>
    438e:	690f      	ldr	r7, [r1, #16]
    4390:	2f00      	cmp	r7, #0
    4392:	d0a1      	beq.n	42d8 <__sflush_r+0x18>
    4394:	680b      	ldr	r3, [r1, #0]
    4396:	600f      	str	r7, [r1, #0]
    4398:	1bdb      	subs	r3, r3, r7
    439a:	9301      	str	r3, [sp, #4]
    439c:	2300      	movs	r3, #0
    439e:	0792      	lsls	r2, r2, #30
    43a0:	d100      	bne.n	43a4 <__sflush_r+0xe4>
    43a2:	694b      	ldr	r3, [r1, #20]
    43a4:	60a3      	str	r3, [r4, #8]
    43a6:	9b01      	ldr	r3, [sp, #4]
    43a8:	2b00      	cmp	r3, #0
    43aa:	dc00      	bgt.n	43ae <__sflush_r+0xee>
    43ac:	e794      	b.n	42d8 <__sflush_r+0x18>
    43ae:	9b01      	ldr	r3, [sp, #4]
    43b0:	003a      	movs	r2, r7
    43b2:	6a21      	ldr	r1, [r4, #32]
    43b4:	0028      	movs	r0, r5
    43b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    43b8:	47b0      	blx	r6
    43ba:	2800      	cmp	r0, #0
    43bc:	dc03      	bgt.n	43c6 <__sflush_r+0x106>
    43be:	2340      	movs	r3, #64	; 0x40
    43c0:	89a2      	ldrh	r2, [r4, #12]
    43c2:	4313      	orrs	r3, r2
    43c4:	e7df      	b.n	4386 <__sflush_r+0xc6>
    43c6:	9b01      	ldr	r3, [sp, #4]
    43c8:	183f      	adds	r7, r7, r0
    43ca:	1a1b      	subs	r3, r3, r0
    43cc:	9301      	str	r3, [sp, #4]
    43ce:	e7ea      	b.n	43a6 <__sflush_r+0xe6>
    43d0:	20400001 	.word	0x20400001

000043d4 <_fflush_r>:
    43d4:	690b      	ldr	r3, [r1, #16]
    43d6:	b570      	push	{r4, r5, r6, lr}
    43d8:	0005      	movs	r5, r0
    43da:	000c      	movs	r4, r1
    43dc:	2b00      	cmp	r3, #0
    43de:	d101      	bne.n	43e4 <_fflush_r+0x10>
    43e0:	2000      	movs	r0, #0
    43e2:	bd70      	pop	{r4, r5, r6, pc}
    43e4:	2800      	cmp	r0, #0
    43e6:	d004      	beq.n	43f2 <_fflush_r+0x1e>
    43e8:	6983      	ldr	r3, [r0, #24]
    43ea:	2b00      	cmp	r3, #0
    43ec:	d101      	bne.n	43f2 <_fflush_r+0x1e>
    43ee:	f000 f85f 	bl	44b0 <__sinit>
    43f2:	4b0b      	ldr	r3, [pc, #44]	; (4420 <_fflush_r+0x4c>)
    43f4:	429c      	cmp	r4, r3
    43f6:	d109      	bne.n	440c <_fflush_r+0x38>
    43f8:	686c      	ldr	r4, [r5, #4]
    43fa:	220c      	movs	r2, #12
    43fc:	5ea3      	ldrsh	r3, [r4, r2]
    43fe:	2b00      	cmp	r3, #0
    4400:	d0ee      	beq.n	43e0 <_fflush_r+0xc>
    4402:	0021      	movs	r1, r4
    4404:	0028      	movs	r0, r5
    4406:	f7ff ff5b 	bl	42c0 <__sflush_r>
    440a:	e7ea      	b.n	43e2 <_fflush_r+0xe>
    440c:	4b05      	ldr	r3, [pc, #20]	; (4424 <_fflush_r+0x50>)
    440e:	429c      	cmp	r4, r3
    4410:	d101      	bne.n	4416 <_fflush_r+0x42>
    4412:	68ac      	ldr	r4, [r5, #8]
    4414:	e7f1      	b.n	43fa <_fflush_r+0x26>
    4416:	4b04      	ldr	r3, [pc, #16]	; (4428 <_fflush_r+0x54>)
    4418:	429c      	cmp	r4, r3
    441a:	d1ee      	bne.n	43fa <_fflush_r+0x26>
    441c:	68ec      	ldr	r4, [r5, #12]
    441e:	e7ec      	b.n	43fa <_fflush_r+0x26>
    4420:	00005260 	.word	0x00005260
    4424:	00005280 	.word	0x00005280
    4428:	00005240 	.word	0x00005240

0000442c <_cleanup_r>:
    442c:	b510      	push	{r4, lr}
    442e:	4902      	ldr	r1, [pc, #8]	; (4438 <_cleanup_r+0xc>)
    4430:	f000 f8b2 	bl	4598 <_fwalk_reent>
    4434:	bd10      	pop	{r4, pc}
    4436:	46c0      	nop			; (mov r8, r8)
    4438:	000043d5 	.word	0x000043d5

0000443c <std.isra.0>:
    443c:	2300      	movs	r3, #0
    443e:	b510      	push	{r4, lr}
    4440:	0004      	movs	r4, r0
    4442:	6003      	str	r3, [r0, #0]
    4444:	6043      	str	r3, [r0, #4]
    4446:	6083      	str	r3, [r0, #8]
    4448:	8181      	strh	r1, [r0, #12]
    444a:	6643      	str	r3, [r0, #100]	; 0x64
    444c:	81c2      	strh	r2, [r0, #14]
    444e:	6103      	str	r3, [r0, #16]
    4450:	6143      	str	r3, [r0, #20]
    4452:	6183      	str	r3, [r0, #24]
    4454:	0019      	movs	r1, r3
    4456:	2208      	movs	r2, #8
    4458:	305c      	adds	r0, #92	; 0x5c
    445a:	f7ff fd22 	bl	3ea2 <memset>
    445e:	4b05      	ldr	r3, [pc, #20]	; (4474 <std.isra.0+0x38>)
    4460:	6224      	str	r4, [r4, #32]
    4462:	6263      	str	r3, [r4, #36]	; 0x24
    4464:	4b04      	ldr	r3, [pc, #16]	; (4478 <std.isra.0+0x3c>)
    4466:	62a3      	str	r3, [r4, #40]	; 0x28
    4468:	4b04      	ldr	r3, [pc, #16]	; (447c <std.isra.0+0x40>)
    446a:	62e3      	str	r3, [r4, #44]	; 0x2c
    446c:	4b04      	ldr	r3, [pc, #16]	; (4480 <std.isra.0+0x44>)
    446e:	6323      	str	r3, [r4, #48]	; 0x30
    4470:	bd10      	pop	{r4, pc}
    4472:	46c0      	nop			; (mov r8, r8)
    4474:	00004dd5 	.word	0x00004dd5
    4478:	00004dfd 	.word	0x00004dfd
    447c:	00004e35 	.word	0x00004e35
    4480:	00004e61 	.word	0x00004e61

00004484 <__sfmoreglue>:
    4484:	b570      	push	{r4, r5, r6, lr}
    4486:	2568      	movs	r5, #104	; 0x68
    4488:	1e4a      	subs	r2, r1, #1
    448a:	4355      	muls	r5, r2
    448c:	000e      	movs	r6, r1
    448e:	0029      	movs	r1, r5
    4490:	3174      	adds	r1, #116	; 0x74
    4492:	f000 f963 	bl	475c <_malloc_r>
    4496:	1e04      	subs	r4, r0, #0
    4498:	d008      	beq.n	44ac <__sfmoreglue+0x28>
    449a:	2100      	movs	r1, #0
    449c:	002a      	movs	r2, r5
    449e:	6001      	str	r1, [r0, #0]
    44a0:	6046      	str	r6, [r0, #4]
    44a2:	300c      	adds	r0, #12
    44a4:	60a0      	str	r0, [r4, #8]
    44a6:	3268      	adds	r2, #104	; 0x68
    44a8:	f7ff fcfb 	bl	3ea2 <memset>
    44ac:	0020      	movs	r0, r4
    44ae:	bd70      	pop	{r4, r5, r6, pc}

000044b0 <__sinit>:
    44b0:	6983      	ldr	r3, [r0, #24]
    44b2:	b513      	push	{r0, r1, r4, lr}
    44b4:	0004      	movs	r4, r0
    44b6:	2b00      	cmp	r3, #0
    44b8:	d128      	bne.n	450c <__sinit+0x5c>
    44ba:	6483      	str	r3, [r0, #72]	; 0x48
    44bc:	64c3      	str	r3, [r0, #76]	; 0x4c
    44be:	6503      	str	r3, [r0, #80]	; 0x50
    44c0:	4b13      	ldr	r3, [pc, #76]	; (4510 <__sinit+0x60>)
    44c2:	4a14      	ldr	r2, [pc, #80]	; (4514 <__sinit+0x64>)
    44c4:	681b      	ldr	r3, [r3, #0]
    44c6:	6282      	str	r2, [r0, #40]	; 0x28
    44c8:	9301      	str	r3, [sp, #4]
    44ca:	4298      	cmp	r0, r3
    44cc:	d101      	bne.n	44d2 <__sinit+0x22>
    44ce:	2301      	movs	r3, #1
    44d0:	6183      	str	r3, [r0, #24]
    44d2:	0020      	movs	r0, r4
    44d4:	f000 f820 	bl	4518 <__sfp>
    44d8:	6060      	str	r0, [r4, #4]
    44da:	0020      	movs	r0, r4
    44dc:	f000 f81c 	bl	4518 <__sfp>
    44e0:	60a0      	str	r0, [r4, #8]
    44e2:	0020      	movs	r0, r4
    44e4:	f000 f818 	bl	4518 <__sfp>
    44e8:	2200      	movs	r2, #0
    44ea:	60e0      	str	r0, [r4, #12]
    44ec:	2104      	movs	r1, #4
    44ee:	6860      	ldr	r0, [r4, #4]
    44f0:	f7ff ffa4 	bl	443c <std.isra.0>
    44f4:	2201      	movs	r2, #1
    44f6:	2109      	movs	r1, #9
    44f8:	68a0      	ldr	r0, [r4, #8]
    44fa:	f7ff ff9f 	bl	443c <std.isra.0>
    44fe:	2202      	movs	r2, #2
    4500:	2112      	movs	r1, #18
    4502:	68e0      	ldr	r0, [r4, #12]
    4504:	f7ff ff9a 	bl	443c <std.isra.0>
    4508:	2301      	movs	r3, #1
    450a:	61a3      	str	r3, [r4, #24]
    450c:	bd13      	pop	{r0, r1, r4, pc}
    450e:	46c0      	nop			; (mov r8, r8)
    4510:	0000523c 	.word	0x0000523c
    4514:	0000442d 	.word	0x0000442d

00004518 <__sfp>:
    4518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    451a:	4b1e      	ldr	r3, [pc, #120]	; (4594 <__sfp+0x7c>)
    451c:	0007      	movs	r7, r0
    451e:	681e      	ldr	r6, [r3, #0]
    4520:	69b3      	ldr	r3, [r6, #24]
    4522:	2b00      	cmp	r3, #0
    4524:	d102      	bne.n	452c <__sfp+0x14>
    4526:	0030      	movs	r0, r6
    4528:	f7ff ffc2 	bl	44b0 <__sinit>
    452c:	3648      	adds	r6, #72	; 0x48
    452e:	68b4      	ldr	r4, [r6, #8]
    4530:	6873      	ldr	r3, [r6, #4]
    4532:	3b01      	subs	r3, #1
    4534:	d504      	bpl.n	4540 <__sfp+0x28>
    4536:	6833      	ldr	r3, [r6, #0]
    4538:	2b00      	cmp	r3, #0
    453a:	d007      	beq.n	454c <__sfp+0x34>
    453c:	6836      	ldr	r6, [r6, #0]
    453e:	e7f6      	b.n	452e <__sfp+0x16>
    4540:	220c      	movs	r2, #12
    4542:	5ea5      	ldrsh	r5, [r4, r2]
    4544:	2d00      	cmp	r5, #0
    4546:	d00d      	beq.n	4564 <__sfp+0x4c>
    4548:	3468      	adds	r4, #104	; 0x68
    454a:	e7f2      	b.n	4532 <__sfp+0x1a>
    454c:	2104      	movs	r1, #4
    454e:	0038      	movs	r0, r7
    4550:	f7ff ff98 	bl	4484 <__sfmoreglue>
    4554:	6030      	str	r0, [r6, #0]
    4556:	2800      	cmp	r0, #0
    4558:	d1f0      	bne.n	453c <__sfp+0x24>
    455a:	230c      	movs	r3, #12
    455c:	0004      	movs	r4, r0
    455e:	603b      	str	r3, [r7, #0]
    4560:	0020      	movs	r0, r4
    4562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4564:	2301      	movs	r3, #1
    4566:	0020      	movs	r0, r4
    4568:	425b      	negs	r3, r3
    456a:	81e3      	strh	r3, [r4, #14]
    456c:	3302      	adds	r3, #2
    456e:	81a3      	strh	r3, [r4, #12]
    4570:	6665      	str	r5, [r4, #100]	; 0x64
    4572:	6025      	str	r5, [r4, #0]
    4574:	60a5      	str	r5, [r4, #8]
    4576:	6065      	str	r5, [r4, #4]
    4578:	6125      	str	r5, [r4, #16]
    457a:	6165      	str	r5, [r4, #20]
    457c:	61a5      	str	r5, [r4, #24]
    457e:	2208      	movs	r2, #8
    4580:	0029      	movs	r1, r5
    4582:	305c      	adds	r0, #92	; 0x5c
    4584:	f7ff fc8d 	bl	3ea2 <memset>
    4588:	6365      	str	r5, [r4, #52]	; 0x34
    458a:	63a5      	str	r5, [r4, #56]	; 0x38
    458c:	64a5      	str	r5, [r4, #72]	; 0x48
    458e:	64e5      	str	r5, [r4, #76]	; 0x4c
    4590:	e7e6      	b.n	4560 <__sfp+0x48>
    4592:	46c0      	nop			; (mov r8, r8)
    4594:	0000523c 	.word	0x0000523c

00004598 <_fwalk_reent>:
    4598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    459a:	0004      	movs	r4, r0
    459c:	0007      	movs	r7, r0
    459e:	2600      	movs	r6, #0
    45a0:	9101      	str	r1, [sp, #4]
    45a2:	3448      	adds	r4, #72	; 0x48
    45a4:	2c00      	cmp	r4, #0
    45a6:	d101      	bne.n	45ac <_fwalk_reent+0x14>
    45a8:	0030      	movs	r0, r6
    45aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    45ac:	6863      	ldr	r3, [r4, #4]
    45ae:	68a5      	ldr	r5, [r4, #8]
    45b0:	9300      	str	r3, [sp, #0]
    45b2:	9b00      	ldr	r3, [sp, #0]
    45b4:	3b01      	subs	r3, #1
    45b6:	9300      	str	r3, [sp, #0]
    45b8:	d501      	bpl.n	45be <_fwalk_reent+0x26>
    45ba:	6824      	ldr	r4, [r4, #0]
    45bc:	e7f2      	b.n	45a4 <_fwalk_reent+0xc>
    45be:	89ab      	ldrh	r3, [r5, #12]
    45c0:	2b01      	cmp	r3, #1
    45c2:	d908      	bls.n	45d6 <_fwalk_reent+0x3e>
    45c4:	220e      	movs	r2, #14
    45c6:	5eab      	ldrsh	r3, [r5, r2]
    45c8:	3301      	adds	r3, #1
    45ca:	d004      	beq.n	45d6 <_fwalk_reent+0x3e>
    45cc:	0029      	movs	r1, r5
    45ce:	0038      	movs	r0, r7
    45d0:	9b01      	ldr	r3, [sp, #4]
    45d2:	4798      	blx	r3
    45d4:	4306      	orrs	r6, r0
    45d6:	3568      	adds	r5, #104	; 0x68
    45d8:	e7eb      	b.n	45b2 <_fwalk_reent+0x1a>
	...

000045dc <__swhatbuf_r>:
    45dc:	b570      	push	{r4, r5, r6, lr}
    45de:	000e      	movs	r6, r1
    45e0:	001d      	movs	r5, r3
    45e2:	230e      	movs	r3, #14
    45e4:	5ec9      	ldrsh	r1, [r1, r3]
    45e6:	b090      	sub	sp, #64	; 0x40
    45e8:	0014      	movs	r4, r2
    45ea:	2900      	cmp	r1, #0
    45ec:	da07      	bge.n	45fe <__swhatbuf_r+0x22>
    45ee:	2300      	movs	r3, #0
    45f0:	602b      	str	r3, [r5, #0]
    45f2:	89b3      	ldrh	r3, [r6, #12]
    45f4:	061b      	lsls	r3, r3, #24
    45f6:	d411      	bmi.n	461c <__swhatbuf_r+0x40>
    45f8:	2380      	movs	r3, #128	; 0x80
    45fa:	00db      	lsls	r3, r3, #3
    45fc:	e00f      	b.n	461e <__swhatbuf_r+0x42>
    45fe:	aa01      	add	r2, sp, #4
    4600:	f000 fc5a 	bl	4eb8 <_fstat_r>
    4604:	2800      	cmp	r0, #0
    4606:	dbf2      	blt.n	45ee <__swhatbuf_r+0x12>
    4608:	22f0      	movs	r2, #240	; 0xf0
    460a:	9b02      	ldr	r3, [sp, #8]
    460c:	0212      	lsls	r2, r2, #8
    460e:	4013      	ands	r3, r2
    4610:	4a05      	ldr	r2, [pc, #20]	; (4628 <__swhatbuf_r+0x4c>)
    4612:	189b      	adds	r3, r3, r2
    4614:	425a      	negs	r2, r3
    4616:	4153      	adcs	r3, r2
    4618:	602b      	str	r3, [r5, #0]
    461a:	e7ed      	b.n	45f8 <__swhatbuf_r+0x1c>
    461c:	2340      	movs	r3, #64	; 0x40
    461e:	2000      	movs	r0, #0
    4620:	6023      	str	r3, [r4, #0]
    4622:	b010      	add	sp, #64	; 0x40
    4624:	bd70      	pop	{r4, r5, r6, pc}
    4626:	46c0      	nop			; (mov r8, r8)
    4628:	ffffe000 	.word	0xffffe000

0000462c <__smakebuf_r>:
    462c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    462e:	2602      	movs	r6, #2
    4630:	898b      	ldrh	r3, [r1, #12]
    4632:	0005      	movs	r5, r0
    4634:	000c      	movs	r4, r1
    4636:	4233      	tst	r3, r6
    4638:	d006      	beq.n	4648 <__smakebuf_r+0x1c>
    463a:	0023      	movs	r3, r4
    463c:	3347      	adds	r3, #71	; 0x47
    463e:	6023      	str	r3, [r4, #0]
    4640:	6123      	str	r3, [r4, #16]
    4642:	2301      	movs	r3, #1
    4644:	6163      	str	r3, [r4, #20]
    4646:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4648:	ab01      	add	r3, sp, #4
    464a:	466a      	mov	r2, sp
    464c:	f7ff ffc6 	bl	45dc <__swhatbuf_r>
    4650:	9900      	ldr	r1, [sp, #0]
    4652:	0007      	movs	r7, r0
    4654:	0028      	movs	r0, r5
    4656:	f000 f881 	bl	475c <_malloc_r>
    465a:	2800      	cmp	r0, #0
    465c:	d108      	bne.n	4670 <__smakebuf_r+0x44>
    465e:	220c      	movs	r2, #12
    4660:	5ea3      	ldrsh	r3, [r4, r2]
    4662:	059a      	lsls	r2, r3, #22
    4664:	d4ef      	bmi.n	4646 <__smakebuf_r+0x1a>
    4666:	2203      	movs	r2, #3
    4668:	4393      	bics	r3, r2
    466a:	431e      	orrs	r6, r3
    466c:	81a6      	strh	r6, [r4, #12]
    466e:	e7e4      	b.n	463a <__smakebuf_r+0xe>
    4670:	4b0f      	ldr	r3, [pc, #60]	; (46b0 <__smakebuf_r+0x84>)
    4672:	62ab      	str	r3, [r5, #40]	; 0x28
    4674:	2380      	movs	r3, #128	; 0x80
    4676:	89a2      	ldrh	r2, [r4, #12]
    4678:	6020      	str	r0, [r4, #0]
    467a:	4313      	orrs	r3, r2
    467c:	81a3      	strh	r3, [r4, #12]
    467e:	9b00      	ldr	r3, [sp, #0]
    4680:	6120      	str	r0, [r4, #16]
    4682:	6163      	str	r3, [r4, #20]
    4684:	9b01      	ldr	r3, [sp, #4]
    4686:	2b00      	cmp	r3, #0
    4688:	d00d      	beq.n	46a6 <__smakebuf_r+0x7a>
    468a:	230e      	movs	r3, #14
    468c:	5ee1      	ldrsh	r1, [r4, r3]
    468e:	0028      	movs	r0, r5
    4690:	f000 fc24 	bl	4edc <_isatty_r>
    4694:	2800      	cmp	r0, #0
    4696:	d006      	beq.n	46a6 <__smakebuf_r+0x7a>
    4698:	2203      	movs	r2, #3
    469a:	89a3      	ldrh	r3, [r4, #12]
    469c:	4393      	bics	r3, r2
    469e:	001a      	movs	r2, r3
    46a0:	2301      	movs	r3, #1
    46a2:	4313      	orrs	r3, r2
    46a4:	81a3      	strh	r3, [r4, #12]
    46a6:	89a0      	ldrh	r0, [r4, #12]
    46a8:	4338      	orrs	r0, r7
    46aa:	81a0      	strh	r0, [r4, #12]
    46ac:	e7cb      	b.n	4646 <__smakebuf_r+0x1a>
    46ae:	46c0      	nop			; (mov r8, r8)
    46b0:	0000442d 	.word	0x0000442d

000046b4 <malloc>:
    46b4:	b510      	push	{r4, lr}
    46b6:	4b03      	ldr	r3, [pc, #12]	; (46c4 <malloc+0x10>)
    46b8:	0001      	movs	r1, r0
    46ba:	6818      	ldr	r0, [r3, #0]
    46bc:	f000 f84e 	bl	475c <_malloc_r>
    46c0:	bd10      	pop	{r4, pc}
    46c2:	46c0      	nop			; (mov r8, r8)
    46c4:	20000030 	.word	0x20000030

000046c8 <_free_r>:
    46c8:	b570      	push	{r4, r5, r6, lr}
    46ca:	0005      	movs	r5, r0
    46cc:	2900      	cmp	r1, #0
    46ce:	d010      	beq.n	46f2 <_free_r+0x2a>
    46d0:	1f0c      	subs	r4, r1, #4
    46d2:	6823      	ldr	r3, [r4, #0]
    46d4:	2b00      	cmp	r3, #0
    46d6:	da00      	bge.n	46da <_free_r+0x12>
    46d8:	18e4      	adds	r4, r4, r3
    46da:	0028      	movs	r0, r5
    46dc:	f000 fc2f 	bl	4f3e <__malloc_lock>
    46e0:	4a1d      	ldr	r2, [pc, #116]	; (4758 <_free_r+0x90>)
    46e2:	6813      	ldr	r3, [r2, #0]
    46e4:	2b00      	cmp	r3, #0
    46e6:	d105      	bne.n	46f4 <_free_r+0x2c>
    46e8:	6063      	str	r3, [r4, #4]
    46ea:	6014      	str	r4, [r2, #0]
    46ec:	0028      	movs	r0, r5
    46ee:	f000 fc27 	bl	4f40 <__malloc_unlock>
    46f2:	bd70      	pop	{r4, r5, r6, pc}
    46f4:	42a3      	cmp	r3, r4
    46f6:	d909      	bls.n	470c <_free_r+0x44>
    46f8:	6821      	ldr	r1, [r4, #0]
    46fa:	1860      	adds	r0, r4, r1
    46fc:	4283      	cmp	r3, r0
    46fe:	d1f3      	bne.n	46e8 <_free_r+0x20>
    4700:	6818      	ldr	r0, [r3, #0]
    4702:	685b      	ldr	r3, [r3, #4]
    4704:	1841      	adds	r1, r0, r1
    4706:	6021      	str	r1, [r4, #0]
    4708:	e7ee      	b.n	46e8 <_free_r+0x20>
    470a:	0013      	movs	r3, r2
    470c:	685a      	ldr	r2, [r3, #4]
    470e:	2a00      	cmp	r2, #0
    4710:	d001      	beq.n	4716 <_free_r+0x4e>
    4712:	42a2      	cmp	r2, r4
    4714:	d9f9      	bls.n	470a <_free_r+0x42>
    4716:	6819      	ldr	r1, [r3, #0]
    4718:	1858      	adds	r0, r3, r1
    471a:	42a0      	cmp	r0, r4
    471c:	d10b      	bne.n	4736 <_free_r+0x6e>
    471e:	6820      	ldr	r0, [r4, #0]
    4720:	1809      	adds	r1, r1, r0
    4722:	1858      	adds	r0, r3, r1
    4724:	6019      	str	r1, [r3, #0]
    4726:	4282      	cmp	r2, r0
    4728:	d1e0      	bne.n	46ec <_free_r+0x24>
    472a:	6810      	ldr	r0, [r2, #0]
    472c:	6852      	ldr	r2, [r2, #4]
    472e:	1841      	adds	r1, r0, r1
    4730:	6019      	str	r1, [r3, #0]
    4732:	605a      	str	r2, [r3, #4]
    4734:	e7da      	b.n	46ec <_free_r+0x24>
    4736:	42a0      	cmp	r0, r4
    4738:	d902      	bls.n	4740 <_free_r+0x78>
    473a:	230c      	movs	r3, #12
    473c:	602b      	str	r3, [r5, #0]
    473e:	e7d5      	b.n	46ec <_free_r+0x24>
    4740:	6821      	ldr	r1, [r4, #0]
    4742:	1860      	adds	r0, r4, r1
    4744:	4282      	cmp	r2, r0
    4746:	d103      	bne.n	4750 <_free_r+0x88>
    4748:	6810      	ldr	r0, [r2, #0]
    474a:	6852      	ldr	r2, [r2, #4]
    474c:	1841      	adds	r1, r0, r1
    474e:	6021      	str	r1, [r4, #0]
    4750:	6062      	str	r2, [r4, #4]
    4752:	605c      	str	r4, [r3, #4]
    4754:	e7ca      	b.n	46ec <_free_r+0x24>
    4756:	46c0      	nop			; (mov r8, r8)
    4758:	20000460 	.word	0x20000460

0000475c <_malloc_r>:
    475c:	2303      	movs	r3, #3
    475e:	b570      	push	{r4, r5, r6, lr}
    4760:	1ccd      	adds	r5, r1, #3
    4762:	439d      	bics	r5, r3
    4764:	3508      	adds	r5, #8
    4766:	0006      	movs	r6, r0
    4768:	2d0c      	cmp	r5, #12
    476a:	d21e      	bcs.n	47aa <_malloc_r+0x4e>
    476c:	250c      	movs	r5, #12
    476e:	42a9      	cmp	r1, r5
    4770:	d81d      	bhi.n	47ae <_malloc_r+0x52>
    4772:	0030      	movs	r0, r6
    4774:	f000 fbe3 	bl	4f3e <__malloc_lock>
    4778:	4a25      	ldr	r2, [pc, #148]	; (4810 <_malloc_r+0xb4>)
    477a:	6814      	ldr	r4, [r2, #0]
    477c:	0021      	movs	r1, r4
    477e:	2900      	cmp	r1, #0
    4780:	d119      	bne.n	47b6 <_malloc_r+0x5a>
    4782:	4c24      	ldr	r4, [pc, #144]	; (4814 <_malloc_r+0xb8>)
    4784:	6823      	ldr	r3, [r4, #0]
    4786:	2b00      	cmp	r3, #0
    4788:	d103      	bne.n	4792 <_malloc_r+0x36>
    478a:	0030      	movs	r0, r6
    478c:	f000 fb10 	bl	4db0 <_sbrk_r>
    4790:	6020      	str	r0, [r4, #0]
    4792:	0029      	movs	r1, r5
    4794:	0030      	movs	r0, r6
    4796:	f000 fb0b 	bl	4db0 <_sbrk_r>
    479a:	1c43      	adds	r3, r0, #1
    479c:	d12c      	bne.n	47f8 <_malloc_r+0x9c>
    479e:	230c      	movs	r3, #12
    47a0:	0030      	movs	r0, r6
    47a2:	6033      	str	r3, [r6, #0]
    47a4:	f000 fbcc 	bl	4f40 <__malloc_unlock>
    47a8:	e003      	b.n	47b2 <_malloc_r+0x56>
    47aa:	2d00      	cmp	r5, #0
    47ac:	dadf      	bge.n	476e <_malloc_r+0x12>
    47ae:	230c      	movs	r3, #12
    47b0:	6033      	str	r3, [r6, #0]
    47b2:	2000      	movs	r0, #0
    47b4:	bd70      	pop	{r4, r5, r6, pc}
    47b6:	680b      	ldr	r3, [r1, #0]
    47b8:	1b5b      	subs	r3, r3, r5
    47ba:	d41a      	bmi.n	47f2 <_malloc_r+0x96>
    47bc:	2b0b      	cmp	r3, #11
    47be:	d903      	bls.n	47c8 <_malloc_r+0x6c>
    47c0:	600b      	str	r3, [r1, #0]
    47c2:	18cc      	adds	r4, r1, r3
    47c4:	6025      	str	r5, [r4, #0]
    47c6:	e003      	b.n	47d0 <_malloc_r+0x74>
    47c8:	428c      	cmp	r4, r1
    47ca:	d10e      	bne.n	47ea <_malloc_r+0x8e>
    47cc:	6863      	ldr	r3, [r4, #4]
    47ce:	6013      	str	r3, [r2, #0]
    47d0:	0030      	movs	r0, r6
    47d2:	f000 fbb5 	bl	4f40 <__malloc_unlock>
    47d6:	0020      	movs	r0, r4
    47d8:	2207      	movs	r2, #7
    47da:	300b      	adds	r0, #11
    47dc:	1d23      	adds	r3, r4, #4
    47de:	4390      	bics	r0, r2
    47e0:	1ac3      	subs	r3, r0, r3
    47e2:	d0e7      	beq.n	47b4 <_malloc_r+0x58>
    47e4:	425a      	negs	r2, r3
    47e6:	50e2      	str	r2, [r4, r3]
    47e8:	e7e4      	b.n	47b4 <_malloc_r+0x58>
    47ea:	684b      	ldr	r3, [r1, #4]
    47ec:	6063      	str	r3, [r4, #4]
    47ee:	000c      	movs	r4, r1
    47f0:	e7ee      	b.n	47d0 <_malloc_r+0x74>
    47f2:	000c      	movs	r4, r1
    47f4:	6849      	ldr	r1, [r1, #4]
    47f6:	e7c2      	b.n	477e <_malloc_r+0x22>
    47f8:	2303      	movs	r3, #3
    47fa:	1cc4      	adds	r4, r0, #3
    47fc:	439c      	bics	r4, r3
    47fe:	42a0      	cmp	r0, r4
    4800:	d0e0      	beq.n	47c4 <_malloc_r+0x68>
    4802:	1a21      	subs	r1, r4, r0
    4804:	0030      	movs	r0, r6
    4806:	f000 fad3 	bl	4db0 <_sbrk_r>
    480a:	1c43      	adds	r3, r0, #1
    480c:	d1da      	bne.n	47c4 <_malloc_r+0x68>
    480e:	e7c6      	b.n	479e <_malloc_r+0x42>
    4810:	20000460 	.word	0x20000460
    4814:	20000464 	.word	0x20000464

00004818 <__sfputc_r>:
    4818:	6893      	ldr	r3, [r2, #8]
    481a:	b510      	push	{r4, lr}
    481c:	3b01      	subs	r3, #1
    481e:	6093      	str	r3, [r2, #8]
    4820:	2b00      	cmp	r3, #0
    4822:	da05      	bge.n	4830 <__sfputc_r+0x18>
    4824:	6994      	ldr	r4, [r2, #24]
    4826:	42a3      	cmp	r3, r4
    4828:	db08      	blt.n	483c <__sfputc_r+0x24>
    482a:	b2cb      	uxtb	r3, r1
    482c:	2b0a      	cmp	r3, #10
    482e:	d005      	beq.n	483c <__sfputc_r+0x24>
    4830:	6813      	ldr	r3, [r2, #0]
    4832:	1c58      	adds	r0, r3, #1
    4834:	6010      	str	r0, [r2, #0]
    4836:	7019      	strb	r1, [r3, #0]
    4838:	b2c8      	uxtb	r0, r1
    483a:	bd10      	pop	{r4, pc}
    483c:	f7ff fc74 	bl	4128 <__swbuf_r>
    4840:	e7fb      	b.n	483a <__sfputc_r+0x22>

00004842 <__sfputs_r>:
    4842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4844:	0006      	movs	r6, r0
    4846:	000f      	movs	r7, r1
    4848:	0014      	movs	r4, r2
    484a:	18d5      	adds	r5, r2, r3
    484c:	42ac      	cmp	r4, r5
    484e:	d101      	bne.n	4854 <__sfputs_r+0x12>
    4850:	2000      	movs	r0, #0
    4852:	e007      	b.n	4864 <__sfputs_r+0x22>
    4854:	7821      	ldrb	r1, [r4, #0]
    4856:	003a      	movs	r2, r7
    4858:	0030      	movs	r0, r6
    485a:	f7ff ffdd 	bl	4818 <__sfputc_r>
    485e:	3401      	adds	r4, #1
    4860:	1c43      	adds	r3, r0, #1
    4862:	d1f3      	bne.n	484c <__sfputs_r+0xa>
    4864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00004868 <_vfiprintf_r>:
    4868:	b5f0      	push	{r4, r5, r6, r7, lr}
    486a:	b09f      	sub	sp, #124	; 0x7c
    486c:	0006      	movs	r6, r0
    486e:	000f      	movs	r7, r1
    4870:	0014      	movs	r4, r2
    4872:	9305      	str	r3, [sp, #20]
    4874:	2800      	cmp	r0, #0
    4876:	d004      	beq.n	4882 <_vfiprintf_r+0x1a>
    4878:	6983      	ldr	r3, [r0, #24]
    487a:	2b00      	cmp	r3, #0
    487c:	d101      	bne.n	4882 <_vfiprintf_r+0x1a>
    487e:	f7ff fe17 	bl	44b0 <__sinit>
    4882:	4b7f      	ldr	r3, [pc, #508]	; (4a80 <_vfiprintf_r+0x218>)
    4884:	429f      	cmp	r7, r3
    4886:	d15c      	bne.n	4942 <_vfiprintf_r+0xda>
    4888:	6877      	ldr	r7, [r6, #4]
    488a:	89bb      	ldrh	r3, [r7, #12]
    488c:	071b      	lsls	r3, r3, #28
    488e:	d562      	bpl.n	4956 <_vfiprintf_r+0xee>
    4890:	693b      	ldr	r3, [r7, #16]
    4892:	2b00      	cmp	r3, #0
    4894:	d05f      	beq.n	4956 <_vfiprintf_r+0xee>
    4896:	2300      	movs	r3, #0
    4898:	ad06      	add	r5, sp, #24
    489a:	616b      	str	r3, [r5, #20]
    489c:	3320      	adds	r3, #32
    489e:	766b      	strb	r3, [r5, #25]
    48a0:	3310      	adds	r3, #16
    48a2:	76ab      	strb	r3, [r5, #26]
    48a4:	9402      	str	r4, [sp, #8]
    48a6:	9c02      	ldr	r4, [sp, #8]
    48a8:	7823      	ldrb	r3, [r4, #0]
    48aa:	2b00      	cmp	r3, #0
    48ac:	d15d      	bne.n	496a <_vfiprintf_r+0x102>
    48ae:	9b02      	ldr	r3, [sp, #8]
    48b0:	1ae3      	subs	r3, r4, r3
    48b2:	9304      	str	r3, [sp, #16]
    48b4:	d00d      	beq.n	48d2 <_vfiprintf_r+0x6a>
    48b6:	9b04      	ldr	r3, [sp, #16]
    48b8:	9a02      	ldr	r2, [sp, #8]
    48ba:	0039      	movs	r1, r7
    48bc:	0030      	movs	r0, r6
    48be:	f7ff ffc0 	bl	4842 <__sfputs_r>
    48c2:	1c43      	adds	r3, r0, #1
    48c4:	d100      	bne.n	48c8 <_vfiprintf_r+0x60>
    48c6:	e0cc      	b.n	4a62 <_vfiprintf_r+0x1fa>
    48c8:	696a      	ldr	r2, [r5, #20]
    48ca:	9b04      	ldr	r3, [sp, #16]
    48cc:	4694      	mov	ip, r2
    48ce:	4463      	add	r3, ip
    48d0:	616b      	str	r3, [r5, #20]
    48d2:	7823      	ldrb	r3, [r4, #0]
    48d4:	2b00      	cmp	r3, #0
    48d6:	d100      	bne.n	48da <_vfiprintf_r+0x72>
    48d8:	e0c3      	b.n	4a62 <_vfiprintf_r+0x1fa>
    48da:	2201      	movs	r2, #1
    48dc:	2300      	movs	r3, #0
    48de:	4252      	negs	r2, r2
    48e0:	606a      	str	r2, [r5, #4]
    48e2:	a902      	add	r1, sp, #8
    48e4:	3254      	adds	r2, #84	; 0x54
    48e6:	1852      	adds	r2, r2, r1
    48e8:	3401      	adds	r4, #1
    48ea:	602b      	str	r3, [r5, #0]
    48ec:	60eb      	str	r3, [r5, #12]
    48ee:	60ab      	str	r3, [r5, #8]
    48f0:	7013      	strb	r3, [r2, #0]
    48f2:	65ab      	str	r3, [r5, #88]	; 0x58
    48f4:	7821      	ldrb	r1, [r4, #0]
    48f6:	2205      	movs	r2, #5
    48f8:	4862      	ldr	r0, [pc, #392]	; (4a84 <_vfiprintf_r+0x21c>)
    48fa:	f000 fb15 	bl	4f28 <memchr>
    48fe:	1c63      	adds	r3, r4, #1
    4900:	469c      	mov	ip, r3
    4902:	2800      	cmp	r0, #0
    4904:	d135      	bne.n	4972 <_vfiprintf_r+0x10a>
    4906:	6829      	ldr	r1, [r5, #0]
    4908:	06cb      	lsls	r3, r1, #27
    490a:	d504      	bpl.n	4916 <_vfiprintf_r+0xae>
    490c:	2353      	movs	r3, #83	; 0x53
    490e:	aa02      	add	r2, sp, #8
    4910:	3020      	adds	r0, #32
    4912:	189b      	adds	r3, r3, r2
    4914:	7018      	strb	r0, [r3, #0]
    4916:	070b      	lsls	r3, r1, #28
    4918:	d504      	bpl.n	4924 <_vfiprintf_r+0xbc>
    491a:	2353      	movs	r3, #83	; 0x53
    491c:	202b      	movs	r0, #43	; 0x2b
    491e:	aa02      	add	r2, sp, #8
    4920:	189b      	adds	r3, r3, r2
    4922:	7018      	strb	r0, [r3, #0]
    4924:	7823      	ldrb	r3, [r4, #0]
    4926:	2b2a      	cmp	r3, #42	; 0x2a
    4928:	d02c      	beq.n	4984 <_vfiprintf_r+0x11c>
    492a:	2000      	movs	r0, #0
    492c:	210a      	movs	r1, #10
    492e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4930:	7822      	ldrb	r2, [r4, #0]
    4932:	3a30      	subs	r2, #48	; 0x30
    4934:	2a09      	cmp	r2, #9
    4936:	d800      	bhi.n	493a <_vfiprintf_r+0xd2>
    4938:	e06b      	b.n	4a12 <_vfiprintf_r+0x1aa>
    493a:	2800      	cmp	r0, #0
    493c:	d02a      	beq.n	4994 <_vfiprintf_r+0x12c>
    493e:	9309      	str	r3, [sp, #36]	; 0x24
    4940:	e028      	b.n	4994 <_vfiprintf_r+0x12c>
    4942:	4b51      	ldr	r3, [pc, #324]	; (4a88 <_vfiprintf_r+0x220>)
    4944:	429f      	cmp	r7, r3
    4946:	d101      	bne.n	494c <_vfiprintf_r+0xe4>
    4948:	68b7      	ldr	r7, [r6, #8]
    494a:	e79e      	b.n	488a <_vfiprintf_r+0x22>
    494c:	4b4f      	ldr	r3, [pc, #316]	; (4a8c <_vfiprintf_r+0x224>)
    494e:	429f      	cmp	r7, r3
    4950:	d19b      	bne.n	488a <_vfiprintf_r+0x22>
    4952:	68f7      	ldr	r7, [r6, #12]
    4954:	e799      	b.n	488a <_vfiprintf_r+0x22>
    4956:	0039      	movs	r1, r7
    4958:	0030      	movs	r0, r6
    495a:	f7ff fc3b 	bl	41d4 <__swsetup_r>
    495e:	2800      	cmp	r0, #0
    4960:	d099      	beq.n	4896 <_vfiprintf_r+0x2e>
    4962:	2001      	movs	r0, #1
    4964:	4240      	negs	r0, r0
    4966:	b01f      	add	sp, #124	; 0x7c
    4968:	bdf0      	pop	{r4, r5, r6, r7, pc}
    496a:	2b25      	cmp	r3, #37	; 0x25
    496c:	d09f      	beq.n	48ae <_vfiprintf_r+0x46>
    496e:	3401      	adds	r4, #1
    4970:	e79a      	b.n	48a8 <_vfiprintf_r+0x40>
    4972:	4b44      	ldr	r3, [pc, #272]	; (4a84 <_vfiprintf_r+0x21c>)
    4974:	6829      	ldr	r1, [r5, #0]
    4976:	1ac0      	subs	r0, r0, r3
    4978:	2301      	movs	r3, #1
    497a:	4083      	lsls	r3, r0
    497c:	430b      	orrs	r3, r1
    497e:	602b      	str	r3, [r5, #0]
    4980:	4664      	mov	r4, ip
    4982:	e7b7      	b.n	48f4 <_vfiprintf_r+0x8c>
    4984:	9b05      	ldr	r3, [sp, #20]
    4986:	1d18      	adds	r0, r3, #4
    4988:	681b      	ldr	r3, [r3, #0]
    498a:	9005      	str	r0, [sp, #20]
    498c:	2b00      	cmp	r3, #0
    498e:	db3a      	blt.n	4a06 <_vfiprintf_r+0x19e>
    4990:	9309      	str	r3, [sp, #36]	; 0x24
    4992:	4664      	mov	r4, ip
    4994:	7823      	ldrb	r3, [r4, #0]
    4996:	2b2e      	cmp	r3, #46	; 0x2e
    4998:	d10b      	bne.n	49b2 <_vfiprintf_r+0x14a>
    499a:	7863      	ldrb	r3, [r4, #1]
    499c:	1c62      	adds	r2, r4, #1
    499e:	2b2a      	cmp	r3, #42	; 0x2a
    49a0:	d13f      	bne.n	4a22 <_vfiprintf_r+0x1ba>
    49a2:	9b05      	ldr	r3, [sp, #20]
    49a4:	3402      	adds	r4, #2
    49a6:	1d1a      	adds	r2, r3, #4
    49a8:	681b      	ldr	r3, [r3, #0]
    49aa:	9205      	str	r2, [sp, #20]
    49ac:	2b00      	cmp	r3, #0
    49ae:	db35      	blt.n	4a1c <_vfiprintf_r+0x1b4>
    49b0:	9307      	str	r3, [sp, #28]
    49b2:	7821      	ldrb	r1, [r4, #0]
    49b4:	2203      	movs	r2, #3
    49b6:	4836      	ldr	r0, [pc, #216]	; (4a90 <_vfiprintf_r+0x228>)
    49b8:	f000 fab6 	bl	4f28 <memchr>
    49bc:	2800      	cmp	r0, #0
    49be:	d007      	beq.n	49d0 <_vfiprintf_r+0x168>
    49c0:	4b33      	ldr	r3, [pc, #204]	; (4a90 <_vfiprintf_r+0x228>)
    49c2:	682a      	ldr	r2, [r5, #0]
    49c4:	1ac0      	subs	r0, r0, r3
    49c6:	2340      	movs	r3, #64	; 0x40
    49c8:	4083      	lsls	r3, r0
    49ca:	4313      	orrs	r3, r2
    49cc:	602b      	str	r3, [r5, #0]
    49ce:	3401      	adds	r4, #1
    49d0:	7821      	ldrb	r1, [r4, #0]
    49d2:	1c63      	adds	r3, r4, #1
    49d4:	2206      	movs	r2, #6
    49d6:	482f      	ldr	r0, [pc, #188]	; (4a94 <_vfiprintf_r+0x22c>)
    49d8:	9302      	str	r3, [sp, #8]
    49da:	7629      	strb	r1, [r5, #24]
    49dc:	f000 faa4 	bl	4f28 <memchr>
    49e0:	2800      	cmp	r0, #0
    49e2:	d044      	beq.n	4a6e <_vfiprintf_r+0x206>
    49e4:	4b2c      	ldr	r3, [pc, #176]	; (4a98 <_vfiprintf_r+0x230>)
    49e6:	2b00      	cmp	r3, #0
    49e8:	d12f      	bne.n	4a4a <_vfiprintf_r+0x1e2>
    49ea:	6829      	ldr	r1, [r5, #0]
    49ec:	9b05      	ldr	r3, [sp, #20]
    49ee:	2207      	movs	r2, #7
    49f0:	05c9      	lsls	r1, r1, #23
    49f2:	d528      	bpl.n	4a46 <_vfiprintf_r+0x1de>
    49f4:	189b      	adds	r3, r3, r2
    49f6:	4393      	bics	r3, r2
    49f8:	3308      	adds	r3, #8
    49fa:	9305      	str	r3, [sp, #20]
    49fc:	696b      	ldr	r3, [r5, #20]
    49fe:	9a03      	ldr	r2, [sp, #12]
    4a00:	189b      	adds	r3, r3, r2
    4a02:	616b      	str	r3, [r5, #20]
    4a04:	e74f      	b.n	48a6 <_vfiprintf_r+0x3e>
    4a06:	425b      	negs	r3, r3
    4a08:	60eb      	str	r3, [r5, #12]
    4a0a:	2302      	movs	r3, #2
    4a0c:	430b      	orrs	r3, r1
    4a0e:	602b      	str	r3, [r5, #0]
    4a10:	e7bf      	b.n	4992 <_vfiprintf_r+0x12a>
    4a12:	434b      	muls	r3, r1
    4a14:	3401      	adds	r4, #1
    4a16:	189b      	adds	r3, r3, r2
    4a18:	2001      	movs	r0, #1
    4a1a:	e789      	b.n	4930 <_vfiprintf_r+0xc8>
    4a1c:	2301      	movs	r3, #1
    4a1e:	425b      	negs	r3, r3
    4a20:	e7c6      	b.n	49b0 <_vfiprintf_r+0x148>
    4a22:	2300      	movs	r3, #0
    4a24:	0014      	movs	r4, r2
    4a26:	200a      	movs	r0, #10
    4a28:	001a      	movs	r2, r3
    4a2a:	606b      	str	r3, [r5, #4]
    4a2c:	7821      	ldrb	r1, [r4, #0]
    4a2e:	3930      	subs	r1, #48	; 0x30
    4a30:	2909      	cmp	r1, #9
    4a32:	d903      	bls.n	4a3c <_vfiprintf_r+0x1d4>
    4a34:	2b00      	cmp	r3, #0
    4a36:	d0bc      	beq.n	49b2 <_vfiprintf_r+0x14a>
    4a38:	9207      	str	r2, [sp, #28]
    4a3a:	e7ba      	b.n	49b2 <_vfiprintf_r+0x14a>
    4a3c:	4342      	muls	r2, r0
    4a3e:	3401      	adds	r4, #1
    4a40:	1852      	adds	r2, r2, r1
    4a42:	2301      	movs	r3, #1
    4a44:	e7f2      	b.n	4a2c <_vfiprintf_r+0x1c4>
    4a46:	3307      	adds	r3, #7
    4a48:	e7d5      	b.n	49f6 <_vfiprintf_r+0x18e>
    4a4a:	ab05      	add	r3, sp, #20
    4a4c:	9300      	str	r3, [sp, #0]
    4a4e:	003a      	movs	r2, r7
    4a50:	4b12      	ldr	r3, [pc, #72]	; (4a9c <_vfiprintf_r+0x234>)
    4a52:	0029      	movs	r1, r5
    4a54:	0030      	movs	r0, r6
    4a56:	e000      	b.n	4a5a <_vfiprintf_r+0x1f2>
    4a58:	bf00      	nop
    4a5a:	9003      	str	r0, [sp, #12]
    4a5c:	9b03      	ldr	r3, [sp, #12]
    4a5e:	3301      	adds	r3, #1
    4a60:	d1cc      	bne.n	49fc <_vfiprintf_r+0x194>
    4a62:	89bb      	ldrh	r3, [r7, #12]
    4a64:	065b      	lsls	r3, r3, #25
    4a66:	d500      	bpl.n	4a6a <_vfiprintf_r+0x202>
    4a68:	e77b      	b.n	4962 <_vfiprintf_r+0xfa>
    4a6a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    4a6c:	e77b      	b.n	4966 <_vfiprintf_r+0xfe>
    4a6e:	ab05      	add	r3, sp, #20
    4a70:	9300      	str	r3, [sp, #0]
    4a72:	003a      	movs	r2, r7
    4a74:	4b09      	ldr	r3, [pc, #36]	; (4a9c <_vfiprintf_r+0x234>)
    4a76:	0029      	movs	r1, r5
    4a78:	0030      	movs	r0, r6
    4a7a:	f000 f87f 	bl	4b7c <_printf_i>
    4a7e:	e7ec      	b.n	4a5a <_vfiprintf_r+0x1f2>
    4a80:	00005260 	.word	0x00005260
    4a84:	000052a0 	.word	0x000052a0
    4a88:	00005280 	.word	0x00005280
    4a8c:	00005240 	.word	0x00005240
    4a90:	000052a6 	.word	0x000052a6
    4a94:	000052aa 	.word	0x000052aa
    4a98:	00000000 	.word	0x00000000
    4a9c:	00004843 	.word	0x00004843

00004aa0 <_printf_common>:
    4aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4aa2:	0015      	movs	r5, r2
    4aa4:	9301      	str	r3, [sp, #4]
    4aa6:	688a      	ldr	r2, [r1, #8]
    4aa8:	690b      	ldr	r3, [r1, #16]
    4aaa:	9000      	str	r0, [sp, #0]
    4aac:	000c      	movs	r4, r1
    4aae:	4293      	cmp	r3, r2
    4ab0:	da00      	bge.n	4ab4 <_printf_common+0x14>
    4ab2:	0013      	movs	r3, r2
    4ab4:	0022      	movs	r2, r4
    4ab6:	602b      	str	r3, [r5, #0]
    4ab8:	3243      	adds	r2, #67	; 0x43
    4aba:	7812      	ldrb	r2, [r2, #0]
    4abc:	2a00      	cmp	r2, #0
    4abe:	d001      	beq.n	4ac4 <_printf_common+0x24>
    4ac0:	3301      	adds	r3, #1
    4ac2:	602b      	str	r3, [r5, #0]
    4ac4:	6823      	ldr	r3, [r4, #0]
    4ac6:	069b      	lsls	r3, r3, #26
    4ac8:	d502      	bpl.n	4ad0 <_printf_common+0x30>
    4aca:	682b      	ldr	r3, [r5, #0]
    4acc:	3302      	adds	r3, #2
    4ace:	602b      	str	r3, [r5, #0]
    4ad0:	2706      	movs	r7, #6
    4ad2:	6823      	ldr	r3, [r4, #0]
    4ad4:	401f      	ands	r7, r3
    4ad6:	d027      	beq.n	4b28 <_printf_common+0x88>
    4ad8:	0023      	movs	r3, r4
    4ada:	3343      	adds	r3, #67	; 0x43
    4adc:	781b      	ldrb	r3, [r3, #0]
    4ade:	1e5a      	subs	r2, r3, #1
    4ae0:	4193      	sbcs	r3, r2
    4ae2:	6822      	ldr	r2, [r4, #0]
    4ae4:	0692      	lsls	r2, r2, #26
    4ae6:	d430      	bmi.n	4b4a <_printf_common+0xaa>
    4ae8:	0022      	movs	r2, r4
    4aea:	9901      	ldr	r1, [sp, #4]
    4aec:	3243      	adds	r2, #67	; 0x43
    4aee:	9800      	ldr	r0, [sp, #0]
    4af0:	9e08      	ldr	r6, [sp, #32]
    4af2:	47b0      	blx	r6
    4af4:	1c43      	adds	r3, r0, #1
    4af6:	d025      	beq.n	4b44 <_printf_common+0xa4>
    4af8:	2306      	movs	r3, #6
    4afa:	6820      	ldr	r0, [r4, #0]
    4afc:	682a      	ldr	r2, [r5, #0]
    4afe:	68e1      	ldr	r1, [r4, #12]
    4b00:	4003      	ands	r3, r0
    4b02:	2500      	movs	r5, #0
    4b04:	2b04      	cmp	r3, #4
    4b06:	d103      	bne.n	4b10 <_printf_common+0x70>
    4b08:	1a8d      	subs	r5, r1, r2
    4b0a:	43eb      	mvns	r3, r5
    4b0c:	17db      	asrs	r3, r3, #31
    4b0e:	401d      	ands	r5, r3
    4b10:	68a3      	ldr	r3, [r4, #8]
    4b12:	6922      	ldr	r2, [r4, #16]
    4b14:	4293      	cmp	r3, r2
    4b16:	dd01      	ble.n	4b1c <_printf_common+0x7c>
    4b18:	1a9b      	subs	r3, r3, r2
    4b1a:	18ed      	adds	r5, r5, r3
    4b1c:	2700      	movs	r7, #0
    4b1e:	42bd      	cmp	r5, r7
    4b20:	d120      	bne.n	4b64 <_printf_common+0xc4>
    4b22:	2000      	movs	r0, #0
    4b24:	e010      	b.n	4b48 <_printf_common+0xa8>
    4b26:	3701      	adds	r7, #1
    4b28:	68e3      	ldr	r3, [r4, #12]
    4b2a:	682a      	ldr	r2, [r5, #0]
    4b2c:	1a9b      	subs	r3, r3, r2
    4b2e:	429f      	cmp	r7, r3
    4b30:	dad2      	bge.n	4ad8 <_printf_common+0x38>
    4b32:	0022      	movs	r2, r4
    4b34:	2301      	movs	r3, #1
    4b36:	3219      	adds	r2, #25
    4b38:	9901      	ldr	r1, [sp, #4]
    4b3a:	9800      	ldr	r0, [sp, #0]
    4b3c:	9e08      	ldr	r6, [sp, #32]
    4b3e:	47b0      	blx	r6
    4b40:	1c43      	adds	r3, r0, #1
    4b42:	d1f0      	bne.n	4b26 <_printf_common+0x86>
    4b44:	2001      	movs	r0, #1
    4b46:	4240      	negs	r0, r0
    4b48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4b4a:	2030      	movs	r0, #48	; 0x30
    4b4c:	18e1      	adds	r1, r4, r3
    4b4e:	3143      	adds	r1, #67	; 0x43
    4b50:	7008      	strb	r0, [r1, #0]
    4b52:	0021      	movs	r1, r4
    4b54:	1c5a      	adds	r2, r3, #1
    4b56:	3145      	adds	r1, #69	; 0x45
    4b58:	7809      	ldrb	r1, [r1, #0]
    4b5a:	18a2      	adds	r2, r4, r2
    4b5c:	3243      	adds	r2, #67	; 0x43
    4b5e:	3302      	adds	r3, #2
    4b60:	7011      	strb	r1, [r2, #0]
    4b62:	e7c1      	b.n	4ae8 <_printf_common+0x48>
    4b64:	0022      	movs	r2, r4
    4b66:	2301      	movs	r3, #1
    4b68:	321a      	adds	r2, #26
    4b6a:	9901      	ldr	r1, [sp, #4]
    4b6c:	9800      	ldr	r0, [sp, #0]
    4b6e:	9e08      	ldr	r6, [sp, #32]
    4b70:	47b0      	blx	r6
    4b72:	1c43      	adds	r3, r0, #1
    4b74:	d0e6      	beq.n	4b44 <_printf_common+0xa4>
    4b76:	3701      	adds	r7, #1
    4b78:	e7d1      	b.n	4b1e <_printf_common+0x7e>
	...

00004b7c <_printf_i>:
    4b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b7e:	b08b      	sub	sp, #44	; 0x2c
    4b80:	9206      	str	r2, [sp, #24]
    4b82:	000a      	movs	r2, r1
    4b84:	3243      	adds	r2, #67	; 0x43
    4b86:	9307      	str	r3, [sp, #28]
    4b88:	9005      	str	r0, [sp, #20]
    4b8a:	9204      	str	r2, [sp, #16]
    4b8c:	7e0a      	ldrb	r2, [r1, #24]
    4b8e:	000c      	movs	r4, r1
    4b90:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4b92:	2a6e      	cmp	r2, #110	; 0x6e
    4b94:	d100      	bne.n	4b98 <_printf_i+0x1c>
    4b96:	e08f      	b.n	4cb8 <_printf_i+0x13c>
    4b98:	d817      	bhi.n	4bca <_printf_i+0x4e>
    4b9a:	2a63      	cmp	r2, #99	; 0x63
    4b9c:	d02c      	beq.n	4bf8 <_printf_i+0x7c>
    4b9e:	d808      	bhi.n	4bb2 <_printf_i+0x36>
    4ba0:	2a00      	cmp	r2, #0
    4ba2:	d100      	bne.n	4ba6 <_printf_i+0x2a>
    4ba4:	e099      	b.n	4cda <_printf_i+0x15e>
    4ba6:	2a58      	cmp	r2, #88	; 0x58
    4ba8:	d054      	beq.n	4c54 <_printf_i+0xd8>
    4baa:	0026      	movs	r6, r4
    4bac:	3642      	adds	r6, #66	; 0x42
    4bae:	7032      	strb	r2, [r6, #0]
    4bb0:	e029      	b.n	4c06 <_printf_i+0x8a>
    4bb2:	2a64      	cmp	r2, #100	; 0x64
    4bb4:	d001      	beq.n	4bba <_printf_i+0x3e>
    4bb6:	2a69      	cmp	r2, #105	; 0x69
    4bb8:	d1f7      	bne.n	4baa <_printf_i+0x2e>
    4bba:	6821      	ldr	r1, [r4, #0]
    4bbc:	681a      	ldr	r2, [r3, #0]
    4bbe:	0608      	lsls	r0, r1, #24
    4bc0:	d523      	bpl.n	4c0a <_printf_i+0x8e>
    4bc2:	1d11      	adds	r1, r2, #4
    4bc4:	6019      	str	r1, [r3, #0]
    4bc6:	6815      	ldr	r5, [r2, #0]
    4bc8:	e025      	b.n	4c16 <_printf_i+0x9a>
    4bca:	2a73      	cmp	r2, #115	; 0x73
    4bcc:	d100      	bne.n	4bd0 <_printf_i+0x54>
    4bce:	e088      	b.n	4ce2 <_printf_i+0x166>
    4bd0:	d808      	bhi.n	4be4 <_printf_i+0x68>
    4bd2:	2a6f      	cmp	r2, #111	; 0x6f
    4bd4:	d029      	beq.n	4c2a <_printf_i+0xae>
    4bd6:	2a70      	cmp	r2, #112	; 0x70
    4bd8:	d1e7      	bne.n	4baa <_printf_i+0x2e>
    4bda:	2220      	movs	r2, #32
    4bdc:	6809      	ldr	r1, [r1, #0]
    4bde:	430a      	orrs	r2, r1
    4be0:	6022      	str	r2, [r4, #0]
    4be2:	e003      	b.n	4bec <_printf_i+0x70>
    4be4:	2a75      	cmp	r2, #117	; 0x75
    4be6:	d020      	beq.n	4c2a <_printf_i+0xae>
    4be8:	2a78      	cmp	r2, #120	; 0x78
    4bea:	d1de      	bne.n	4baa <_printf_i+0x2e>
    4bec:	0022      	movs	r2, r4
    4bee:	2178      	movs	r1, #120	; 0x78
    4bf0:	3245      	adds	r2, #69	; 0x45
    4bf2:	7011      	strb	r1, [r2, #0]
    4bf4:	4a6c      	ldr	r2, [pc, #432]	; (4da8 <_printf_i+0x22c>)
    4bf6:	e030      	b.n	4c5a <_printf_i+0xde>
    4bf8:	000e      	movs	r6, r1
    4bfa:	681a      	ldr	r2, [r3, #0]
    4bfc:	3642      	adds	r6, #66	; 0x42
    4bfe:	1d11      	adds	r1, r2, #4
    4c00:	6019      	str	r1, [r3, #0]
    4c02:	6813      	ldr	r3, [r2, #0]
    4c04:	7033      	strb	r3, [r6, #0]
    4c06:	2301      	movs	r3, #1
    4c08:	e079      	b.n	4cfe <_printf_i+0x182>
    4c0a:	0649      	lsls	r1, r1, #25
    4c0c:	d5d9      	bpl.n	4bc2 <_printf_i+0x46>
    4c0e:	1d11      	adds	r1, r2, #4
    4c10:	6019      	str	r1, [r3, #0]
    4c12:	2300      	movs	r3, #0
    4c14:	5ed5      	ldrsh	r5, [r2, r3]
    4c16:	2d00      	cmp	r5, #0
    4c18:	da03      	bge.n	4c22 <_printf_i+0xa6>
    4c1a:	232d      	movs	r3, #45	; 0x2d
    4c1c:	9a04      	ldr	r2, [sp, #16]
    4c1e:	426d      	negs	r5, r5
    4c20:	7013      	strb	r3, [r2, #0]
    4c22:	4b62      	ldr	r3, [pc, #392]	; (4dac <_printf_i+0x230>)
    4c24:	270a      	movs	r7, #10
    4c26:	9303      	str	r3, [sp, #12]
    4c28:	e02f      	b.n	4c8a <_printf_i+0x10e>
    4c2a:	6820      	ldr	r0, [r4, #0]
    4c2c:	6819      	ldr	r1, [r3, #0]
    4c2e:	0605      	lsls	r5, r0, #24
    4c30:	d503      	bpl.n	4c3a <_printf_i+0xbe>
    4c32:	1d08      	adds	r0, r1, #4
    4c34:	6018      	str	r0, [r3, #0]
    4c36:	680d      	ldr	r5, [r1, #0]
    4c38:	e005      	b.n	4c46 <_printf_i+0xca>
    4c3a:	0640      	lsls	r0, r0, #25
    4c3c:	d5f9      	bpl.n	4c32 <_printf_i+0xb6>
    4c3e:	680d      	ldr	r5, [r1, #0]
    4c40:	1d08      	adds	r0, r1, #4
    4c42:	6018      	str	r0, [r3, #0]
    4c44:	b2ad      	uxth	r5, r5
    4c46:	4b59      	ldr	r3, [pc, #356]	; (4dac <_printf_i+0x230>)
    4c48:	2708      	movs	r7, #8
    4c4a:	9303      	str	r3, [sp, #12]
    4c4c:	2a6f      	cmp	r2, #111	; 0x6f
    4c4e:	d018      	beq.n	4c82 <_printf_i+0x106>
    4c50:	270a      	movs	r7, #10
    4c52:	e016      	b.n	4c82 <_printf_i+0x106>
    4c54:	3145      	adds	r1, #69	; 0x45
    4c56:	700a      	strb	r2, [r1, #0]
    4c58:	4a54      	ldr	r2, [pc, #336]	; (4dac <_printf_i+0x230>)
    4c5a:	9203      	str	r2, [sp, #12]
    4c5c:	681a      	ldr	r2, [r3, #0]
    4c5e:	6821      	ldr	r1, [r4, #0]
    4c60:	1d10      	adds	r0, r2, #4
    4c62:	6018      	str	r0, [r3, #0]
    4c64:	6815      	ldr	r5, [r2, #0]
    4c66:	0608      	lsls	r0, r1, #24
    4c68:	d522      	bpl.n	4cb0 <_printf_i+0x134>
    4c6a:	07cb      	lsls	r3, r1, #31
    4c6c:	d502      	bpl.n	4c74 <_printf_i+0xf8>
    4c6e:	2320      	movs	r3, #32
    4c70:	4319      	orrs	r1, r3
    4c72:	6021      	str	r1, [r4, #0]
    4c74:	2710      	movs	r7, #16
    4c76:	2d00      	cmp	r5, #0
    4c78:	d103      	bne.n	4c82 <_printf_i+0x106>
    4c7a:	2320      	movs	r3, #32
    4c7c:	6822      	ldr	r2, [r4, #0]
    4c7e:	439a      	bics	r2, r3
    4c80:	6022      	str	r2, [r4, #0]
    4c82:	0023      	movs	r3, r4
    4c84:	2200      	movs	r2, #0
    4c86:	3343      	adds	r3, #67	; 0x43
    4c88:	701a      	strb	r2, [r3, #0]
    4c8a:	6863      	ldr	r3, [r4, #4]
    4c8c:	60a3      	str	r3, [r4, #8]
    4c8e:	2b00      	cmp	r3, #0
    4c90:	db5c      	blt.n	4d4c <_printf_i+0x1d0>
    4c92:	2204      	movs	r2, #4
    4c94:	6821      	ldr	r1, [r4, #0]
    4c96:	4391      	bics	r1, r2
    4c98:	6021      	str	r1, [r4, #0]
    4c9a:	2d00      	cmp	r5, #0
    4c9c:	d158      	bne.n	4d50 <_printf_i+0x1d4>
    4c9e:	9e04      	ldr	r6, [sp, #16]
    4ca0:	2b00      	cmp	r3, #0
    4ca2:	d064      	beq.n	4d6e <_printf_i+0x1f2>
    4ca4:	0026      	movs	r6, r4
    4ca6:	9b03      	ldr	r3, [sp, #12]
    4ca8:	3642      	adds	r6, #66	; 0x42
    4caa:	781b      	ldrb	r3, [r3, #0]
    4cac:	7033      	strb	r3, [r6, #0]
    4cae:	e05e      	b.n	4d6e <_printf_i+0x1f2>
    4cb0:	0648      	lsls	r0, r1, #25
    4cb2:	d5da      	bpl.n	4c6a <_printf_i+0xee>
    4cb4:	b2ad      	uxth	r5, r5
    4cb6:	e7d8      	b.n	4c6a <_printf_i+0xee>
    4cb8:	6809      	ldr	r1, [r1, #0]
    4cba:	681a      	ldr	r2, [r3, #0]
    4cbc:	0608      	lsls	r0, r1, #24
    4cbe:	d505      	bpl.n	4ccc <_printf_i+0x150>
    4cc0:	1d11      	adds	r1, r2, #4
    4cc2:	6019      	str	r1, [r3, #0]
    4cc4:	6813      	ldr	r3, [r2, #0]
    4cc6:	6962      	ldr	r2, [r4, #20]
    4cc8:	601a      	str	r2, [r3, #0]
    4cca:	e006      	b.n	4cda <_printf_i+0x15e>
    4ccc:	0649      	lsls	r1, r1, #25
    4cce:	d5f7      	bpl.n	4cc0 <_printf_i+0x144>
    4cd0:	1d11      	adds	r1, r2, #4
    4cd2:	6019      	str	r1, [r3, #0]
    4cd4:	6813      	ldr	r3, [r2, #0]
    4cd6:	8aa2      	ldrh	r2, [r4, #20]
    4cd8:	801a      	strh	r2, [r3, #0]
    4cda:	2300      	movs	r3, #0
    4cdc:	9e04      	ldr	r6, [sp, #16]
    4cde:	6123      	str	r3, [r4, #16]
    4ce0:	e054      	b.n	4d8c <_printf_i+0x210>
    4ce2:	681a      	ldr	r2, [r3, #0]
    4ce4:	1d11      	adds	r1, r2, #4
    4ce6:	6019      	str	r1, [r3, #0]
    4ce8:	6816      	ldr	r6, [r2, #0]
    4cea:	2100      	movs	r1, #0
    4cec:	6862      	ldr	r2, [r4, #4]
    4cee:	0030      	movs	r0, r6
    4cf0:	f000 f91a 	bl	4f28 <memchr>
    4cf4:	2800      	cmp	r0, #0
    4cf6:	d001      	beq.n	4cfc <_printf_i+0x180>
    4cf8:	1b80      	subs	r0, r0, r6
    4cfa:	6060      	str	r0, [r4, #4]
    4cfc:	6863      	ldr	r3, [r4, #4]
    4cfe:	6123      	str	r3, [r4, #16]
    4d00:	2300      	movs	r3, #0
    4d02:	9a04      	ldr	r2, [sp, #16]
    4d04:	7013      	strb	r3, [r2, #0]
    4d06:	e041      	b.n	4d8c <_printf_i+0x210>
    4d08:	6923      	ldr	r3, [r4, #16]
    4d0a:	0032      	movs	r2, r6
    4d0c:	9906      	ldr	r1, [sp, #24]
    4d0e:	9805      	ldr	r0, [sp, #20]
    4d10:	9d07      	ldr	r5, [sp, #28]
    4d12:	47a8      	blx	r5
    4d14:	1c43      	adds	r3, r0, #1
    4d16:	d043      	beq.n	4da0 <_printf_i+0x224>
    4d18:	6823      	ldr	r3, [r4, #0]
    4d1a:	2500      	movs	r5, #0
    4d1c:	079b      	lsls	r3, r3, #30
    4d1e:	d40f      	bmi.n	4d40 <_printf_i+0x1c4>
    4d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4d22:	68e0      	ldr	r0, [r4, #12]
    4d24:	4298      	cmp	r0, r3
    4d26:	da3d      	bge.n	4da4 <_printf_i+0x228>
    4d28:	0018      	movs	r0, r3
    4d2a:	e03b      	b.n	4da4 <_printf_i+0x228>
    4d2c:	0022      	movs	r2, r4
    4d2e:	2301      	movs	r3, #1
    4d30:	3219      	adds	r2, #25
    4d32:	9906      	ldr	r1, [sp, #24]
    4d34:	9805      	ldr	r0, [sp, #20]
    4d36:	9e07      	ldr	r6, [sp, #28]
    4d38:	47b0      	blx	r6
    4d3a:	1c43      	adds	r3, r0, #1
    4d3c:	d030      	beq.n	4da0 <_printf_i+0x224>
    4d3e:	3501      	adds	r5, #1
    4d40:	68e3      	ldr	r3, [r4, #12]
    4d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4d44:	1a9b      	subs	r3, r3, r2
    4d46:	429d      	cmp	r5, r3
    4d48:	dbf0      	blt.n	4d2c <_printf_i+0x1b0>
    4d4a:	e7e9      	b.n	4d20 <_printf_i+0x1a4>
    4d4c:	2d00      	cmp	r5, #0
    4d4e:	d0a9      	beq.n	4ca4 <_printf_i+0x128>
    4d50:	9e04      	ldr	r6, [sp, #16]
    4d52:	0028      	movs	r0, r5
    4d54:	0039      	movs	r1, r7
    4d56:	f7fe ff3d 	bl	3bd4 <__aeabi_uidivmod>
    4d5a:	9b03      	ldr	r3, [sp, #12]
    4d5c:	3e01      	subs	r6, #1
    4d5e:	5c5b      	ldrb	r3, [r3, r1]
    4d60:	0028      	movs	r0, r5
    4d62:	7033      	strb	r3, [r6, #0]
    4d64:	0039      	movs	r1, r7
    4d66:	f7fe feaf 	bl	3ac8 <__udivsi3>
    4d6a:	1e05      	subs	r5, r0, #0
    4d6c:	d1f1      	bne.n	4d52 <_printf_i+0x1d6>
    4d6e:	2f08      	cmp	r7, #8
    4d70:	d109      	bne.n	4d86 <_printf_i+0x20a>
    4d72:	6823      	ldr	r3, [r4, #0]
    4d74:	07db      	lsls	r3, r3, #31
    4d76:	d506      	bpl.n	4d86 <_printf_i+0x20a>
    4d78:	6863      	ldr	r3, [r4, #4]
    4d7a:	6922      	ldr	r2, [r4, #16]
    4d7c:	4293      	cmp	r3, r2
    4d7e:	dc02      	bgt.n	4d86 <_printf_i+0x20a>
    4d80:	2330      	movs	r3, #48	; 0x30
    4d82:	3e01      	subs	r6, #1
    4d84:	7033      	strb	r3, [r6, #0]
    4d86:	9b04      	ldr	r3, [sp, #16]
    4d88:	1b9b      	subs	r3, r3, r6
    4d8a:	6123      	str	r3, [r4, #16]
    4d8c:	9b07      	ldr	r3, [sp, #28]
    4d8e:	aa09      	add	r2, sp, #36	; 0x24
    4d90:	9300      	str	r3, [sp, #0]
    4d92:	0021      	movs	r1, r4
    4d94:	9b06      	ldr	r3, [sp, #24]
    4d96:	9805      	ldr	r0, [sp, #20]
    4d98:	f7ff fe82 	bl	4aa0 <_printf_common>
    4d9c:	1c43      	adds	r3, r0, #1
    4d9e:	d1b3      	bne.n	4d08 <_printf_i+0x18c>
    4da0:	2001      	movs	r0, #1
    4da2:	4240      	negs	r0, r0
    4da4:	b00b      	add	sp, #44	; 0x2c
    4da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4da8:	000052c2 	.word	0x000052c2
    4dac:	000052b1 	.word	0x000052b1

00004db0 <_sbrk_r>:
    4db0:	2300      	movs	r3, #0
    4db2:	b570      	push	{r4, r5, r6, lr}
    4db4:	4c06      	ldr	r4, [pc, #24]	; (4dd0 <_sbrk_r+0x20>)
    4db6:	0005      	movs	r5, r0
    4db8:	0008      	movs	r0, r1
    4dba:	6023      	str	r3, [r4, #0]
    4dbc:	f7fd fd6a 	bl	2894 <_sbrk>
    4dc0:	1c43      	adds	r3, r0, #1
    4dc2:	d103      	bne.n	4dcc <_sbrk_r+0x1c>
    4dc4:	6823      	ldr	r3, [r4, #0]
    4dc6:	2b00      	cmp	r3, #0
    4dc8:	d000      	beq.n	4dcc <_sbrk_r+0x1c>
    4dca:	602b      	str	r3, [r5, #0]
    4dcc:	bd70      	pop	{r4, r5, r6, pc}
    4dce:	46c0      	nop			; (mov r8, r8)
    4dd0:	20000534 	.word	0x20000534

00004dd4 <__sread>:
    4dd4:	b570      	push	{r4, r5, r6, lr}
    4dd6:	000c      	movs	r4, r1
    4dd8:	250e      	movs	r5, #14
    4dda:	5f49      	ldrsh	r1, [r1, r5]
    4ddc:	f000 f8b2 	bl	4f44 <_read_r>
    4de0:	2800      	cmp	r0, #0
    4de2:	db03      	blt.n	4dec <__sread+0x18>
    4de4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    4de6:	181b      	adds	r3, r3, r0
    4de8:	6563      	str	r3, [r4, #84]	; 0x54
    4dea:	bd70      	pop	{r4, r5, r6, pc}
    4dec:	89a3      	ldrh	r3, [r4, #12]
    4dee:	4a02      	ldr	r2, [pc, #8]	; (4df8 <__sread+0x24>)
    4df0:	4013      	ands	r3, r2
    4df2:	81a3      	strh	r3, [r4, #12]
    4df4:	e7f9      	b.n	4dea <__sread+0x16>
    4df6:	46c0      	nop			; (mov r8, r8)
    4df8:	ffffefff 	.word	0xffffefff

00004dfc <__swrite>:
    4dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dfe:	001f      	movs	r7, r3
    4e00:	898b      	ldrh	r3, [r1, #12]
    4e02:	0005      	movs	r5, r0
    4e04:	000c      	movs	r4, r1
    4e06:	0016      	movs	r6, r2
    4e08:	05db      	lsls	r3, r3, #23
    4e0a:	d505      	bpl.n	4e18 <__swrite+0x1c>
    4e0c:	230e      	movs	r3, #14
    4e0e:	5ec9      	ldrsh	r1, [r1, r3]
    4e10:	2200      	movs	r2, #0
    4e12:	2302      	movs	r3, #2
    4e14:	f000 f874 	bl	4f00 <_lseek_r>
    4e18:	89a3      	ldrh	r3, [r4, #12]
    4e1a:	4a05      	ldr	r2, [pc, #20]	; (4e30 <__swrite+0x34>)
    4e1c:	0028      	movs	r0, r5
    4e1e:	4013      	ands	r3, r2
    4e20:	81a3      	strh	r3, [r4, #12]
    4e22:	0032      	movs	r2, r6
    4e24:	230e      	movs	r3, #14
    4e26:	5ee1      	ldrsh	r1, [r4, r3]
    4e28:	003b      	movs	r3, r7
    4e2a:	f000 f81f 	bl	4e6c <_write_r>
    4e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e30:	ffffefff 	.word	0xffffefff

00004e34 <__sseek>:
    4e34:	b570      	push	{r4, r5, r6, lr}
    4e36:	000c      	movs	r4, r1
    4e38:	250e      	movs	r5, #14
    4e3a:	5f49      	ldrsh	r1, [r1, r5]
    4e3c:	f000 f860 	bl	4f00 <_lseek_r>
    4e40:	89a3      	ldrh	r3, [r4, #12]
    4e42:	1c42      	adds	r2, r0, #1
    4e44:	d103      	bne.n	4e4e <__sseek+0x1a>
    4e46:	4a05      	ldr	r2, [pc, #20]	; (4e5c <__sseek+0x28>)
    4e48:	4013      	ands	r3, r2
    4e4a:	81a3      	strh	r3, [r4, #12]
    4e4c:	bd70      	pop	{r4, r5, r6, pc}
    4e4e:	2280      	movs	r2, #128	; 0x80
    4e50:	0152      	lsls	r2, r2, #5
    4e52:	4313      	orrs	r3, r2
    4e54:	81a3      	strh	r3, [r4, #12]
    4e56:	6560      	str	r0, [r4, #84]	; 0x54
    4e58:	e7f8      	b.n	4e4c <__sseek+0x18>
    4e5a:	46c0      	nop			; (mov r8, r8)
    4e5c:	ffffefff 	.word	0xffffefff

00004e60 <__sclose>:
    4e60:	b510      	push	{r4, lr}
    4e62:	230e      	movs	r3, #14
    4e64:	5ec9      	ldrsh	r1, [r1, r3]
    4e66:	f000 f815 	bl	4e94 <_close_r>
    4e6a:	bd10      	pop	{r4, pc}

00004e6c <_write_r>:
    4e6c:	b570      	push	{r4, r5, r6, lr}
    4e6e:	0005      	movs	r5, r0
    4e70:	0008      	movs	r0, r1
    4e72:	0011      	movs	r1, r2
    4e74:	2200      	movs	r2, #0
    4e76:	4c06      	ldr	r4, [pc, #24]	; (4e90 <_write_r+0x24>)
    4e78:	6022      	str	r2, [r4, #0]
    4e7a:	001a      	movs	r2, r3
    4e7c:	f7fd fce2 	bl	2844 <_write>
    4e80:	1c43      	adds	r3, r0, #1
    4e82:	d103      	bne.n	4e8c <_write_r+0x20>
    4e84:	6823      	ldr	r3, [r4, #0]
    4e86:	2b00      	cmp	r3, #0
    4e88:	d000      	beq.n	4e8c <_write_r+0x20>
    4e8a:	602b      	str	r3, [r5, #0]
    4e8c:	bd70      	pop	{r4, r5, r6, pc}
    4e8e:	46c0      	nop			; (mov r8, r8)
    4e90:	20000534 	.word	0x20000534

00004e94 <_close_r>:
    4e94:	2300      	movs	r3, #0
    4e96:	b570      	push	{r4, r5, r6, lr}
    4e98:	4c06      	ldr	r4, [pc, #24]	; (4eb4 <_close_r+0x20>)
    4e9a:	0005      	movs	r5, r0
    4e9c:	0008      	movs	r0, r1
    4e9e:	6023      	str	r3, [r4, #0]
    4ea0:	f7fd fd0a 	bl	28b8 <_close>
    4ea4:	1c43      	adds	r3, r0, #1
    4ea6:	d103      	bne.n	4eb0 <_close_r+0x1c>
    4ea8:	6823      	ldr	r3, [r4, #0]
    4eaa:	2b00      	cmp	r3, #0
    4eac:	d000      	beq.n	4eb0 <_close_r+0x1c>
    4eae:	602b      	str	r3, [r5, #0]
    4eb0:	bd70      	pop	{r4, r5, r6, pc}
    4eb2:	46c0      	nop			; (mov r8, r8)
    4eb4:	20000534 	.word	0x20000534

00004eb8 <_fstat_r>:
    4eb8:	2300      	movs	r3, #0
    4eba:	b570      	push	{r4, r5, r6, lr}
    4ebc:	4c06      	ldr	r4, [pc, #24]	; (4ed8 <_fstat_r+0x20>)
    4ebe:	0005      	movs	r5, r0
    4ec0:	0008      	movs	r0, r1
    4ec2:	0011      	movs	r1, r2
    4ec4:	6023      	str	r3, [r4, #0]
    4ec6:	f7fd fcfa 	bl	28be <_fstat>
    4eca:	1c43      	adds	r3, r0, #1
    4ecc:	d103      	bne.n	4ed6 <_fstat_r+0x1e>
    4ece:	6823      	ldr	r3, [r4, #0]
    4ed0:	2b00      	cmp	r3, #0
    4ed2:	d000      	beq.n	4ed6 <_fstat_r+0x1e>
    4ed4:	602b      	str	r3, [r5, #0]
    4ed6:	bd70      	pop	{r4, r5, r6, pc}
    4ed8:	20000534 	.word	0x20000534

00004edc <_isatty_r>:
    4edc:	2300      	movs	r3, #0
    4ede:	b570      	push	{r4, r5, r6, lr}
    4ee0:	4c06      	ldr	r4, [pc, #24]	; (4efc <_isatty_r+0x20>)
    4ee2:	0005      	movs	r5, r0
    4ee4:	0008      	movs	r0, r1
    4ee6:	6023      	str	r3, [r4, #0]
    4ee8:	f7fd fcee 	bl	28c8 <_isatty>
    4eec:	1c43      	adds	r3, r0, #1
    4eee:	d103      	bne.n	4ef8 <_isatty_r+0x1c>
    4ef0:	6823      	ldr	r3, [r4, #0]
    4ef2:	2b00      	cmp	r3, #0
    4ef4:	d000      	beq.n	4ef8 <_isatty_r+0x1c>
    4ef6:	602b      	str	r3, [r5, #0]
    4ef8:	bd70      	pop	{r4, r5, r6, pc}
    4efa:	46c0      	nop			; (mov r8, r8)
    4efc:	20000534 	.word	0x20000534

00004f00 <_lseek_r>:
    4f00:	b570      	push	{r4, r5, r6, lr}
    4f02:	0005      	movs	r5, r0
    4f04:	0008      	movs	r0, r1
    4f06:	0011      	movs	r1, r2
    4f08:	2200      	movs	r2, #0
    4f0a:	4c06      	ldr	r4, [pc, #24]	; (4f24 <_lseek_r+0x24>)
    4f0c:	6022      	str	r2, [r4, #0]
    4f0e:	001a      	movs	r2, r3
    4f10:	f7fd fcdc 	bl	28cc <_lseek>
    4f14:	1c43      	adds	r3, r0, #1
    4f16:	d103      	bne.n	4f20 <_lseek_r+0x20>
    4f18:	6823      	ldr	r3, [r4, #0]
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	d000      	beq.n	4f20 <_lseek_r+0x20>
    4f1e:	602b      	str	r3, [r5, #0]
    4f20:	bd70      	pop	{r4, r5, r6, pc}
    4f22:	46c0      	nop			; (mov r8, r8)
    4f24:	20000534 	.word	0x20000534

00004f28 <memchr>:
    4f28:	b2c9      	uxtb	r1, r1
    4f2a:	1882      	adds	r2, r0, r2
    4f2c:	4290      	cmp	r0, r2
    4f2e:	d101      	bne.n	4f34 <memchr+0xc>
    4f30:	2000      	movs	r0, #0
    4f32:	4770      	bx	lr
    4f34:	7803      	ldrb	r3, [r0, #0]
    4f36:	428b      	cmp	r3, r1
    4f38:	d0fb      	beq.n	4f32 <memchr+0xa>
    4f3a:	3001      	adds	r0, #1
    4f3c:	e7f6      	b.n	4f2c <memchr+0x4>

00004f3e <__malloc_lock>:
    4f3e:	4770      	bx	lr

00004f40 <__malloc_unlock>:
    4f40:	4770      	bx	lr
	...

00004f44 <_read_r>:
    4f44:	b570      	push	{r4, r5, r6, lr}
    4f46:	0005      	movs	r5, r0
    4f48:	0008      	movs	r0, r1
    4f4a:	0011      	movs	r1, r2
    4f4c:	2200      	movs	r2, #0
    4f4e:	4c06      	ldr	r4, [pc, #24]	; (4f68 <_read_r+0x24>)
    4f50:	6022      	str	r2, [r4, #0]
    4f52:	001a      	movs	r2, r3
    4f54:	f7fd fc54 	bl	2800 <_read>
    4f58:	1c43      	adds	r3, r0, #1
    4f5a:	d103      	bne.n	4f64 <_read_r+0x20>
    4f5c:	6823      	ldr	r3, [r4, #0]
    4f5e:	2b00      	cmp	r3, #0
    4f60:	d000      	beq.n	4f64 <_read_r+0x20>
    4f62:	602b      	str	r3, [r5, #0]
    4f64:	bd70      	pop	{r4, r5, r6, pc}
    4f66:	46c0      	nop			; (mov r8, r8)
    4f68:	20000534 	.word	0x20000534
    4f6c:	000003f4 	.word	0x000003f4
    4f70:	0000065c 	.word	0x0000065c
    4f74:	0000065c 	.word	0x0000065c
    4f78:	0000065c 	.word	0x0000065c
    4f7c:	0000065c 	.word	0x0000065c
    4f80:	0000065c 	.word	0x0000065c
    4f84:	0000065c 	.word	0x0000065c
    4f88:	0000065c 	.word	0x0000065c
    4f8c:	0000065c 	.word	0x0000065c
    4f90:	0000065c 	.word	0x0000065c
    4f94:	0000065c 	.word	0x0000065c
    4f98:	0000065c 	.word	0x0000065c
    4f9c:	0000065c 	.word	0x0000065c
    4fa0:	0000065c 	.word	0x0000065c
    4fa4:	0000065c 	.word	0x0000065c
    4fa8:	0000065c 	.word	0x0000065c
    4fac:	000003dc 	.word	0x000003dc
    4fb0:	0000065c 	.word	0x0000065c
    4fb4:	0000065c 	.word	0x0000065c
    4fb8:	0000065c 	.word	0x0000065c
    4fbc:	0000065c 	.word	0x0000065c
    4fc0:	0000065c 	.word	0x0000065c
    4fc4:	0000065c 	.word	0x0000065c
    4fc8:	0000065c 	.word	0x0000065c
    4fcc:	0000065c 	.word	0x0000065c
    4fd0:	0000065c 	.word	0x0000065c
    4fd4:	0000065c 	.word	0x0000065c
    4fd8:	0000065c 	.word	0x0000065c
    4fdc:	0000065c 	.word	0x0000065c
    4fe0:	0000065c 	.word	0x0000065c
    4fe4:	0000065c 	.word	0x0000065c
    4fe8:	0000065c 	.word	0x0000065c
    4fec:	000003ec 	.word	0x000003ec
    4ff0:	0000065c 	.word	0x0000065c
    4ff4:	0000065c 	.word	0x0000065c
    4ff8:	0000065c 	.word	0x0000065c
    4ffc:	0000065c 	.word	0x0000065c
    5000:	0000065c 	.word	0x0000065c
    5004:	0000065c 	.word	0x0000065c
    5008:	0000065c 	.word	0x0000065c
    500c:	0000065c 	.word	0x0000065c
    5010:	0000065c 	.word	0x0000065c
    5014:	0000065c 	.word	0x0000065c
    5018:	0000065c 	.word	0x0000065c
    501c:	0000065c 	.word	0x0000065c
    5020:	0000065c 	.word	0x0000065c
    5024:	0000065c 	.word	0x0000065c
    5028:	0000065c 	.word	0x0000065c
    502c:	000003e4 	.word	0x000003e4
    5030:	0000042c 	.word	0x0000042c
    5034:	000003c4 	.word	0x000003c4
    5038:	000003d4 	.word	0x000003d4
    503c:	000003cc 	.word	0x000003cc
    5040:	00000002 	.word	0x00000002
    5044:	00000003 	.word	0x00000003
    5048:	00000028 	.word	0x00000028
    504c:	00000029 	.word	0x00000029
    5050:	00000004 	.word	0x00000004
    5054:	00000005 	.word	0x00000005
    5058:	00000006 	.word	0x00000006
    505c:	00000007 	.word	0x00000007
    5060:	00000008 	.word	0x00000008
    5064:	00000009 	.word	0x00000009
    5068:	0000000a 	.word	0x0000000a
    506c:	0000000b 	.word	0x0000000b
    5070:	00000020 	.word	0x00000020
    5074:	00000021 	.word	0x00000021
    5078:	00000022 	.word	0x00000022
    507c:	00000023 	.word	0x00000023
    5080:	00000028 	.word	0x00000028
    5084:	00000029 	.word	0x00000029
    5088:	00000024 	.word	0x00000024
    508c:	00000025 	.word	0x00000025
    5090:	00000026 	.word	0x00000026
    5094:	00000027 	.word	0x00000027
    5098:	00000008 	.word	0x00000008
    509c:	00000009 	.word	0x00000009

000050a0 <_adc_apbcmasks>:
    50a0:	00020000 00040000                       ........

000050a8 <_adc_biascomp_addr>:
    50a8:	00806020 00806020                        `.. `..

000050b0 <_adc_biascomp_pos>:
    50b0:	00000903                                ....

000050b4 <_adc_biasrefbuf_addr>:
    50b4:	00806020 00806020                        `.. `..

000050bc <_adc_biasrefbuf_pos>:
    50bc:	00000600                                ....

000050c0 <_adc_extchannel_msb>:
    50c0:	0000000b 0000000b                       ........

000050c8 <_adc_gclk_ids>:
    50c8:	00002221                                !"..

000050cc <_tcc_intflag>:
    50cc:	00000001 00000002 00000004 00000008     ................
    50dc:	00001000 00002000 00004000 00008000     ..... ...@......
    50ec:	00010000 00020000 00040000 00080000     ................
    50fc:	42000400 42000800 42000c00 42001000     ...B...B...B...B
    510c:	42001400 42001800 000020ba 000020b6     ...B...B. ... ..
    511c:	000020b6 000020e8 000020e8 000020d2     . ... ... ... ..
    512c:	000020c0 000020d8 000022ac 0000228c     . ... ..."..."..
    513c:	0000228c 000022e2 0000229e 000022ba     ."..."..."..."..
    514c:	00002290 000022c8                       ."..."..

00005154 <adc_interrupt_vectors.13810>:
    5154:	00001a19 6c654423 635f6174 67726168     ....#Delta_charg
    5164:	3d3e2065 202e3020 69207449 25203a73     e >= 0. It is: %
    5174:	207c2064 20726570 6425203a 0000000a     d | per : %d....
    5184:	74754323 676e6974 66666f20 65687420     #Cutting off the
    5194:	61686320 6e696772 69632067 69756372      charging circui
    51a4:	00000074 746c6f56 20656761 0d206425     t...Voltage %d .
    51b4:	0000000a 74696e49 206c6169 746c6564     ....Initial delt
    51c4:	68635f61 65677261 20642520 00000a0d     a_charge %d ....
    51d4:	43200d0a 69747475 6f20676e 74206666     .. Cutting off t
    51e4:	63206568 67726168 20676e69 63726963     he charging circ
    51f4:	20746975 0000000d 76206425 61746c6f     uit ....%d volta
    5204:	25206567 0a0d2064 00000000 63206425     ge %d ......%d c
    5214:	7275635f 746e6572 20642520 00000a0d     _current %d ....
    5224:	64206425 7275635f 746e6572 20642520     %d d_current %d 
    5234:	0a0d0a0d 00000000                       ........

0000523c <_global_impure_ptr>:
    523c:	20000034                                4.. 

00005240 <__sf_fake_stderr>:
	...

00005260 <__sf_fake_stdin>:
	...

00005280 <__sf_fake_stdout>:
	...
    52a0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    52b0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    52c0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    52d0:	00006665                                ef..

000052d4 <_init>:
    52d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52d6:	46c0      	nop			; (mov r8, r8)
    52d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    52da:	bc08      	pop	{r3}
    52dc:	469e      	mov	lr, r3
    52de:	4770      	bx	lr

000052e0 <__init_array_start>:
    52e0:	000000e5 	.word	0x000000e5

000052e4 <_fini>:
    52e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52e6:	46c0      	nop			; (mov r8, r8)
    52e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    52ea:	bc08      	pop	{r3}
    52ec:	469e      	mov	lr, r3
    52ee:	4770      	bx	lr

000052f0 <__fini_array_start>:
    52f0:	000000bd 	.word	0x000000bd
